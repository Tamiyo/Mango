#ifndef MANGO_CL_TOKENS_H
#define MANGO_CL_TOKENS_H
#include<map>
#include<string>

class tokens {
public:
		tokens();

		enum Symbols {
			TS_STRING,
			TS_IDENTIFIER,
			TS_FLOAT,
			TS_INT,
			TS_TERM,
			TS_IF,
			TS_ELIF,
			TS_ELSE,
			TS_LCB,
			TS_RCB,
			TS_LPAREN,
			TS_RPAREN,
			TS_OPERATOR_EQUALS,
			TS_OPERATOR_ADD,
			TS_OPERATOR_SUB,
			TS_OPERATOR_MUL,
			TS_OPERATOR_DIV,
			TS_OPERATOR_EXP,
			TS_COLON,
			TS_COMMA,
			TS_FOR,
			TS_WHILE,
			TS_DEFINE,
			TS_OPERATOR_LT,
			TS_OPERATOR_LTE,
			TS_OPERATOR_GT,
			TS_OPERATOR_GTE,
			TS_OPERATOR_DOUBLE_EQUALS,
			TS_OPERATOR_TRIPLE_EQUALS,
			TS_OPERATOR_NEG,
			TS_OPERATOR_NONNULL,
			TS_SPACE,
			TS_NEWLINE,
			TS_EMPTY,
			TS_EOF,
			NTS_OPERATOR,

			NTS_MANGO,
			NTS_STATEMENTS,
			NTS_STATEMENT,
			NTS_STATEMENT_EXPRESSION,
			NTS_STATEMENT_ASSIGNMENT,
			NTS_STATEMENT_CONDITIONAL,
			NTS_STATEMENT_LOOP,
			NTS_STATEMENT_DEFINE_FUNCTION,
			NTS_STATEMENT_EXPRESSION_2,
			NTS_STATEMENT_EXPRESSION_3,
			NTS_EXPRESSION,
			NTS_STATEMENT_CONDITIONAL_TEST,
			NTS_STATEMENT_CONDITIONAL_ELIF,
			NTS_STATEMENT_CONDITIONAL_ELSE,
			NTS_OPERATOR_BINARY,
			NTS_OPERATOR_UNARY,
			NTS_STATEMENT_LOOP_FOR,
			NTS_STATEMENT_LOOP_WHILE,
			NTS_FUNCTION_PARAMS,
			NTS_STATEMENT_DEFINE_CLASS,

			MYSBL_END
	};

	std::map<std::string, Symbols> TOKENS;
	std::map<int, Symbols> TYPES;
};

#endif //MANGO_CL_TOKENS_H