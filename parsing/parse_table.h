#ifndef MANGOREVISITEDCPPCLION_PARSE_TABLE_H
#define MANGOREVISITEDCPPCLION_PARSE_TABLE_H

#include "map"
#include "stack"
#include "../core/grammar.h"
#include "../tree/tree.h"

using std::map;
using std::pair;
using std::stack;

using namespace grammar;

static map<pair<int, token>, int> taction = {
	{ {0, token::op_minus}, 16},
	{ {0, token::logical_not}, 17},
	{ {0, token::kw_print}, 18},
	{ {0, token::kw_for}, 19},
	{ {0, token::kw_while}, 20},
	{ {0, token::open_paren}, 21},
	{ {0, token::newline}, 22},
	{ {0, token::identifier}, 23},
	{ {0, token::type_string}, 24},
	{ {0, token::type_double}, 25},
	{ {0, token::type_int}, 26},
	{ {1, token::eof}, 0},
	{ {2, token::op_minus}, 16},
	{ {2, token::logical_not}, 17},
	{ {2, token::kw_print}, 18},
	{ {2, token::kw_for}, 19},
	{ {2, token::kw_while}, 20},
	{ {2, token::open_paren}, 21},
	{ {2, token::identifier}, 23},
	{ {2, token::type_string}, 24},
	{ {2, token::type_double}, 25},
	{ {2, token::type_int}, 26},
	{ {3, token::close_curly}, -3},
	{ {3, token::eof}, -3},
	{ {4, token::close_curly}, -8},
	{ {4, token::newline}, 29},
	{ {4, token::eof}, -8},
	{ {5, token::close_curly}, -9},
	{ {5, token::newline}, -9},
	{ {5, token::eof}, -9},
	{ {6, token::close_curly}, -10},
	{ {6, token::newline}, -10},
	{ {6, token::eof}, -10},
	{ {7, token::close_curly}, -12},
	{ {7, token::newline}, -12},
	{ {7, token::eof}, -12},
	{ {8, token::close_curly}, -13},
	{ {8, token::newline}, -13},
	{ {8, token::eof}, -13},
	{ {9, token::close_curly}, -14},
	{ {9, token::newline}, -14},
	{ {9, token::eof}, -14},
	{ {10, token::close_curly}, -15},
	{ {10, token::newline}, -15},
	{ {10, token::eof}, -15},
	{ {11, token::close_paren}, -11},
	{ {11, token::close_curly}, -11},
	{ {11, token::newline}, -11},
	{ {11, token::eof}, -11},
	{ {12, token::op_plus}, 30},
	{ {12, token::op_minus}, 31},
	{ {12, token::close_paren}, -23},
	{ {12, token::close_curly}, -23},
	{ {12, token::colon}, -23},
	{ {12, token::newline}, -23},
	{ {12, token::eof}, -23},
	{ {13, token::op_plus}, -29},
	{ {13, token::op_minus}, -29},
	{ {13, token::op_mult}, 32},
	{ {13, token::op_div}, 33},
	{ {13, token::op_idiv}, 34},
	{ {13, token::op_mod}, 35},
	{ {13, token::op_pow}, 36},
	{ {13, token::close_paren}, -29},
	{ {13, token::close_curly}, -29},
	{ {13, token::colon}, -29},
	{ {13, token::newline}, -29},
	{ {13, token::eof}, -29},
	{ {14, token::op_plus}, -38},
	{ {14, token::op_minus}, -38},
	{ {14, token::op_mult}, -38},
	{ {14, token::op_div}, -38},
	{ {14, token::op_idiv}, -38},
	{ {14, token::op_mod}, -38},
	{ {14, token::op_pow}, -38},
	{ {14, token::cop_lt}, 37},
	{ {14, token::cop_lte}, 38},
	{ {14, token::cop_gt}, 39},
	{ {14, token::cop_gte}, 40},
	{ {14, token::cop_equals}, 41},
	{ {14, token::logical_not}, 42},
	{ {14, token::logical_and}, 43},
	{ {14, token::logical_or}, 44},
	{ {14, token::close_paren}, -38},
	{ {14, token::close_curly}, -38},
	{ {14, token::colon}, -38},
	{ {14, token::newline}, -38},
	{ {14, token::eof}, -38},
	{ {15, token::op_plus}, -41},
	{ {15, token::op_minus}, -41},
	{ {15, token::op_mult}, -41},
	{ {15, token::op_div}, -41},
	{ {15, token::op_idiv}, -41},
	{ {15, token::op_mod}, -41},
	{ {15, token::op_pow}, -41},
	{ {15, token::cop_lt}, -41},
	{ {15, token::cop_lte}, -41},
	{ {15, token::cop_gt}, -41},
	{ {15, token::cop_gte}, -41},
	{ {15, token::cop_equals}, -41},
	{ {15, token::logical_not}, -41},
	{ {15, token::logical_and}, -41},
	{ {15, token::logical_or}, -41},
	{ {15, token::close_paren}, -41},
	{ {15, token::close_curly}, -41},
	{ {15, token::colon}, -41},
	{ {15, token::newline}, -41},
	{ {15, token::eof}, -41},
	{ {16, token::op_minus}, 16},
	{ {16, token::logical_not}, 17},
	{ {16, token::open_paren}, 21},
	{ {16, token::identifier}, 46},
	{ {16, token::type_string}, 24},
	{ {16, token::type_double}, 25},
	{ {16, token::type_int}, 26},
	{ {17, token::op_minus}, 16},
	{ {17, token::logical_not}, 17},
	{ {17, token::open_paren}, 21},
	{ {17, token::identifier}, 46},
	{ {17, token::type_string}, 24},
	{ {17, token::type_double}, 25},
	{ {17, token::type_int}, 26},
	{ {18, token::open_paren}, 48},
	{ {19, token::identifier}, 49},
	{ {20, token::op_minus}, 55},
	{ {20, token::logical_not}, 56},
	{ {20, token::open_paren}, 57},
	{ {20, token::identifier}, 58},
	{ {20, token::type_string}, 59},
	{ {20, token::type_double}, 60},
	{ {20, token::type_int}, 61},
	{ {21, token::op_minus}, 67},
	{ {21, token::logical_not}, 68},
	{ {21, token::open_paren}, 69},
	{ {21, token::identifier}, 70},
	{ {21, token::type_string}, 71},
	{ {21, token::type_double}, 72},
	{ {21, token::type_int}, 73},
	{ {22, token::op_minus}, -5},
	{ {22, token::logical_not}, -5},
	{ {22, token::kw_print}, -5},
	{ {22, token::kw_for}, -5},
	{ {22, token::kw_while}, -5},
	{ {22, token::open_paren}, -5},
	{ {22, token::close_curly}, -5},
	{ {22, token::newline}, 75},
	{ {22, token::identifier}, -5},
	{ {22, token::type_string}, -5},
	{ {22, token::type_double}, -5},
	{ {22, token::type_int}, -5},
	{ {22, token::eof}, -5},
	{ {23, token::op_plus}, -40},
	{ {23, token::op_minus}, -40},
	{ {23, token::op_mult}, -40},
	{ {23, token::op_div}, -40},
	{ {23, token::op_idiv}, -40},
	{ {23, token::op_mod}, -40},
	{ {23, token::op_pow}, -40},
	{ {23, token::op_equals}, 76},
	{ {23, token::cop_lt}, -40},
	{ {23, token::cop_lte}, -40},
	{ {23, token::cop_gt}, -40},
	{ {23, token::cop_gte}, -40},
	{ {23, token::cop_equals}, -40},
	{ {23, token::logical_not}, -40},
	{ {23, token::logical_and}, -40},
	{ {23, token::logical_or}, -40},
	{ {23, token::close_paren}, -40},
	{ {23, token::close_curly}, -40},
	{ {23, token::colon}, -40},
	{ {23, token::newline}, -40},
	{ {23, token::eof}, -40},
	{ {24, token::op_plus}, -46},
	{ {24, token::op_minus}, -46},
	{ {24, token::op_mult}, -46},
	{ {24, token::op_div}, -46},
	{ {24, token::op_idiv}, -46},
	{ {24, token::op_mod}, -46},
	{ {24, token::op_pow}, -46},
	{ {24, token::cop_lt}, -46},
	{ {24, token::cop_lte}, -46},
	{ {24, token::cop_gt}, -46},
	{ {24, token::cop_gte}, -46},
	{ {24, token::cop_equals}, -46},
	{ {24, token::logical_not}, -46},
	{ {24, token::logical_and}, -46},
	{ {24, token::logical_or}, -46},
	{ {24, token::close_paren}, -46},
	{ {24, token::close_curly}, -46},
	{ {24, token::colon}, -46},
	{ {24, token::newline}, -46},
	{ {24, token::eof}, -46},
	{ {25, token::op_plus}, -44},
	{ {25, token::op_minus}, -44},
	{ {25, token::op_mult}, -44},
	{ {25, token::op_div}, -44},
	{ {25, token::op_idiv}, -44},
	{ {25, token::op_mod}, -44},
	{ {25, token::op_pow}, -44},
	{ {25, token::cop_lt}, -44},
	{ {25, token::cop_lte}, -44},
	{ {25, token::cop_gt}, -44},
	{ {25, token::cop_gte}, -44},
	{ {25, token::cop_equals}, -44},
	{ {25, token::logical_not}, -44},
	{ {25, token::logical_and}, -44},
	{ {25, token::logical_or}, -44},
	{ {25, token::close_paren}, -44},
	{ {25, token::close_curly}, -44},
	{ {25, token::colon}, -44},
	{ {25, token::newline}, -44},
	{ {25, token::eof}, -44},
	{ {26, token::op_plus}, -45},
	{ {26, token::op_minus}, -45},
	{ {26, token::op_mult}, -45},
	{ {26, token::op_div}, -45},
	{ {26, token::op_idiv}, -45},
	{ {26, token::op_mod}, -45},
	{ {26, token::op_pow}, -45},
	{ {26, token::cop_lt}, -45},
	{ {26, token::cop_lte}, -45},
	{ {26, token::cop_gt}, -45},
	{ {26, token::cop_gte}, -45},
	{ {26, token::cop_equals}, -45},
	{ {26, token::logical_not}, -45},
	{ {26, token::logical_and}, -45},
	{ {26, token::logical_or}, -45},
	{ {26, token::close_paren}, -45},
	{ {26, token::close_curly}, -45},
	{ {26, token::colon}, -45},
	{ {26, token::newline}, -45},
	{ {26, token::eof}, -45},
	{ {27, token::close_curly}, -2},
	{ {27, token::eof}, -2},
	{ {28, token::op_minus}, 16},
	{ {28, token::logical_not}, 17},
	{ {28, token::kw_print}, 18},
	{ {28, token::kw_for}, 19},
	{ {28, token::kw_while}, 20},
	{ {28, token::open_paren}, 21},
	{ {28, token::close_curly}, -7},
	{ {28, token::identifier}, 23},
	{ {28, token::type_string}, 24},
	{ {28, token::type_double}, 25},
	{ {28, token::type_int}, 26},
	{ {28, token::eof}, -7},
	{ {29, token::op_minus}, -5},
	{ {29, token::logical_not}, -5},
	{ {29, token::kw_print}, -5},
	{ {29, token::kw_for}, -5},
	{ {29, token::kw_while}, -5},
	{ {29, token::open_paren}, -5},
	{ {29, token::close_curly}, -5},
	{ {29, token::newline}, 79},
	{ {29, token::identifier}, -5},
	{ {29, token::type_string}, -5},
	{ {29, token::type_double}, -5},
	{ {29, token::type_int}, -5},
	{ {29, token::eof}, -5},
	{ {30, token::op_minus}, 16},
	{ {30, token::logical_not}, 17},
	{ {30, token::open_paren}, 21},
	{ {30, token::identifier}, 46},
	{ {30, token::type_string}, 24},
	{ {30, token::type_double}, 25},
	{ {30, token::type_int}, 26},
	{ {31, token::op_minus}, 16},
	{ {31, token::logical_not}, 17},
	{ {31, token::open_paren}, 21},
	{ {31, token::identifier}, 46},
	{ {31, token::type_string}, 24},
	{ {31, token::type_double}, 25},
	{ {31, token::type_int}, 26},
	{ {32, token::op_minus}, 16},
	{ {32, token::logical_not}, 17},
	{ {32, token::open_paren}, 21},
	{ {32, token::identifier}, 46},
	{ {32, token::type_string}, 24},
	{ {32, token::type_double}, 25},
	{ {32, token::type_int}, 26},
	{ {33, token::op_minus}, 16},
	{ {33, token::logical_not}, 17},
	{ {33, token::open_paren}, 21},
	{ {33, token::identifier}, 46},
	{ {33, token::type_string}, 24},
	{ {33, token::type_double}, 25},
	{ {33, token::type_int}, 26},
	{ {34, token::op_minus}, 16},
	{ {34, token::logical_not}, 17},
	{ {34, token::open_paren}, 21},
	{ {34, token::identifier}, 46},
	{ {34, token::type_string}, 24},
	{ {34, token::type_double}, 25},
	{ {34, token::type_int}, 26},
	{ {35, token::op_minus}, 16},
	{ {35, token::logical_not}, 17},
	{ {35, token::open_paren}, 21},
	{ {35, token::identifier}, 46},
	{ {35, token::type_string}, 24},
	{ {35, token::type_double}, 25},
	{ {35, token::type_int}, 26},
	{ {36, token::op_minus}, 16},
	{ {36, token::logical_not}, 17},
	{ {36, token::open_paren}, 21},
	{ {36, token::identifier}, 46},
	{ {36, token::type_string}, 24},
	{ {36, token::type_double}, 25},
	{ {36, token::type_int}, 26},
	{ {37, token::op_minus}, 16},
	{ {37, token::logical_not}, 17},
	{ {37, token::open_paren}, 21},
	{ {37, token::identifier}, 46},
	{ {37, token::type_string}, 24},
	{ {37, token::type_double}, 25},
	{ {37, token::type_int}, 26},
	{ {38, token::op_minus}, 16},
	{ {38, token::logical_not}, 17},
	{ {38, token::open_paren}, 21},
	{ {38, token::identifier}, 46},
	{ {38, token::type_string}, 24},
	{ {38, token::type_double}, 25},
	{ {38, token::type_int}, 26},
	{ {39, token::op_minus}, 16},
	{ {39, token::logical_not}, 17},
	{ {39, token::open_paren}, 21},
	{ {39, token::identifier}, 46},
	{ {39, token::type_string}, 24},
	{ {39, token::type_double}, 25},
	{ {39, token::type_int}, 26},
	{ {40, token::op_minus}, 16},
	{ {40, token::logical_not}, 17},
	{ {40, token::open_paren}, 21},
	{ {40, token::identifier}, 46},
	{ {40, token::type_string}, 24},
	{ {40, token::type_double}, 25},
	{ {40, token::type_int}, 26},
	{ {41, token::op_minus}, 16},
	{ {41, token::logical_not}, 17},
	{ {41, token::open_paren}, 21},
	{ {41, token::identifier}, 46},
	{ {41, token::type_string}, 24},
	{ {41, token::type_double}, 25},
	{ {41, token::type_int}, 26},
	{ {42, token::op_equals}, 92},
	{ {43, token::op_minus}, 16},
	{ {43, token::logical_not}, 17},
	{ {43, token::open_paren}, 21},
	{ {43, token::identifier}, 46},
	{ {43, token::type_string}, 24},
	{ {43, token::type_double}, 25},
	{ {43, token::type_int}, 26},
	{ {44, token::op_minus}, 16},
	{ {44, token::logical_not}, 17},
	{ {44, token::open_paren}, 21},
	{ {44, token::identifier}, 46},
	{ {44, token::type_string}, 24},
	{ {44, token::type_double}, 25},
	{ {44, token::type_int}, 26},
	{ {45, token::op_plus}, -43},
	{ {45, token::op_minus}, -43},
	{ {45, token::op_mult}, -43},
	{ {45, token::op_div}, -43},
	{ {45, token::op_idiv}, -43},
	{ {45, token::op_mod}, -43},
	{ {45, token::op_pow}, -43},
	{ {45, token::cop_lt}, -43},
	{ {45, token::cop_lte}, -43},
	{ {45, token::cop_gt}, -43},
	{ {45, token::cop_gte}, -43},
	{ {45, token::cop_equals}, -43},
	{ {45, token::logical_not}, -43},
	{ {45, token::logical_and}, -43},
	{ {45, token::logical_or}, -43},
	{ {45, token::close_paren}, -43},
	{ {45, token::close_curly}, -43},
	{ {45, token::colon}, -43},
	{ {45, token::newline}, -43},
	{ {45, token::eof}, -43},
	{ {46, token::op_plus}, -40},
	{ {46, token::op_minus}, -40},
	{ {46, token::op_mult}, -40},
	{ {46, token::op_div}, -40},
	{ {46, token::op_idiv}, -40},
	{ {46, token::op_mod}, -40},
	{ {46, token::op_pow}, -40},
	{ {46, token::cop_lt}, -40},
	{ {46, token::cop_lte}, -40},
	{ {46, token::cop_gt}, -40},
	{ {46, token::cop_gte}, -40},
	{ {46, token::cop_equals}, -40},
	{ {46, token::logical_not}, -40},
	{ {46, token::logical_and}, -40},
	{ {46, token::logical_or}, -40},
	{ {46, token::close_paren}, -40},
	{ {46, token::close_curly}, -40},
	{ {46, token::colon}, -40},
	{ {46, token::newline}, -40},
	{ {46, token::eof}, -40},
	{ {47, token::op_plus}, -42},
	{ {47, token::op_minus}, -42},
	{ {47, token::op_mult}, -42},
	{ {47, token::op_div}, -42},
	{ {47, token::op_idiv}, -42},
	{ {47, token::op_mod}, -42},
	{ {47, token::op_pow}, -42},
	{ {47, token::cop_lt}, -42},
	{ {47, token::cop_lte}, -42},
	{ {47, token::cop_gt}, -42},
	{ {47, token::cop_gte}, -42},
	{ {47, token::cop_equals}, -42},
	{ {47, token::logical_not}, -42},
	{ {47, token::logical_and}, -42},
	{ {47, token::logical_or}, -42},
	{ {47, token::close_paren}, -42},
	{ {47, token::close_curly}, -42},
	{ {47, token::colon}, -42},
	{ {47, token::newline}, -42},
	{ {47, token::eof}, -42},
	{ {48, token::op_minus}, 67},
	{ {48, token::logical_not}, 68},
	{ {48, token::open_paren}, 69},
	{ {48, token::identifier}, 70},
	{ {48, token::type_string}, 71},
	{ {48, token::type_double}, 72},
	{ {48, token::type_int}, 73},
	{ {49, token::colon}, 97},
	{ {50, token::colon}, 98},
	{ {51, token::op_plus}, 99},
	{ {51, token::op_minus}, 100},
	{ {51, token::close_paren}, -23},
	{ {51, token::close_curly}, -23},
	{ {51, token::colon}, -23},
	{ {51, token::newline}, -23},
	{ {51, token::eof}, -23},
	{ {52, token::op_plus}, -29},
	{ {52, token::op_minus}, -29},
	{ {52, token::op_mult}, 101},
	{ {52, token::op_div}, 102},
	{ {52, token::op_idiv}, 103},
	{ {52, token::op_mod}, 104},
	{ {52, token::op_pow}, 105},
	{ {52, token::close_paren}, -29},
	{ {52, token::close_curly}, -29},
	{ {52, token::colon}, -29},
	{ {52, token::newline}, -29},
	{ {52, token::eof}, -29},
	{ {53, token::op_plus}, -38},
	{ {53, token::op_minus}, -38},
	{ {53, token::op_mult}, -38},
	{ {53, token::op_div}, -38},
	{ {53, token::op_idiv}, -38},
	{ {53, token::op_mod}, -38},
	{ {53, token::op_pow}, -38},
	{ {53, token::cop_lt}, 106},
	{ {53, token::cop_lte}, 107},
	{ {53, token::cop_gt}, 108},
	{ {53, token::cop_gte}, 109},
	{ {53, token::cop_equals}, 110},
	{ {53, token::logical_not}, 111},
	{ {53, token::logical_and}, 112},
	{ {53, token::logical_or}, 113},
	{ {53, token::close_paren}, -38},
	{ {53, token::close_curly}, -38},
	{ {53, token::colon}, -38},
	{ {53, token::newline}, -38},
	{ {53, token::eof}, -38},
	{ {54, token::op_plus}, -41},
	{ {54, token::op_minus}, -41},
	{ {54, token::op_mult}, -41},
	{ {54, token::op_div}, -41},
	{ {54, token::op_idiv}, -41},
	{ {54, token::op_mod}, -41},
	{ {54, token::op_pow}, -41},
	{ {54, token::cop_lt}, -41},
	{ {54, token::cop_lte}, -41},
	{ {54, token::cop_gt}, -41},
	{ {54, token::cop_gte}, -41},
	{ {54, token::cop_equals}, -41},
	{ {54, token::logical_not}, -41},
	{ {54, token::logical_and}, -41},
	{ {54, token::logical_or}, -41},
	{ {54, token::close_paren}, -41},
	{ {54, token::close_curly}, -41},
	{ {54, token::colon}, -41},
	{ {54, token::newline}, -41},
	{ {54, token::eof}, -41},
	{ {55, token::op_minus}, 55},
	{ {55, token::logical_not}, 56},
	{ {55, token::open_paren}, 57},
	{ {55, token::identifier}, 58},
	{ {55, token::type_string}, 59},
	{ {55, token::type_double}, 60},
	{ {55, token::type_int}, 61},
	{ {56, token::op_minus}, 55},
	{ {56, token::logical_not}, 56},
	{ {56, token::open_paren}, 57},
	{ {56, token::identifier}, 58},
	{ {56, token::type_string}, 59},
	{ {56, token::type_double}, 60},
	{ {56, token::type_int}, 61},
	{ {57, token::op_minus}, 67},
	{ {57, token::logical_not}, 68},
	{ {57, token::open_paren}, 69},
	{ {57, token::identifier}, 70},
	{ {57, token::type_string}, 71},
	{ {57, token::type_double}, 72},
	{ {57, token::type_int}, 73},
	{ {58, token::op_plus}, -40},
	{ {58, token::op_minus}, -40},
	{ {58, token::op_mult}, -40},
	{ {58, token::op_div}, -40},
	{ {58, token::op_idiv}, -40},
	{ {58, token::op_mod}, -40},
	{ {58, token::op_pow}, -40},
	{ {58, token::cop_lt}, -40},
	{ {58, token::cop_lte}, -40},
	{ {58, token::cop_gt}, -40},
	{ {58, token::cop_gte}, -40},
	{ {58, token::cop_equals}, -40},
	{ {58, token::logical_not}, -40},
	{ {58, token::logical_and}, -40},
	{ {58, token::logical_or}, -40},
	{ {58, token::close_paren}, -40},
	{ {58, token::close_curly}, -40},
	{ {58, token::colon}, -40},
	{ {58, token::newline}, -40},
	{ {58, token::eof}, -40},
	{ {59, token::op_plus}, -46},
	{ {59, token::op_minus}, -46},
	{ {59, token::op_mult}, -46},
	{ {59, token::op_div}, -46},
	{ {59, token::op_idiv}, -46},
	{ {59, token::op_mod}, -46},
	{ {59, token::op_pow}, -46},
	{ {59, token::cop_lt}, -46},
	{ {59, token::cop_lte}, -46},
	{ {59, token::cop_gt}, -46},
	{ {59, token::cop_gte}, -46},
	{ {59, token::cop_equals}, -46},
	{ {59, token::logical_not}, -46},
	{ {59, token::logical_and}, -46},
	{ {59, token::logical_or}, -46},
	{ {59, token::close_paren}, -46},
	{ {59, token::close_curly}, -46},
	{ {59, token::colon}, -46},
	{ {59, token::newline}, -46},
	{ {59, token::eof}, -46},
	{ {60, token::op_plus}, -44},
	{ {60, token::op_minus}, -44},
	{ {60, token::op_mult}, -44},
	{ {60, token::op_div}, -44},
	{ {60, token::op_idiv}, -44},
	{ {60, token::op_mod}, -44},
	{ {60, token::op_pow}, -44},
	{ {60, token::cop_lt}, -44},
	{ {60, token::cop_lte}, -44},
	{ {60, token::cop_gt}, -44},
	{ {60, token::cop_gte}, -44},
	{ {60, token::cop_equals}, -44},
	{ {60, token::logical_not}, -44},
	{ {60, token::logical_and}, -44},
	{ {60, token::logical_or}, -44},
	{ {60, token::close_paren}, -44},
	{ {60, token::close_curly}, -44},
	{ {60, token::colon}, -44},
	{ {60, token::newline}, -44},
	{ {60, token::eof}, -44},
	{ {61, token::op_plus}, -45},
	{ {61, token::op_minus}, -45},
	{ {61, token::op_mult}, -45},
	{ {61, token::op_div}, -45},
	{ {61, token::op_idiv}, -45},
	{ {61, token::op_mod}, -45},
	{ {61, token::op_pow}, -45},
	{ {61, token::cop_lt}, -45},
	{ {61, token::cop_lte}, -45},
	{ {61, token::cop_gt}, -45},
	{ {61, token::cop_gte}, -45},
	{ {61, token::cop_equals}, -45},
	{ {61, token::logical_not}, -45},
	{ {61, token::logical_and}, -45},
	{ {61, token::logical_or}, -45},
	{ {61, token::close_paren}, -45},
	{ {61, token::close_curly}, -45},
	{ {61, token::colon}, -45},
	{ {61, token::newline}, -45},
	{ {61, token::eof}, -45},
	{ {62, token::close_paren}, 117},
	{ {63, token::op_plus}, 118},
	{ {63, token::op_minus}, 119},
	{ {63, token::close_paren}, -23},
	{ {63, token::close_curly}, -23},
	{ {63, token::colon}, -23},
	{ {63, token::newline}, -23},
	{ {63, token::eof}, -23},
	{ {64, token::op_plus}, -29},
	{ {64, token::op_minus}, -29},
	{ {64, token::op_mult}, 120},
	{ {64, token::op_div}, 121},
	{ {64, token::op_idiv}, 122},
	{ {64, token::op_mod}, 123},
	{ {64, token::op_pow}, 124},
	{ {64, token::close_paren}, -29},
	{ {64, token::close_curly}, -29},
	{ {64, token::colon}, -29},
	{ {64, token::newline}, -29},
	{ {64, token::eof}, -29},
	{ {65, token::op_plus}, -38},
	{ {65, token::op_minus}, -38},
	{ {65, token::op_mult}, -38},
	{ {65, token::op_div}, -38},
	{ {65, token::op_idiv}, -38},
	{ {65, token::op_mod}, -38},
	{ {65, token::op_pow}, -38},
	{ {65, token::cop_lt}, 125},
	{ {65, token::cop_lte}, 126},
	{ {65, token::cop_gt}, 127},
	{ {65, token::cop_gte}, 128},
	{ {65, token::cop_equals}, 129},
	{ {65, token::logical_not}, 130},
	{ {65, token::logical_and}, 131},
	{ {65, token::logical_or}, 132},
	{ {65, token::close_paren}, -38},
	{ {65, token::close_curly}, -38},
	{ {65, token::colon}, -38},
	{ {65, token::newline}, -38},
	{ {65, token::eof}, -38},
	{ {66, token::op_plus}, -41},
	{ {66, token::op_minus}, -41},
	{ {66, token::op_mult}, -41},
	{ {66, token::op_div}, -41},
	{ {66, token::op_idiv}, -41},
	{ {66, token::op_mod}, -41},
	{ {66, token::op_pow}, -41},
	{ {66, token::cop_lt}, -41},
	{ {66, token::cop_lte}, -41},
	{ {66, token::cop_gt}, -41},
	{ {66, token::cop_gte}, -41},
	{ {66, token::cop_equals}, -41},
	{ {66, token::logical_not}, -41},
	{ {66, token::logical_and}, -41},
	{ {66, token::logical_or}, -41},
	{ {66, token::close_paren}, -41},
	{ {66, token::close_curly}, -41},
	{ {66, token::colon}, -41},
	{ {66, token::newline}, -41},
	{ {66, token::eof}, -41},
	{ {67, token::op_minus}, 67},
	{ {67, token::logical_not}, 68},
	{ {67, token::open_paren}, 69},
	{ {67, token::identifier}, 70},
	{ {67, token::type_string}, 71},
	{ {67, token::type_double}, 72},
	{ {67, token::type_int}, 73},
	{ {68, token::op_minus}, 67},
	{ {68, token::logical_not}, 68},
	{ {68, token::open_paren}, 69},
	{ {68, token::identifier}, 70},
	{ {68, token::type_string}, 71},
	{ {68, token::type_double}, 72},
	{ {68, token::type_int}, 73},
	{ {69, token::op_minus}, 67},
	{ {69, token::logical_not}, 68},
	{ {69, token::open_paren}, 69},
	{ {69, token::identifier}, 70},
	{ {69, token::type_string}, 71},
	{ {69, token::type_double}, 72},
	{ {69, token::type_int}, 73},
	{ {70, token::op_plus}, -40},
	{ {70, token::op_minus}, -40},
	{ {70, token::op_mult}, -40},
	{ {70, token::op_div}, -40},
	{ {70, token::op_idiv}, -40},
	{ {70, token::op_mod}, -40},
	{ {70, token::op_pow}, -40},
	{ {70, token::cop_lt}, -40},
	{ {70, token::cop_lte}, -40},
	{ {70, token::cop_gt}, -40},
	{ {70, token::cop_gte}, -40},
	{ {70, token::cop_equals}, -40},
	{ {70, token::logical_not}, -40},
	{ {70, token::logical_and}, -40},
	{ {70, token::logical_or}, -40},
	{ {70, token::close_paren}, -40},
	{ {70, token::close_curly}, -40},
	{ {70, token::colon}, -40},
	{ {70, token::newline}, -40},
	{ {70, token::eof}, -40},
	{ {71, token::op_plus}, -46},
	{ {71, token::op_minus}, -46},
	{ {71, token::op_mult}, -46},
	{ {71, token::op_div}, -46},
	{ {71, token::op_idiv}, -46},
	{ {71, token::op_mod}, -46},
	{ {71, token::op_pow}, -46},
	{ {71, token::cop_lt}, -46},
	{ {71, token::cop_lte}, -46},
	{ {71, token::cop_gt}, -46},
	{ {71, token::cop_gte}, -46},
	{ {71, token::cop_equals}, -46},
	{ {71, token::logical_not}, -46},
	{ {71, token::logical_and}, -46},
	{ {71, token::logical_or}, -46},
	{ {71, token::close_paren}, -46},
	{ {71, token::close_curly}, -46},
	{ {71, token::colon}, -46},
	{ {71, token::newline}, -46},
	{ {71, token::eof}, -46},
	{ {72, token::op_plus}, -44},
	{ {72, token::op_minus}, -44},
	{ {72, token::op_mult}, -44},
	{ {72, token::op_div}, -44},
	{ {72, token::op_idiv}, -44},
	{ {72, token::op_mod}, -44},
	{ {72, token::op_pow}, -44},
	{ {72, token::cop_lt}, -44},
	{ {72, token::cop_lte}, -44},
	{ {72, token::cop_gt}, -44},
	{ {72, token::cop_gte}, -44},
	{ {72, token::cop_equals}, -44},
	{ {72, token::logical_not}, -44},
	{ {72, token::logical_and}, -44},
	{ {72, token::logical_or}, -44},
	{ {72, token::close_paren}, -44},
	{ {72, token::close_curly}, -44},
	{ {72, token::colon}, -44},
	{ {72, token::newline}, -44},
	{ {72, token::eof}, -44},
	{ {73, token::op_plus}, -45},
	{ {73, token::op_minus}, -45},
	{ {73, token::op_mult}, -45},
	{ {73, token::op_div}, -45},
	{ {73, token::op_idiv}, -45},
	{ {73, token::op_mod}, -45},
	{ {73, token::op_pow}, -45},
	{ {73, token::cop_lt}, -45},
	{ {73, token::cop_lte}, -45},
	{ {73, token::cop_gt}, -45},
	{ {73, token::cop_gte}, -45},
	{ {73, token::cop_equals}, -45},
	{ {73, token::logical_not}, -45},
	{ {73, token::logical_and}, -45},
	{ {73, token::logical_or}, -45},
	{ {73, token::close_paren}, -45},
	{ {73, token::close_curly}, -45},
	{ {73, token::colon}, -45},
	{ {73, token::newline}, -45},
	{ {73, token::eof}, -45},
	{ {74, token::op_minus}, -4},
	{ {74, token::logical_not}, -4},
	{ {74, token::kw_print}, -4},
	{ {74, token::kw_for}, -4},
	{ {74, token::kw_while}, -4},
	{ {74, token::open_paren}, -4},
	{ {74, token::close_curly}, -4},
	{ {74, token::identifier}, -4},
	{ {74, token::type_string}, -4},
	{ {74, token::type_double}, -4},
	{ {74, token::type_int}, -4},
	{ {74, token::eof}, -4},
	{ {75, token::op_minus}, -5},
	{ {75, token::logical_not}, -5},
	{ {75, token::kw_print}, -5},
	{ {75, token::kw_for}, -5},
	{ {75, token::kw_while}, -5},
	{ {75, token::open_paren}, -5},
	{ {75, token::close_curly}, -5},
	{ {75, token::newline}, 75},
	{ {75, token::identifier}, -5},
	{ {75, token::type_string}, -5},
	{ {75, token::type_double}, -5},
	{ {75, token::type_int}, -5},
	{ {75, token::eof}, -5},
	{ {76, token::op_minus}, 16},
	{ {76, token::logical_not}, 17},
	{ {76, token::open_paren}, 21},
	{ {76, token::identifier}, 46},
	{ {76, token::type_string}, 24},
	{ {76, token::type_double}, 25},
	{ {76, token::type_int}, 26},
	{ {77, token::close_curly}, -6},
	{ {77, token::eof}, -6},
	{ {78, token::op_minus}, -4},
	{ {78, token::logical_not}, -4},
	{ {78, token::kw_print}, -4},
	{ {78, token::kw_for}, -4},
	{ {78, token::kw_while}, -4},
	{ {78, token::open_paren}, -4},
	{ {78, token::close_curly}, -4},
	{ {78, token::identifier}, -4},
	{ {78, token::type_string}, -4},
	{ {78, token::type_double}, -4},
	{ {78, token::type_int}, -4},
	{ {78, token::eof}, -4},
	{ {79, token::op_minus}, -5},
	{ {79, token::logical_not}, -5},
	{ {79, token::kw_print}, -5},
	{ {79, token::kw_for}, -5},
	{ {79, token::kw_while}, -5},
	{ {79, token::open_paren}, -5},
	{ {79, token::close_curly}, -5},
	{ {79, token::newline}, 79},
	{ {79, token::identifier}, -5},
	{ {79, token::type_string}, -5},
	{ {79, token::type_double}, -5},
	{ {79, token::type_int}, -5},
	{ {79, token::eof}, -5},
	{ {80, token::close_paren}, -21},
	{ {80, token::close_curly}, -21},
	{ {80, token::colon}, -21},
	{ {80, token::newline}, -21},
	{ {80, token::eof}, -21},
	{ {81, token::close_paren}, -22},
	{ {81, token::close_curly}, -22},
	{ {81, token::colon}, -22},
	{ {81, token::newline}, -22},
	{ {81, token::eof}, -22},
	{ {82, token::op_plus}, -24},
	{ {82, token::op_minus}, -24},
	{ {82, token::close_paren}, -24},
	{ {82, token::close_curly}, -24},
	{ {82, token::colon}, -24},
	{ {82, token::newline}, -24},
	{ {82, token::eof}, -24},
	{ {83, token::op_plus}, -25},
	{ {83, token::op_minus}, -25},
	{ {83, token::close_paren}, -25},
	{ {83, token::close_curly}, -25},
	{ {83, token::colon}, -25},
	{ {83, token::newline}, -25},
	{ {83, token::eof}, -25},
	{ {84, token::op_plus}, -26},
	{ {84, token::op_minus}, -26},
	{ {84, token::close_paren}, -26},
	{ {84, token::close_curly}, -26},
	{ {84, token::colon}, -26},
	{ {84, token::newline}, -26},
	{ {84, token::eof}, -26},
	{ {85, token::op_plus}, -27},
	{ {85, token::op_minus}, -27},
	{ {85, token::close_paren}, -27},
	{ {85, token::close_curly}, -27},
	{ {85, token::colon}, -27},
	{ {85, token::newline}, -27},
	{ {85, token::eof}, -27},
	{ {86, token::op_plus}, -28},
	{ {86, token::op_minus}, -28},
	{ {86, token::close_paren}, -28},
	{ {86, token::close_curly}, -28},
	{ {86, token::colon}, -28},
	{ {86, token::newline}, -28},
	{ {86, token::eof}, -28},
	{ {87, token::op_plus}, -31},
	{ {87, token::op_minus}, -31},
	{ {87, token::op_mult}, -31},
	{ {87, token::op_div}, -31},
	{ {87, token::op_idiv}, -31},
	{ {87, token::op_mod}, -31},
	{ {87, token::op_pow}, -31},
	{ {87, token::close_paren}, -31},
	{ {87, token::close_curly}, -31},
	{ {87, token::colon}, -31},
	{ {87, token::newline}, -31},
	{ {87, token::eof}, -31},
	{ {88, token::op_plus}, -32},
	{ {88, token::op_minus}, -32},
	{ {88, token::op_mult}, -32},
	{ {88, token::op_div}, -32},
	{ {88, token::op_idiv}, -32},
	{ {88, token::op_mod}, -32},
	{ {88, token::op_pow}, -32},
	{ {88, token::close_paren}, -32},
	{ {88, token::close_curly}, -32},
	{ {88, token::colon}, -32},
	{ {88, token::newline}, -32},
	{ {88, token::eof}, -32},
	{ {89, token::op_plus}, -33},
	{ {89, token::op_minus}, -33},
	{ {89, token::op_mult}, -33},
	{ {89, token::op_div}, -33},
	{ {89, token::op_idiv}, -33},
	{ {89, token::op_mod}, -33},
	{ {89, token::op_pow}, -33},
	{ {89, token::close_paren}, -33},
	{ {89, token::close_curly}, -33},
	{ {89, token::colon}, -33},
	{ {89, token::newline}, -33},
	{ {89, token::eof}, -33},
	{ {90, token::op_plus}, -34},
	{ {90, token::op_minus}, -34},
	{ {90, token::op_mult}, -34},
	{ {90, token::op_div}, -34},
	{ {90, token::op_idiv}, -34},
	{ {90, token::op_mod}, -34},
	{ {90, token::op_pow}, -34},
	{ {90, token::close_paren}, -34},
	{ {90, token::close_curly}, -34},
	{ {90, token::colon}, -34},
	{ {90, token::newline}, -34},
	{ {90, token::eof}, -34},
	{ {91, token::op_plus}, -30},
	{ {91, token::op_minus}, -30},
	{ {91, token::op_mult}, -30},
	{ {91, token::op_div}, -30},
	{ {91, token::op_idiv}, -30},
	{ {91, token::op_mod}, -30},
	{ {91, token::op_pow}, -30},
	{ {91, token::close_paren}, -30},
	{ {91, token::close_curly}, -30},
	{ {91, token::colon}, -30},
	{ {91, token::newline}, -30},
	{ {91, token::eof}, -30},
	{ {92, token::op_minus}, 16},
	{ {92, token::logical_not}, 17},
	{ {92, token::open_paren}, 21},
	{ {92, token::identifier}, 46},
	{ {92, token::type_string}, 24},
	{ {92, token::type_double}, 25},
	{ {92, token::type_int}, 26},
	{ {93, token::op_plus}, -35},
	{ {93, token::op_minus}, -35},
	{ {93, token::op_mult}, -35},
	{ {93, token::op_div}, -35},
	{ {93, token::op_idiv}, -35},
	{ {93, token::op_mod}, -35},
	{ {93, token::op_pow}, -35},
	{ {93, token::close_paren}, -35},
	{ {93, token::close_curly}, -35},
	{ {93, token::colon}, -35},
	{ {93, token::newline}, -35},
	{ {93, token::eof}, -35},
	{ {94, token::op_plus}, -36},
	{ {94, token::op_minus}, -36},
	{ {94, token::op_mult}, -36},
	{ {94, token::op_div}, -36},
	{ {94, token::op_idiv}, -36},
	{ {94, token::op_mod}, -36},
	{ {94, token::op_pow}, -36},
	{ {94, token::close_paren}, -36},
	{ {94, token::close_curly}, -36},
	{ {94, token::colon}, -36},
	{ {94, token::newline}, -36},
	{ {94, token::eof}, -36},
	{ {95, token::close_paren}, 138},
	{ {96, token::close_paren}, -11},
	{ {96, token::close_curly}, -11},
	{ {96, token::newline}, -11},
	{ {96, token::eof}, -11},
	{ {97, token::type_int}, 139},
	{ {98, token::open_curly}, 140},
	{ {99, token::op_minus}, 55},
	{ {99, token::logical_not}, 56},
	{ {99, token::open_paren}, 57},
	{ {99, token::identifier}, 58},
	{ {99, token::type_string}, 59},
	{ {99, token::type_double}, 60},
	{ {99, token::type_int}, 61},
	{ {100, token::op_minus}, 55},
	{ {100, token::logical_not}, 56},
	{ {100, token::open_paren}, 57},
	{ {100, token::identifier}, 58},
	{ {100, token::type_string}, 59},
	{ {100, token::type_double}, 60},
	{ {100, token::type_int}, 61},
	{ {101, token::op_minus}, 55},
	{ {101, token::logical_not}, 56},
	{ {101, token::open_paren}, 57},
	{ {101, token::identifier}, 58},
	{ {101, token::type_string}, 59},
	{ {101, token::type_double}, 60},
	{ {101, token::type_int}, 61},
	{ {102, token::op_minus}, 55},
	{ {102, token::logical_not}, 56},
	{ {102, token::open_paren}, 57},
	{ {102, token::identifier}, 58},
	{ {102, token::type_string}, 59},
	{ {102, token::type_double}, 60},
	{ {102, token::type_int}, 61},
	{ {103, token::op_minus}, 55},
	{ {103, token::logical_not}, 56},
	{ {103, token::open_paren}, 57},
	{ {103, token::identifier}, 58},
	{ {103, token::type_string}, 59},
	{ {103, token::type_double}, 60},
	{ {103, token::type_int}, 61},
	{ {104, token::op_minus}, 55},
	{ {104, token::logical_not}, 56},
	{ {104, token::open_paren}, 57},
	{ {104, token::identifier}, 58},
	{ {104, token::type_string}, 59},
	{ {104, token::type_double}, 60},
	{ {104, token::type_int}, 61},
	{ {105, token::op_minus}, 55},
	{ {105, token::logical_not}, 56},
	{ {105, token::open_paren}, 57},
	{ {105, token::identifier}, 58},
	{ {105, token::type_string}, 59},
	{ {105, token::type_double}, 60},
	{ {105, token::type_int}, 61},
	{ {106, token::op_minus}, 55},
	{ {106, token::logical_not}, 56},
	{ {106, token::open_paren}, 57},
	{ {106, token::identifier}, 58},
	{ {106, token::type_string}, 59},
	{ {106, token::type_double}, 60},
	{ {106, token::type_int}, 61},
	{ {107, token::op_minus}, 55},
	{ {107, token::logical_not}, 56},
	{ {107, token::open_paren}, 57},
	{ {107, token::identifier}, 58},
	{ {107, token::type_string}, 59},
	{ {107, token::type_double}, 60},
	{ {107, token::type_int}, 61},
	{ {108, token::op_minus}, 55},
	{ {108, token::logical_not}, 56},
	{ {108, token::open_paren}, 57},
	{ {108, token::identifier}, 58},
	{ {108, token::type_string}, 59},
	{ {108, token::type_double}, 60},
	{ {108, token::type_int}, 61},
	{ {109, token::op_minus}, 55},
	{ {109, token::logical_not}, 56},
	{ {109, token::open_paren}, 57},
	{ {109, token::identifier}, 58},
	{ {109, token::type_string}, 59},
	{ {109, token::type_double}, 60},
	{ {109, token::type_int}, 61},
	{ {110, token::op_minus}, 55},
	{ {110, token::logical_not}, 56},
	{ {110, token::open_paren}, 57},
	{ {110, token::identifier}, 58},
	{ {110, token::type_string}, 59},
	{ {110, token::type_double}, 60},
	{ {110, token::type_int}, 61},
	{ {111, token::op_equals}, 153},
	{ {112, token::op_minus}, 55},
	{ {112, token::logical_not}, 56},
	{ {112, token::open_paren}, 57},
	{ {112, token::identifier}, 58},
	{ {112, token::type_string}, 59},
	{ {112, token::type_double}, 60},
	{ {112, token::type_int}, 61},
	{ {113, token::op_minus}, 55},
	{ {113, token::logical_not}, 56},
	{ {113, token::open_paren}, 57},
	{ {113, token::identifier}, 58},
	{ {113, token::type_string}, 59},
	{ {113, token::type_double}, 60},
	{ {113, token::type_int}, 61},
	{ {114, token::op_plus}, -43},
	{ {114, token::op_minus}, -43},
	{ {114, token::op_mult}, -43},
	{ {114, token::op_div}, -43},
	{ {114, token::op_idiv}, -43},
	{ {114, token::op_mod}, -43},
	{ {114, token::op_pow}, -43},
	{ {114, token::cop_lt}, -43},
	{ {114, token::cop_lte}, -43},
	{ {114, token::cop_gt}, -43},
	{ {114, token::cop_gte}, -43},
	{ {114, token::cop_equals}, -43},
	{ {114, token::logical_not}, -43},
	{ {114, token::logical_and}, -43},
	{ {114, token::logical_or}, -43},
	{ {114, token::close_paren}, -43},
	{ {114, token::close_curly}, -43},
	{ {114, token::colon}, -43},
	{ {114, token::newline}, -43},
	{ {114, token::eof}, -43},
	{ {115, token::op_plus}, -42},
	{ {115, token::op_minus}, -42},
	{ {115, token::op_mult}, -42},
	{ {115, token::op_div}, -42},
	{ {115, token::op_idiv}, -42},
	{ {115, token::op_mod}, -42},
	{ {115, token::op_pow}, -42},
	{ {115, token::cop_lt}, -42},
	{ {115, token::cop_lte}, -42},
	{ {115, token::cop_gt}, -42},
	{ {115, token::cop_gte}, -42},
	{ {115, token::cop_equals}, -42},
	{ {115, token::logical_not}, -42},
	{ {115, token::logical_and}, -42},
	{ {115, token::logical_or}, -42},
	{ {115, token::close_paren}, -42},
	{ {115, token::close_curly}, -42},
	{ {115, token::colon}, -42},
	{ {115, token::newline}, -42},
	{ {115, token::eof}, -42},
	{ {116, token::close_paren}, 156},
	{ {117, token::op_plus}, -39},
	{ {117, token::op_minus}, -39},
	{ {117, token::op_mult}, -39},
	{ {117, token::op_div}, -39},
	{ {117, token::op_idiv}, -39},
	{ {117, token::op_mod}, -39},
	{ {117, token::op_pow}, -39},
	{ {117, token::cop_lt}, -39},
	{ {117, token::cop_lte}, -39},
	{ {117, token::cop_gt}, -39},
	{ {117, token::cop_gte}, -39},
	{ {117, token::cop_equals}, -39},
	{ {117, token::logical_not}, -39},
	{ {117, token::logical_and}, -39},
	{ {117, token::logical_or}, -39},
	{ {117, token::close_paren}, -39},
	{ {117, token::close_curly}, -39},
	{ {117, token::colon}, -39},
	{ {117, token::newline}, -39},
	{ {117, token::eof}, -39},
	{ {118, token::op_minus}, 67},
	{ {118, token::logical_not}, 68},
	{ {118, token::open_paren}, 69},
	{ {118, token::identifier}, 70},
	{ {118, token::type_string}, 71},
	{ {118, token::type_double}, 72},
	{ {118, token::type_int}, 73},
	{ {119, token::op_minus}, 67},
	{ {119, token::logical_not}, 68},
	{ {119, token::open_paren}, 69},
	{ {119, token::identifier}, 70},
	{ {119, token::type_string}, 71},
	{ {119, token::type_double}, 72},
	{ {119, token::type_int}, 73},
	{ {120, token::op_minus}, 67},
	{ {120, token::logical_not}, 68},
	{ {120, token::open_paren}, 69},
	{ {120, token::identifier}, 70},
	{ {120, token::type_string}, 71},
	{ {120, token::type_double}, 72},
	{ {120, token::type_int}, 73},
	{ {121, token::op_minus}, 67},
	{ {121, token::logical_not}, 68},
	{ {121, token::open_paren}, 69},
	{ {121, token::identifier}, 70},
	{ {121, token::type_string}, 71},
	{ {121, token::type_double}, 72},
	{ {121, token::type_int}, 73},
	{ {122, token::op_minus}, 67},
	{ {122, token::logical_not}, 68},
	{ {122, token::open_paren}, 69},
	{ {122, token::identifier}, 70},
	{ {122, token::type_string}, 71},
	{ {122, token::type_double}, 72},
	{ {122, token::type_int}, 73},
	{ {123, token::op_minus}, 67},
	{ {123, token::logical_not}, 68},
	{ {123, token::open_paren}, 69},
	{ {123, token::identifier}, 70},
	{ {123, token::type_string}, 71},
	{ {123, token::type_double}, 72},
	{ {123, token::type_int}, 73},
	{ {124, token::op_minus}, 67},
	{ {124, token::logical_not}, 68},
	{ {124, token::open_paren}, 69},
	{ {124, token::identifier}, 70},
	{ {124, token::type_string}, 71},
	{ {124, token::type_double}, 72},
	{ {124, token::type_int}, 73},
	{ {125, token::op_minus}, 67},
	{ {125, token::logical_not}, 68},
	{ {125, token::open_paren}, 69},
	{ {125, token::identifier}, 70},
	{ {125, token::type_string}, 71},
	{ {125, token::type_double}, 72},
	{ {125, token::type_int}, 73},
	{ {126, token::op_minus}, 67},
	{ {126, token::logical_not}, 68},
	{ {126, token::open_paren}, 69},
	{ {126, token::identifier}, 70},
	{ {126, token::type_string}, 71},
	{ {126, token::type_double}, 72},
	{ {126, token::type_int}, 73},
	{ {127, token::op_minus}, 67},
	{ {127, token::logical_not}, 68},
	{ {127, token::open_paren}, 69},
	{ {127, token::identifier}, 70},
	{ {127, token::type_string}, 71},
	{ {127, token::type_double}, 72},
	{ {127, token::type_int}, 73},
	{ {128, token::op_minus}, 67},
	{ {128, token::logical_not}, 68},
	{ {128, token::open_paren}, 69},
	{ {128, token::identifier}, 70},
	{ {128, token::type_string}, 71},
	{ {128, token::type_double}, 72},
	{ {128, token::type_int}, 73},
	{ {129, token::op_minus}, 67},
	{ {129, token::logical_not}, 68},
	{ {129, token::open_paren}, 69},
	{ {129, token::identifier}, 70},
	{ {129, token::type_string}, 71},
	{ {129, token::type_double}, 72},
	{ {129, token::type_int}, 73},
	{ {130, token::op_equals}, 169},
	{ {131, token::op_minus}, 67},
	{ {131, token::logical_not}, 68},
	{ {131, token::open_paren}, 69},
	{ {131, token::identifier}, 70},
	{ {131, token::type_string}, 71},
	{ {131, token::type_double}, 72},
	{ {131, token::type_int}, 73},
	{ {132, token::op_minus}, 67},
	{ {132, token::logical_not}, 68},
	{ {132, token::open_paren}, 69},
	{ {132, token::identifier}, 70},
	{ {132, token::type_string}, 71},
	{ {132, token::type_double}, 72},
	{ {132, token::type_int}, 73},
	{ {133, token::op_plus}, -43},
	{ {133, token::op_minus}, -43},
	{ {133, token::op_mult}, -43},
	{ {133, token::op_div}, -43},
	{ {133, token::op_idiv}, -43},
	{ {133, token::op_mod}, -43},
	{ {133, token::op_pow}, -43},
	{ {133, token::cop_lt}, -43},
	{ {133, token::cop_lte}, -43},
	{ {133, token::cop_gt}, -43},
	{ {133, token::cop_gte}, -43},
	{ {133, token::cop_equals}, -43},
	{ {133, token::logical_not}, -43},
	{ {133, token::logical_and}, -43},
	{ {133, token::logical_or}, -43},
	{ {133, token::close_paren}, -43},
	{ {133, token::close_curly}, -43},
	{ {133, token::colon}, -43},
	{ {133, token::newline}, -43},
	{ {133, token::eof}, -43},
	{ {134, token::op_plus}, -42},
	{ {134, token::op_minus}, -42},
	{ {134, token::op_mult}, -42},
	{ {134, token::op_div}, -42},
	{ {134, token::op_idiv}, -42},
	{ {134, token::op_mod}, -42},
	{ {134, token::op_pow}, -42},
	{ {134, token::cop_lt}, -42},
	{ {134, token::cop_lte}, -42},
	{ {134, token::cop_gt}, -42},
	{ {134, token::cop_gte}, -42},
	{ {134, token::cop_equals}, -42},
	{ {134, token::logical_not}, -42},
	{ {134, token::logical_and}, -42},
	{ {134, token::logical_or}, -42},
	{ {134, token::close_paren}, -42},
	{ {134, token::close_curly}, -42},
	{ {134, token::colon}, -42},
	{ {134, token::newline}, -42},
	{ {134, token::eof}, -42},
	{ {135, token::close_paren}, 172},
	{ {136, token::close_curly}, -17},
	{ {136, token::newline}, -17},
	{ {136, token::eof}, -17},
	{ {137, token::op_plus}, -37},
	{ {137, token::op_minus}, -37},
	{ {137, token::op_mult}, -37},
	{ {137, token::op_div}, -37},
	{ {137, token::op_idiv}, -37},
	{ {137, token::op_mod}, -37},
	{ {137, token::op_pow}, -37},
	{ {137, token::close_paren}, -37},
	{ {137, token::close_curly}, -37},
	{ {137, token::colon}, -37},
	{ {137, token::newline}, -37},
	{ {137, token::eof}, -37},
	{ {138, token::close_curly}, -16},
	{ {138, token::newline}, -16},
	{ {138, token::eof}, -16},
	{ {139, token::open_curly}, 173},
	{ {139, token::comma}, 174},
	{ {140, token::op_minus}, 188},
	{ {140, token::logical_not}, 189},
	{ {140, token::kw_print}, 190},
	{ {140, token::kw_for}, 191},
	{ {140, token::kw_while}, 192},
	{ {140, token::open_paren}, 193},
	{ {140, token::identifier}, 194},
	{ {140, token::type_string}, 195},
	{ {140, token::type_double}, 196},
	{ {140, token::type_int}, 197},
	{ {141, token::close_paren}, -21},
	{ {141, token::close_curly}, -21},
	{ {141, token::colon}, -21},
	{ {141, token::newline}, -21},
	{ {141, token::eof}, -21},
	{ {142, token::close_paren}, -22},
	{ {142, token::close_curly}, -22},
	{ {142, token::colon}, -22},
	{ {142, token::newline}, -22},
	{ {142, token::eof}, -22},
	{ {143, token::op_plus}, -24},
	{ {143, token::op_minus}, -24},
	{ {143, token::close_paren}, -24},
	{ {143, token::close_curly}, -24},
	{ {143, token::colon}, -24},
	{ {143, token::newline}, -24},
	{ {143, token::eof}, -24},
	{ {144, token::op_plus}, -25},
	{ {144, token::op_minus}, -25},
	{ {144, token::close_paren}, -25},
	{ {144, token::close_curly}, -25},
	{ {144, token::colon}, -25},
	{ {144, token::newline}, -25},
	{ {144, token::eof}, -25},
	{ {145, token::op_plus}, -26},
	{ {145, token::op_minus}, -26},
	{ {145, token::close_paren}, -26},
	{ {145, token::close_curly}, -26},
	{ {145, token::colon}, -26},
	{ {145, token::newline}, -26},
	{ {145, token::eof}, -26},
	{ {146, token::op_plus}, -27},
	{ {146, token::op_minus}, -27},
	{ {146, token::close_paren}, -27},
	{ {146, token::close_curly}, -27},
	{ {146, token::colon}, -27},
	{ {146, token::newline}, -27},
	{ {146, token::eof}, -27},
	{ {147, token::op_plus}, -28},
	{ {147, token::op_minus}, -28},
	{ {147, token::close_paren}, -28},
	{ {147, token::close_curly}, -28},
	{ {147, token::colon}, -28},
	{ {147, token::newline}, -28},
	{ {147, token::eof}, -28},
	{ {148, token::op_plus}, -31},
	{ {148, token::op_minus}, -31},
	{ {148, token::op_mult}, -31},
	{ {148, token::op_div}, -31},
	{ {148, token::op_idiv}, -31},
	{ {148, token::op_mod}, -31},
	{ {148, token::op_pow}, -31},
	{ {148, token::close_paren}, -31},
	{ {148, token::close_curly}, -31},
	{ {148, token::colon}, -31},
	{ {148, token::newline}, -31},
	{ {148, token::eof}, -31},
	{ {149, token::op_plus}, -32},
	{ {149, token::op_minus}, -32},
	{ {149, token::op_mult}, -32},
	{ {149, token::op_div}, -32},
	{ {149, token::op_idiv}, -32},
	{ {149, token::op_mod}, -32},
	{ {149, token::op_pow}, -32},
	{ {149, token::close_paren}, -32},
	{ {149, token::close_curly}, -32},
	{ {149, token::colon}, -32},
	{ {149, token::newline}, -32},
	{ {149, token::eof}, -32},
	{ {150, token::op_plus}, -33},
	{ {150, token::op_minus}, -33},
	{ {150, token::op_mult}, -33},
	{ {150, token::op_div}, -33},
	{ {150, token::op_idiv}, -33},
	{ {150, token::op_mod}, -33},
	{ {150, token::op_pow}, -33},
	{ {150, token::close_paren}, -33},
	{ {150, token::close_curly}, -33},
	{ {150, token::colon}, -33},
	{ {150, token::newline}, -33},
	{ {150, token::eof}, -33},
	{ {151, token::op_plus}, -34},
	{ {151, token::op_minus}, -34},
	{ {151, token::op_mult}, -34},
	{ {151, token::op_div}, -34},
	{ {151, token::op_idiv}, -34},
	{ {151, token::op_mod}, -34},
	{ {151, token::op_pow}, -34},
	{ {151, token::close_paren}, -34},
	{ {151, token::close_curly}, -34},
	{ {151, token::colon}, -34},
	{ {151, token::newline}, -34},
	{ {151, token::eof}, -34},
	{ {152, token::op_plus}, -30},
	{ {152, token::op_minus}, -30},
	{ {152, token::op_mult}, -30},
	{ {152, token::op_div}, -30},
	{ {152, token::op_idiv}, -30},
	{ {152, token::op_mod}, -30},
	{ {152, token::op_pow}, -30},
	{ {152, token::close_paren}, -30},
	{ {152, token::close_curly}, -30},
	{ {152, token::colon}, -30},
	{ {152, token::newline}, -30},
	{ {152, token::eof}, -30},
	{ {153, token::op_minus}, 55},
	{ {153, token::logical_not}, 56},
	{ {153, token::open_paren}, 57},
	{ {153, token::identifier}, 58},
	{ {153, token::type_string}, 59},
	{ {153, token::type_double}, 60},
	{ {153, token::type_int}, 61},
	{ {154, token::op_plus}, -35},
	{ {154, token::op_minus}, -35},
	{ {154, token::op_mult}, -35},
	{ {154, token::op_div}, -35},
	{ {154, token::op_idiv}, -35},
	{ {154, token::op_mod}, -35},
	{ {154, token::op_pow}, -35},
	{ {154, token::close_paren}, -35},
	{ {154, token::close_curly}, -35},
	{ {154, token::colon}, -35},
	{ {154, token::newline}, -35},
	{ {154, token::eof}, -35},
	{ {155, token::op_plus}, -36},
	{ {155, token::op_minus}, -36},
	{ {155, token::op_mult}, -36},
	{ {155, token::op_div}, -36},
	{ {155, token::op_idiv}, -36},
	{ {155, token::op_mod}, -36},
	{ {155, token::op_pow}, -36},
	{ {155, token::close_paren}, -36},
	{ {155, token::close_curly}, -36},
	{ {155, token::colon}, -36},
	{ {155, token::newline}, -36},
	{ {155, token::eof}, -36},
	{ {156, token::op_plus}, -39},
	{ {156, token::op_minus}, -39},
	{ {156, token::op_mult}, -39},
	{ {156, token::op_div}, -39},
	{ {156, token::op_idiv}, -39},
	{ {156, token::op_mod}, -39},
	{ {156, token::op_pow}, -39},
	{ {156, token::cop_lt}, -39},
	{ {156, token::cop_lte}, -39},
	{ {156, token::cop_gt}, -39},
	{ {156, token::cop_gte}, -39},
	{ {156, token::cop_equals}, -39},
	{ {156, token::logical_not}, -39},
	{ {156, token::logical_and}, -39},
	{ {156, token::logical_or}, -39},
	{ {156, token::close_paren}, -39},
	{ {156, token::close_curly}, -39},
	{ {156, token::colon}, -39},
	{ {156, token::newline}, -39},
	{ {156, token::eof}, -39},
	{ {157, token::close_paren}, -21},
	{ {157, token::close_curly}, -21},
	{ {157, token::colon}, -21},
	{ {157, token::newline}, -21},
	{ {157, token::eof}, -21},
	{ {158, token::close_paren}, -22},
	{ {158, token::close_curly}, -22},
	{ {158, token::colon}, -22},
	{ {158, token::newline}, -22},
	{ {158, token::eof}, -22},
	{ {159, token::op_plus}, -24},
	{ {159, token::op_minus}, -24},
	{ {159, token::close_paren}, -24},
	{ {159, token::close_curly}, -24},
	{ {159, token::colon}, -24},
	{ {159, token::newline}, -24},
	{ {159, token::eof}, -24},
	{ {160, token::op_plus}, -25},
	{ {160, token::op_minus}, -25},
	{ {160, token::close_paren}, -25},
	{ {160, token::close_curly}, -25},
	{ {160, token::colon}, -25},
	{ {160, token::newline}, -25},
	{ {160, token::eof}, -25},
	{ {161, token::op_plus}, -26},
	{ {161, token::op_minus}, -26},
	{ {161, token::close_paren}, -26},
	{ {161, token::close_curly}, -26},
	{ {161, token::colon}, -26},
	{ {161, token::newline}, -26},
	{ {161, token::eof}, -26},
	{ {162, token::op_plus}, -27},
	{ {162, token::op_minus}, -27},
	{ {162, token::close_paren}, -27},
	{ {162, token::close_curly}, -27},
	{ {162, token::colon}, -27},
	{ {162, token::newline}, -27},
	{ {162, token::eof}, -27},
	{ {163, token::op_plus}, -28},
	{ {163, token::op_minus}, -28},
	{ {163, token::close_paren}, -28},
	{ {163, token::close_curly}, -28},
	{ {163, token::colon}, -28},
	{ {163, token::newline}, -28},
	{ {163, token::eof}, -28},
	{ {164, token::op_plus}, -31},
	{ {164, token::op_minus}, -31},
	{ {164, token::op_mult}, -31},
	{ {164, token::op_div}, -31},
	{ {164, token::op_idiv}, -31},
	{ {164, token::op_mod}, -31},
	{ {164, token::op_pow}, -31},
	{ {164, token::close_paren}, -31},
	{ {164, token::close_curly}, -31},
	{ {164, token::colon}, -31},
	{ {164, token::newline}, -31},
	{ {164, token::eof}, -31},
	{ {165, token::op_plus}, -32},
	{ {165, token::op_minus}, -32},
	{ {165, token::op_mult}, -32},
	{ {165, token::op_div}, -32},
	{ {165, token::op_idiv}, -32},
	{ {165, token::op_mod}, -32},
	{ {165, token::op_pow}, -32},
	{ {165, token::close_paren}, -32},
	{ {165, token::close_curly}, -32},
	{ {165, token::colon}, -32},
	{ {165, token::newline}, -32},
	{ {165, token::eof}, -32},
	{ {166, token::op_plus}, -33},
	{ {166, token::op_minus}, -33},
	{ {166, token::op_mult}, -33},
	{ {166, token::op_div}, -33},
	{ {166, token::op_idiv}, -33},
	{ {166, token::op_mod}, -33},
	{ {166, token::op_pow}, -33},
	{ {166, token::close_paren}, -33},
	{ {166, token::close_curly}, -33},
	{ {166, token::colon}, -33},
	{ {166, token::newline}, -33},
	{ {166, token::eof}, -33},
	{ {167, token::op_plus}, -34},
	{ {167, token::op_minus}, -34},
	{ {167, token::op_mult}, -34},
	{ {167, token::op_div}, -34},
	{ {167, token::op_idiv}, -34},
	{ {167, token::op_mod}, -34},
	{ {167, token::op_pow}, -34},
	{ {167, token::close_paren}, -34},
	{ {167, token::close_curly}, -34},
	{ {167, token::colon}, -34},
	{ {167, token::newline}, -34},
	{ {167, token::eof}, -34},
	{ {168, token::op_plus}, -30},
	{ {168, token::op_minus}, -30},
	{ {168, token::op_mult}, -30},
	{ {168, token::op_div}, -30},
	{ {168, token::op_idiv}, -30},
	{ {168, token::op_mod}, -30},
	{ {168, token::op_pow}, -30},
	{ {168, token::close_paren}, -30},
	{ {168, token::close_curly}, -30},
	{ {168, token::colon}, -30},
	{ {168, token::newline}, -30},
	{ {168, token::eof}, -30},
	{ {169, token::op_minus}, 67},
	{ {169, token::logical_not}, 68},
	{ {169, token::open_paren}, 69},
	{ {169, token::identifier}, 70},
	{ {169, token::type_string}, 71},
	{ {169, token::type_double}, 72},
	{ {169, token::type_int}, 73},
	{ {170, token::op_plus}, -35},
	{ {170, token::op_minus}, -35},
	{ {170, token::op_mult}, -35},
	{ {170, token::op_div}, -35},
	{ {170, token::op_idiv}, -35},
	{ {170, token::op_mod}, -35},
	{ {170, token::op_pow}, -35},
	{ {170, token::close_paren}, -35},
	{ {170, token::close_curly}, -35},
	{ {170, token::colon}, -35},
	{ {170, token::newline}, -35},
	{ {170, token::eof}, -35},
	{ {171, token::op_plus}, -36},
	{ {171, token::op_minus}, -36},
	{ {171, token::op_mult}, -36},
	{ {171, token::op_div}, -36},
	{ {171, token::op_idiv}, -36},
	{ {171, token::op_mod}, -36},
	{ {171, token::op_pow}, -36},
	{ {171, token::close_paren}, -36},
	{ {171, token::close_curly}, -36},
	{ {171, token::colon}, -36},
	{ {171, token::newline}, -36},
	{ {171, token::eof}, -36},
	{ {172, token::op_plus}, -39},
	{ {172, token::op_minus}, -39},
	{ {172, token::op_mult}, -39},
	{ {172, token::op_div}, -39},
	{ {172, token::op_idiv}, -39},
	{ {172, token::op_mod}, -39},
	{ {172, token::op_pow}, -39},
	{ {172, token::cop_lt}, -39},
	{ {172, token::cop_lte}, -39},
	{ {172, token::cop_gt}, -39},
	{ {172, token::cop_gte}, -39},
	{ {172, token::cop_equals}, -39},
	{ {172, token::logical_not}, -39},
	{ {172, token::logical_and}, -39},
	{ {172, token::logical_or}, -39},
	{ {172, token::close_paren}, -39},
	{ {172, token::close_curly}, -39},
	{ {172, token::colon}, -39},
	{ {172, token::newline}, -39},
	{ {172, token::eof}, -39},
	{ {173, token::op_minus}, 188},
	{ {173, token::logical_not}, 189},
	{ {173, token::kw_print}, 190},
	{ {173, token::kw_for}, 191},
	{ {173, token::kw_while}, 192},
	{ {173, token::open_paren}, 193},
	{ {173, token::newline}, 22},
	{ {173, token::identifier}, 194},
	{ {173, token::type_string}, 195},
	{ {173, token::type_double}, 196},
	{ {173, token::type_int}, 197},
	{ {174, token::type_int}, 203},
	{ {175, token::close_curly}, 204},
	{ {176, token::close_curly}, -8},
	{ {176, token::newline}, 206},
	{ {176, token::eof}, -8},
	{ {177, token::close_curly}, -9},
	{ {177, token::newline}, -9},
	{ {177, token::eof}, -9},
	{ {178, token::close_curly}, -10},
	{ {178, token::newline}, -10},
	{ {178, token::eof}, -10},
	{ {179, token::close_curly}, -12},
	{ {179, token::newline}, -12},
	{ {179, token::eof}, -12},
	{ {180, token::close_curly}, -13},
	{ {180, token::newline}, -13},
	{ {180, token::eof}, -13},
	{ {181, token::close_curly}, -14},
	{ {181, token::newline}, -14},
	{ {181, token::eof}, -14},
	{ {182, token::close_curly}, -15},
	{ {182, token::newline}, -15},
	{ {182, token::eof}, -15},
	{ {183, token::close_paren}, -11},
	{ {183, token::close_curly}, -11},
	{ {183, token::newline}, -11},
	{ {183, token::eof}, -11},
	{ {184, token::op_plus}, 207},
	{ {184, token::op_minus}, 208},
	{ {184, token::close_paren}, -23},
	{ {184, token::close_curly}, -23},
	{ {184, token::colon}, -23},
	{ {184, token::newline}, -23},
	{ {184, token::eof}, -23},
	{ {185, token::op_plus}, -29},
	{ {185, token::op_minus}, -29},
	{ {185, token::op_mult}, 209},
	{ {185, token::op_div}, 210},
	{ {185, token::op_idiv}, 211},
	{ {185, token::op_mod}, 212},
	{ {185, token::op_pow}, 213},
	{ {185, token::close_paren}, -29},
	{ {185, token::close_curly}, -29},
	{ {185, token::colon}, -29},
	{ {185, token::newline}, -29},
	{ {185, token::eof}, -29},
	{ {186, token::op_plus}, -38},
	{ {186, token::op_minus}, -38},
	{ {186, token::op_mult}, -38},
	{ {186, token::op_div}, -38},
	{ {186, token::op_idiv}, -38},
	{ {186, token::op_mod}, -38},
	{ {186, token::op_pow}, -38},
	{ {186, token::cop_lt}, 214},
	{ {186, token::cop_lte}, 215},
	{ {186, token::cop_gt}, 216},
	{ {186, token::cop_gte}, 217},
	{ {186, token::cop_equals}, 218},
	{ {186, token::logical_not}, 219},
	{ {186, token::logical_and}, 220},
	{ {186, token::logical_or}, 221},
	{ {186, token::close_paren}, -38},
	{ {186, token::close_curly}, -38},
	{ {186, token::colon}, -38},
	{ {186, token::newline}, -38},
	{ {186, token::eof}, -38},
	{ {187, token::op_plus}, -41},
	{ {187, token::op_minus}, -41},
	{ {187, token::op_mult}, -41},
	{ {187, token::op_div}, -41},
	{ {187, token::op_idiv}, -41},
	{ {187, token::op_mod}, -41},
	{ {187, token::op_pow}, -41},
	{ {187, token::cop_lt}, -41},
	{ {187, token::cop_lte}, -41},
	{ {187, token::cop_gt}, -41},
	{ {187, token::cop_gte}, -41},
	{ {187, token::cop_equals}, -41},
	{ {187, token::logical_not}, -41},
	{ {187, token::logical_and}, -41},
	{ {187, token::logical_or}, -41},
	{ {187, token::close_paren}, -41},
	{ {187, token::close_curly}, -41},
	{ {187, token::colon}, -41},
	{ {187, token::newline}, -41},
	{ {187, token::eof}, -41},
	{ {188, token::op_minus}, 188},
	{ {188, token::logical_not}, 189},
	{ {188, token::open_paren}, 193},
	{ {188, token::identifier}, 223},
	{ {188, token::type_string}, 195},
	{ {188, token::type_double}, 196},
	{ {188, token::type_int}, 197},
	{ {189, token::op_minus}, 188},
	{ {189, token::logical_not}, 189},
	{ {189, token::open_paren}, 193},
	{ {189, token::identifier}, 223},
	{ {189, token::type_string}, 195},
	{ {189, token::type_double}, 196},
	{ {189, token::type_int}, 197},
	{ {190, token::open_paren}, 225},
	{ {191, token::identifier}, 226},
	{ {192, token::op_minus}, 55},
	{ {192, token::logical_not}, 56},
	{ {192, token::open_paren}, 57},
	{ {192, token::identifier}, 58},
	{ {192, token::type_string}, 59},
	{ {192, token::type_double}, 60},
	{ {192, token::type_int}, 61},
	{ {193, token::op_minus}, 67},
	{ {193, token::logical_not}, 68},
	{ {193, token::open_paren}, 69},
	{ {193, token::identifier}, 70},
	{ {193, token::type_string}, 71},
	{ {193, token::type_double}, 72},
	{ {193, token::type_int}, 73},
	{ {194, token::op_plus}, -40},
	{ {194, token::op_minus}, -40},
	{ {194, token::op_mult}, -40},
	{ {194, token::op_div}, -40},
	{ {194, token::op_idiv}, -40},
	{ {194, token::op_mod}, -40},
	{ {194, token::op_pow}, -40},
	{ {194, token::op_equals}, 229},
	{ {194, token::cop_lt}, -40},
	{ {194, token::cop_lte}, -40},
	{ {194, token::cop_gt}, -40},
	{ {194, token::cop_gte}, -40},
	{ {194, token::cop_equals}, -40},
	{ {194, token::logical_not}, -40},
	{ {194, token::logical_and}, -40},
	{ {194, token::logical_or}, -40},
	{ {194, token::close_paren}, -40},
	{ {194, token::close_curly}, -40},
	{ {194, token::colon}, -40},
	{ {194, token::newline}, -40},
	{ {194, token::eof}, -40},
	{ {195, token::op_plus}, -46},
	{ {195, token::op_minus}, -46},
	{ {195, token::op_mult}, -46},
	{ {195, token::op_div}, -46},
	{ {195, token::op_idiv}, -46},
	{ {195, token::op_mod}, -46},
	{ {195, token::op_pow}, -46},
	{ {195, token::cop_lt}, -46},
	{ {195, token::cop_lte}, -46},
	{ {195, token::cop_gt}, -46},
	{ {195, token::cop_gte}, -46},
	{ {195, token::cop_equals}, -46},
	{ {195, token::logical_not}, -46},
	{ {195, token::logical_and}, -46},
	{ {195, token::logical_or}, -46},
	{ {195, token::close_paren}, -46},
	{ {195, token::close_curly}, -46},
	{ {195, token::colon}, -46},
	{ {195, token::newline}, -46},
	{ {195, token::eof}, -46},
	{ {196, token::op_plus}, -44},
	{ {196, token::op_minus}, -44},
	{ {196, token::op_mult}, -44},
	{ {196, token::op_div}, -44},
	{ {196, token::op_idiv}, -44},
	{ {196, token::op_mod}, -44},
	{ {196, token::op_pow}, -44},
	{ {196, token::cop_lt}, -44},
	{ {196, token::cop_lte}, -44},
	{ {196, token::cop_gt}, -44},
	{ {196, token::cop_gte}, -44},
	{ {196, token::cop_equals}, -44},
	{ {196, token::logical_not}, -44},
	{ {196, token::logical_and}, -44},
	{ {196, token::logical_or}, -44},
	{ {196, token::close_paren}, -44},
	{ {196, token::close_curly}, -44},
	{ {196, token::colon}, -44},
	{ {196, token::newline}, -44},
	{ {196, token::eof}, -44},
	{ {197, token::op_plus}, -45},
	{ {197, token::op_minus}, -45},
	{ {197, token::op_mult}, -45},
	{ {197, token::op_div}, -45},
	{ {197, token::op_idiv}, -45},
	{ {197, token::op_mod}, -45},
	{ {197, token::op_pow}, -45},
	{ {197, token::cop_lt}, -45},
	{ {197, token::cop_lte}, -45},
	{ {197, token::cop_gt}, -45},
	{ {197, token::cop_gte}, -45},
	{ {197, token::cop_equals}, -45},
	{ {197, token::logical_not}, -45},
	{ {197, token::logical_and}, -45},
	{ {197, token::logical_or}, -45},
	{ {197, token::close_paren}, -45},
	{ {197, token::close_curly}, -45},
	{ {197, token::colon}, -45},
	{ {197, token::newline}, -45},
	{ {197, token::eof}, -45},
	{ {198, token::op_plus}, -37},
	{ {198, token::op_minus}, -37},
	{ {198, token::op_mult}, -37},
	{ {198, token::op_div}, -37},
	{ {198, token::op_idiv}, -37},
	{ {198, token::op_mod}, -37},
	{ {198, token::op_pow}, -37},
	{ {198, token::close_paren}, -37},
	{ {198, token::close_curly}, -37},
	{ {198, token::colon}, -37},
	{ {198, token::newline}, -37},
	{ {198, token::eof}, -37},
	{ {199, token::op_plus}, -37},
	{ {199, token::op_minus}, -37},
	{ {199, token::op_mult}, -37},
	{ {199, token::op_div}, -37},
	{ {199, token::op_idiv}, -37},
	{ {199, token::op_mod}, -37},
	{ {199, token::op_pow}, -37},
	{ {199, token::close_paren}, -37},
	{ {199, token::close_curly}, -37},
	{ {199, token::colon}, -37},
	{ {199, token::newline}, -37},
	{ {199, token::eof}, -37},
	{ {200, token::close_curly}, 230},
	{ {201, token::op_minus}, 188},
	{ {201, token::logical_not}, 189},
	{ {201, token::kw_print}, 190},
	{ {201, token::kw_for}, 191},
	{ {201, token::kw_while}, 192},
	{ {201, token::open_paren}, 193},
	{ {201, token::identifier}, 194},
	{ {201, token::type_string}, 195},
	{ {201, token::type_double}, 196},
	{ {201, token::type_int}, 197},
	{ {202, token::close_curly}, -3},
	{ {202, token::eof}, -3},
	{ {203, token::open_curly}, 232},
	{ {204, token::close_curly}, -20},
	{ {204, token::newline}, -20},
	{ {204, token::eof}, -20},
	{ {205, token::op_minus}, 188},
	{ {205, token::logical_not}, 189},
	{ {205, token::kw_print}, 190},
	{ {205, token::kw_for}, 191},
	{ {205, token::kw_while}, 192},
	{ {205, token::open_paren}, 193},
	{ {205, token::close_curly}, -7},
	{ {205, token::identifier}, 194},
	{ {205, token::type_string}, 195},
	{ {205, token::type_double}, 196},
	{ {205, token::type_int}, 197},
	{ {205, token::eof}, -7},
	{ {206, token::op_minus}, -5},
	{ {206, token::logical_not}, -5},
	{ {206, token::kw_print}, -5},
	{ {206, token::kw_for}, -5},
	{ {206, token::kw_while}, -5},
	{ {206, token::open_paren}, -5},
	{ {206, token::close_curly}, -5},
	{ {206, token::newline}, 235},
	{ {206, token::identifier}, -5},
	{ {206, token::type_string}, -5},
	{ {206, token::type_double}, -5},
	{ {206, token::type_int}, -5},
	{ {206, token::eof}, -5},
	{ {207, token::op_minus}, 188},
	{ {207, token::logical_not}, 189},
	{ {207, token::open_paren}, 193},
	{ {207, token::identifier}, 223},
	{ {207, token::type_string}, 195},
	{ {207, token::type_double}, 196},
	{ {207, token::type_int}, 197},
	{ {208, token::op_minus}, 188},
	{ {208, token::logical_not}, 189},
	{ {208, token::open_paren}, 193},
	{ {208, token::identifier}, 223},
	{ {208, token::type_string}, 195},
	{ {208, token::type_double}, 196},
	{ {208, token::type_int}, 197},
	{ {209, token::op_minus}, 188},
	{ {209, token::logical_not}, 189},
	{ {209, token::open_paren}, 193},
	{ {209, token::identifier}, 223},
	{ {209, token::type_string}, 195},
	{ {209, token::type_double}, 196},
	{ {209, token::type_int}, 197},
	{ {210, token::op_minus}, 188},
	{ {210, token::logical_not}, 189},
	{ {210, token::open_paren}, 193},
	{ {210, token::identifier}, 223},
	{ {210, token::type_string}, 195},
	{ {210, token::type_double}, 196},
	{ {210, token::type_int}, 197},
	{ {211, token::op_minus}, 188},
	{ {211, token::logical_not}, 189},
	{ {211, token::open_paren}, 193},
	{ {211, token::identifier}, 223},
	{ {211, token::type_string}, 195},
	{ {211, token::type_double}, 196},
	{ {211, token::type_int}, 197},
	{ {212, token::op_minus}, 188},
	{ {212, token::logical_not}, 189},
	{ {212, token::open_paren}, 193},
	{ {212, token::identifier}, 223},
	{ {212, token::type_string}, 195},
	{ {212, token::type_double}, 196},
	{ {212, token::type_int}, 197},
	{ {213, token::op_minus}, 188},
	{ {213, token::logical_not}, 189},
	{ {213, token::open_paren}, 193},
	{ {213, token::identifier}, 223},
	{ {213, token::type_string}, 195},
	{ {213, token::type_double}, 196},
	{ {213, token::type_int}, 197},
	{ {214, token::op_minus}, 188},
	{ {214, token::logical_not}, 189},
	{ {214, token::open_paren}, 193},
	{ {214, token::identifier}, 223},
	{ {214, token::type_string}, 195},
	{ {214, token::type_double}, 196},
	{ {214, token::type_int}, 197},
	{ {215, token::op_minus}, 188},
	{ {215, token::logical_not}, 189},
	{ {215, token::open_paren}, 193},
	{ {215, token::identifier}, 223},
	{ {215, token::type_string}, 195},
	{ {215, token::type_double}, 196},
	{ {215, token::type_int}, 197},
	{ {216, token::op_minus}, 188},
	{ {216, token::logical_not}, 189},
	{ {216, token::open_paren}, 193},
	{ {216, token::identifier}, 223},
	{ {216, token::type_string}, 195},
	{ {216, token::type_double}, 196},
	{ {216, token::type_int}, 197},
	{ {217, token::op_minus}, 188},
	{ {217, token::logical_not}, 189},
	{ {217, token::open_paren}, 193},
	{ {217, token::identifier}, 223},
	{ {217, token::type_string}, 195},
	{ {217, token::type_double}, 196},
	{ {217, token::type_int}, 197},
	{ {218, token::op_minus}, 188},
	{ {218, token::logical_not}, 189},
	{ {218, token::open_paren}, 193},
	{ {218, token::identifier}, 223},
	{ {218, token::type_string}, 195},
	{ {218, token::type_double}, 196},
	{ {218, token::type_int}, 197},
	{ {219, token::op_equals}, 248},
	{ {220, token::op_minus}, 188},
	{ {220, token::logical_not}, 189},
	{ {220, token::open_paren}, 193},
	{ {220, token::identifier}, 223},
	{ {220, token::type_string}, 195},
	{ {220, token::type_double}, 196},
	{ {220, token::type_int}, 197},
	{ {221, token::op_minus}, 188},
	{ {221, token::logical_not}, 189},
	{ {221, token::open_paren}, 193},
	{ {221, token::identifier}, 223},
	{ {221, token::type_string}, 195},
	{ {221, token::type_double}, 196},
	{ {221, token::type_int}, 197},
	{ {222, token::op_plus}, -43},
	{ {222, token::op_minus}, -43},
	{ {222, token::op_mult}, -43},
	{ {222, token::op_div}, -43},
	{ {222, token::op_idiv}, -43},
	{ {222, token::op_mod}, -43},
	{ {222, token::op_pow}, -43},
	{ {222, token::cop_lt}, -43},
	{ {222, token::cop_lte}, -43},
	{ {222, token::cop_gt}, -43},
	{ {222, token::cop_gte}, -43},
	{ {222, token::cop_equals}, -43},
	{ {222, token::logical_not}, -43},
	{ {222, token::logical_and}, -43},
	{ {222, token::logical_or}, -43},
	{ {222, token::close_paren}, -43},
	{ {222, token::close_curly}, -43},
	{ {222, token::colon}, -43},
	{ {222, token::newline}, -43},
	{ {222, token::eof}, -43},
	{ {223, token::op_plus}, -40},
	{ {223, token::op_minus}, -40},
	{ {223, token::op_mult}, -40},
	{ {223, token::op_div}, -40},
	{ {223, token::op_idiv}, -40},
	{ {223, token::op_mod}, -40},
	{ {223, token::op_pow}, -40},
	{ {223, token::cop_lt}, -40},
	{ {223, token::cop_lte}, -40},
	{ {223, token::cop_gt}, -40},
	{ {223, token::cop_gte}, -40},
	{ {223, token::cop_equals}, -40},
	{ {223, token::logical_not}, -40},
	{ {223, token::logical_and}, -40},
	{ {223, token::logical_or}, -40},
	{ {223, token::close_paren}, -40},
	{ {223, token::close_curly}, -40},
	{ {223, token::colon}, -40},
	{ {223, token::newline}, -40},
	{ {223, token::eof}, -40},
	{ {224, token::op_plus}, -42},
	{ {224, token::op_minus}, -42},
	{ {224, token::op_mult}, -42},
	{ {224, token::op_div}, -42},
	{ {224, token::op_idiv}, -42},
	{ {224, token::op_mod}, -42},
	{ {224, token::op_pow}, -42},
	{ {224, token::cop_lt}, -42},
	{ {224, token::cop_lte}, -42},
	{ {224, token::cop_gt}, -42},
	{ {224, token::cop_gte}, -42},
	{ {224, token::cop_equals}, -42},
	{ {224, token::logical_not}, -42},
	{ {224, token::logical_and}, -42},
	{ {224, token::logical_or}, -42},
	{ {224, token::close_paren}, -42},
	{ {224, token::close_curly}, -42},
	{ {224, token::colon}, -42},
	{ {224, token::newline}, -42},
	{ {224, token::eof}, -42},
	{ {225, token::op_minus}, 67},
	{ {225, token::logical_not}, 68},
	{ {225, token::open_paren}, 69},
	{ {225, token::identifier}, 70},
	{ {225, token::type_string}, 71},
	{ {225, token::type_double}, 72},
	{ {225, token::type_int}, 73},
	{ {226, token::colon}, 252},
	{ {227, token::colon}, 253},
	{ {228, token::close_paren}, 254},
	{ {229, token::op_minus}, 188},
	{ {229, token::logical_not}, 189},
	{ {229, token::open_paren}, 193},
	{ {229, token::identifier}, 223},
	{ {229, token::type_string}, 195},
	{ {229, token::type_double}, 196},
	{ {229, token::type_int}, 197},
	{ {230, token::close_curly}, -18},
	{ {230, token::newline}, -18},
	{ {230, token::eof}, -18},
	{ {231, token::close_curly}, -2},
	{ {231, token::eof}, -2},
	{ {232, token::op_minus}, 188},
	{ {232, token::logical_not}, 189},
	{ {232, token::kw_print}, 190},
	{ {232, token::kw_for}, 191},
	{ {232, token::kw_while}, 192},
	{ {232, token::open_paren}, 193},
	{ {232, token::newline}, 22},
	{ {232, token::identifier}, 194},
	{ {232, token::type_string}, 195},
	{ {232, token::type_double}, 196},
	{ {232, token::type_int}, 197},
	{ {233, token::close_curly}, -6},
	{ {233, token::eof}, -6},
	{ {234, token::op_minus}, -4},
	{ {234, token::logical_not}, -4},
	{ {234, token::kw_print}, -4},
	{ {234, token::kw_for}, -4},
	{ {234, token::kw_while}, -4},
	{ {234, token::open_paren}, -4},
	{ {234, token::close_curly}, -4},
	{ {234, token::identifier}, -4},
	{ {234, token::type_string}, -4},
	{ {234, token::type_double}, -4},
	{ {234, token::type_int}, -4},
	{ {234, token::eof}, -4},
	{ {235, token::op_minus}, -5},
	{ {235, token::logical_not}, -5},
	{ {235, token::kw_print}, -5},
	{ {235, token::kw_for}, -5},
	{ {235, token::kw_while}, -5},
	{ {235, token::open_paren}, -5},
	{ {235, token::close_curly}, -5},
	{ {235, token::newline}, 235},
	{ {235, token::identifier}, -5},
	{ {235, token::type_string}, -5},
	{ {235, token::type_double}, -5},
	{ {235, token::type_int}, -5},
	{ {235, token::eof}, -5},
	{ {236, token::close_paren}, -21},
	{ {236, token::close_curly}, -21},
	{ {236, token::colon}, -21},
	{ {236, token::newline}, -21},
	{ {236, token::eof}, -21},
	{ {237, token::close_paren}, -22},
	{ {237, token::close_curly}, -22},
	{ {237, token::colon}, -22},
	{ {237, token::newline}, -22},
	{ {237, token::eof}, -22},
	{ {238, token::op_plus}, -24},
	{ {238, token::op_minus}, -24},
	{ {238, token::close_paren}, -24},
	{ {238, token::close_curly}, -24},
	{ {238, token::colon}, -24},
	{ {238, token::newline}, -24},
	{ {238, token::eof}, -24},
	{ {239, token::op_plus}, -25},
	{ {239, token::op_minus}, -25},
	{ {239, token::close_paren}, -25},
	{ {239, token::close_curly}, -25},
	{ {239, token::colon}, -25},
	{ {239, token::newline}, -25},
	{ {239, token::eof}, -25},
	{ {240, token::op_plus}, -26},
	{ {240, token::op_minus}, -26},
	{ {240, token::close_paren}, -26},
	{ {240, token::close_curly}, -26},
	{ {240, token::colon}, -26},
	{ {240, token::newline}, -26},
	{ {240, token::eof}, -26},
	{ {241, token::op_plus}, -27},
	{ {241, token::op_minus}, -27},
	{ {241, token::close_paren}, -27},
	{ {241, token::close_curly}, -27},
	{ {241, token::colon}, -27},
	{ {241, token::newline}, -27},
	{ {241, token::eof}, -27},
	{ {242, token::op_plus}, -28},
	{ {242, token::op_minus}, -28},
	{ {242, token::close_paren}, -28},
	{ {242, token::close_curly}, -28},
	{ {242, token::colon}, -28},
	{ {242, token::newline}, -28},
	{ {242, token::eof}, -28},
	{ {243, token::op_plus}, -31},
	{ {243, token::op_minus}, -31},
	{ {243, token::op_mult}, -31},
	{ {243, token::op_div}, -31},
	{ {243, token::op_idiv}, -31},
	{ {243, token::op_mod}, -31},
	{ {243, token::op_pow}, -31},
	{ {243, token::close_paren}, -31},
	{ {243, token::close_curly}, -31},
	{ {243, token::colon}, -31},
	{ {243, token::newline}, -31},
	{ {243, token::eof}, -31},
	{ {244, token::op_plus}, -32},
	{ {244, token::op_minus}, -32},
	{ {244, token::op_mult}, -32},
	{ {244, token::op_div}, -32},
	{ {244, token::op_idiv}, -32},
	{ {244, token::op_mod}, -32},
	{ {244, token::op_pow}, -32},
	{ {244, token::close_paren}, -32},
	{ {244, token::close_curly}, -32},
	{ {244, token::colon}, -32},
	{ {244, token::newline}, -32},
	{ {244, token::eof}, -32},
	{ {245, token::op_plus}, -33},
	{ {245, token::op_minus}, -33},
	{ {245, token::op_mult}, -33},
	{ {245, token::op_div}, -33},
	{ {245, token::op_idiv}, -33},
	{ {245, token::op_mod}, -33},
	{ {245, token::op_pow}, -33},
	{ {245, token::close_paren}, -33},
	{ {245, token::close_curly}, -33},
	{ {245, token::colon}, -33},
	{ {245, token::newline}, -33},
	{ {245, token::eof}, -33},
	{ {246, token::op_plus}, -34},
	{ {246, token::op_minus}, -34},
	{ {246, token::op_mult}, -34},
	{ {246, token::op_div}, -34},
	{ {246, token::op_idiv}, -34},
	{ {246, token::op_mod}, -34},
	{ {246, token::op_pow}, -34},
	{ {246, token::close_paren}, -34},
	{ {246, token::close_curly}, -34},
	{ {246, token::colon}, -34},
	{ {246, token::newline}, -34},
	{ {246, token::eof}, -34},
	{ {247, token::op_plus}, -30},
	{ {247, token::op_minus}, -30},
	{ {247, token::op_mult}, -30},
	{ {247, token::op_div}, -30},
	{ {247, token::op_idiv}, -30},
	{ {247, token::op_mod}, -30},
	{ {247, token::op_pow}, -30},
	{ {247, token::close_paren}, -30},
	{ {247, token::close_curly}, -30},
	{ {247, token::colon}, -30},
	{ {247, token::newline}, -30},
	{ {247, token::eof}, -30},
	{ {248, token::op_minus}, 188},
	{ {248, token::logical_not}, 189},
	{ {248, token::open_paren}, 193},
	{ {248, token::identifier}, 223},
	{ {248, token::type_string}, 195},
	{ {248, token::type_double}, 196},
	{ {248, token::type_int}, 197},
	{ {249, token::op_plus}, -35},
	{ {249, token::op_minus}, -35},
	{ {249, token::op_mult}, -35},
	{ {249, token::op_div}, -35},
	{ {249, token::op_idiv}, -35},
	{ {249, token::op_mod}, -35},
	{ {249, token::op_pow}, -35},
	{ {249, token::close_paren}, -35},
	{ {249, token::close_curly}, -35},
	{ {249, token::colon}, -35},
	{ {249, token::newline}, -35},
	{ {249, token::eof}, -35},
	{ {250, token::op_plus}, -36},
	{ {250, token::op_minus}, -36},
	{ {250, token::op_mult}, -36},
	{ {250, token::op_div}, -36},
	{ {250, token::op_idiv}, -36},
	{ {250, token::op_mod}, -36},
	{ {250, token::op_pow}, -36},
	{ {250, token::close_paren}, -36},
	{ {250, token::close_curly}, -36},
	{ {250, token::colon}, -36},
	{ {250, token::newline}, -36},
	{ {250, token::eof}, -36},
	{ {251, token::close_paren}, 258},
	{ {252, token::type_int}, 259},
	{ {253, token::open_curly}, 260},
	{ {254, token::op_plus}, -39},
	{ {254, token::op_minus}, -39},
	{ {254, token::op_mult}, -39},
	{ {254, token::op_div}, -39},
	{ {254, token::op_idiv}, -39},
	{ {254, token::op_mod}, -39},
	{ {254, token::op_pow}, -39},
	{ {254, token::cop_lt}, -39},
	{ {254, token::cop_lte}, -39},
	{ {254, token::cop_gt}, -39},
	{ {254, token::cop_gte}, -39},
	{ {254, token::cop_equals}, -39},
	{ {254, token::logical_not}, -39},
	{ {254, token::logical_and}, -39},
	{ {254, token::logical_or}, -39},
	{ {254, token::close_paren}, -39},
	{ {254, token::close_curly}, -39},
	{ {254, token::colon}, -39},
	{ {254, token::newline}, -39},
	{ {254, token::eof}, -39},
	{ {255, token::close_curly}, -17},
	{ {255, token::newline}, -17},
	{ {255, token::eof}, -17},
	{ {256, token::close_curly}, 261},
	{ {257, token::op_plus}, -37},
	{ {257, token::op_minus}, -37},
	{ {257, token::op_mult}, -37},
	{ {257, token::op_div}, -37},
	{ {257, token::op_idiv}, -37},
	{ {257, token::op_mod}, -37},
	{ {257, token::op_pow}, -37},
	{ {257, token::close_paren}, -37},
	{ {257, token::close_curly}, -37},
	{ {257, token::colon}, -37},
	{ {257, token::newline}, -37},
	{ {257, token::eof}, -37},
	{ {258, token::close_curly}, -16},
	{ {258, token::newline}, -16},
	{ {258, token::eof}, -16},
	{ {259, token::open_curly}, 262},
	{ {259, token::comma}, 263},
	{ {260, token::op_minus}, 188},
	{ {260, token::logical_not}, 189},
	{ {260, token::kw_print}, 190},
	{ {260, token::kw_for}, 191},
	{ {260, token::kw_while}, 192},
	{ {260, token::open_paren}, 193},
	{ {260, token::identifier}, 194},
	{ {260, token::type_string}, 195},
	{ {260, token::type_double}, 196},
	{ {260, token::type_int}, 197},
	{ {261, token::close_curly}, -19},
	{ {261, token::newline}, -19},
	{ {261, token::eof}, -19},
	{ {262, token::op_minus}, 188},
	{ {262, token::logical_not}, 189},
	{ {262, token::kw_print}, 190},
	{ {262, token::kw_for}, 191},
	{ {262, token::kw_while}, 192},
	{ {262, token::open_paren}, 193},
	{ {262, token::newline}, 22},
	{ {262, token::identifier}, 194},
	{ {262, token::type_string}, 195},
	{ {262, token::type_double}, 196},
	{ {262, token::type_int}, 197},
	{ {263, token::type_int}, 266},
	{ {264, token::close_curly}, 267},
	{ {265, token::close_curly}, 268},
	{ {266, token::open_curly}, 269},
	{ {267, token::close_curly}, -20},
	{ {267, token::newline}, -20},
	{ {267, token::eof}, -20},
	{ {268, token::close_curly}, -18},
	{ {268, token::newline}, -18},
	{ {268, token::eof}, -18},
	{ {269, token::op_minus}, 188},
	{ {269, token::logical_not}, 189},
	{ {269, token::kw_print}, 190},
	{ {269, token::kw_for}, 191},
	{ {269, token::kw_while}, 192},
	{ {269, token::open_paren}, 193},
	{ {269, token::newline}, 22},
	{ {269, token::identifier}, 194},
	{ {269, token::type_string}, 195},
	{ {269, token::type_double}, 196},
	{ {269, token::type_int}, 197},
	{ {270, token::close_curly}, 271},
	{ {271, token::close_curly}, -19},
	{ {271, token::newline}, -19},
	{ {271, token::eof}, -19},
};
static map<pair<int, token>, int> tgoto = {
	{ {0, token::StatementSuite}, 1},
	{ {0, token::NewlineLoop}, 2},
	{ {0, token::StatementList}, 3},
	{ {0, token::Statement}, 4},
	{ {0, token::SimpleStatement}, 5},
	{ {0, token::ComplexStatement}, 6},
	{ {0, token::Print}, 7},
	{ {0, token::Assignment}, 8},
	{ {0, token::ForLoop}, 9},
	{ {0, token::WhileLoop}, 10},
	{ {0, token::Expression}, 11},
	{ {0, token::MultiplicativeExpression}, 12},
	{ {0, token::ConditionalExpression}, 13},
	{ {0, token::BaseExpression}, 14},
	{ {0, token::Literal}, 15},
	{ {2, token::StatementList}, 27},
	{ {2, token::Statement}, 4},
	{ {2, token::SimpleStatement}, 5},
	{ {2, token::ComplexStatement}, 6},
	{ {2, token::Print}, 7},
	{ {2, token::Assignment}, 8},
	{ {2, token::ForLoop}, 9},
	{ {2, token::WhileLoop}, 10},
	{ {2, token::Expression}, 11},
	{ {2, token::MultiplicativeExpression}, 12},
	{ {2, token::ConditionalExpression}, 13},
	{ {2, token::BaseExpression}, 14},
	{ {2, token::Literal}, 15},
	{ {4, token::NewlineLoop}, 28},
	{ {16, token::BaseExpression}, 45},
	{ {16, token::Literal}, 15},
	{ {17, token::BaseExpression}, 47},
	{ {17, token::Literal}, 15},
	{ {20, token::Expression}, 50},
	{ {20, token::MultiplicativeExpression}, 51},
	{ {20, token::ConditionalExpression}, 52},
	{ {20, token::BaseExpression}, 53},
	{ {20, token::Literal}, 54},
	{ {21, token::Expression}, 62},
	{ {21, token::MultiplicativeExpression}, 63},
	{ {21, token::ConditionalExpression}, 64},
	{ {21, token::BaseExpression}, 65},
	{ {21, token::Literal}, 66},
	{ {22, token::NewlineLoop}, 74},
	{ {28, token::StatementList}, 77},
	{ {28, token::Statement}, 4},
	{ {28, token::SimpleStatement}, 5},
	{ {28, token::ComplexStatement}, 6},
	{ {28, token::Print}, 7},
	{ {28, token::Assignment}, 8},
	{ {28, token::ForLoop}, 9},
	{ {28, token::WhileLoop}, 10},
	{ {28, token::Expression}, 11},
	{ {28, token::MultiplicativeExpression}, 12},
	{ {28, token::ConditionalExpression}, 13},
	{ {28, token::BaseExpression}, 14},
	{ {28, token::Literal}, 15},
	{ {29, token::NewlineLoop}, 78},
	{ {30, token::Expression}, 80},
	{ {30, token::MultiplicativeExpression}, 12},
	{ {30, token::ConditionalExpression}, 13},
	{ {30, token::BaseExpression}, 14},
	{ {30, token::Literal}, 15},
	{ {31, token::Expression}, 81},
	{ {31, token::MultiplicativeExpression}, 12},
	{ {31, token::ConditionalExpression}, 13},
	{ {31, token::BaseExpression}, 14},
	{ {31, token::Literal}, 15},
	{ {32, token::MultiplicativeExpression}, 82},
	{ {32, token::ConditionalExpression}, 13},
	{ {32, token::BaseExpression}, 14},
	{ {32, token::Literal}, 15},
	{ {33, token::MultiplicativeExpression}, 83},
	{ {33, token::ConditionalExpression}, 13},
	{ {33, token::BaseExpression}, 14},
	{ {33, token::Literal}, 15},
	{ {34, token::MultiplicativeExpression}, 84},
	{ {34, token::ConditionalExpression}, 13},
	{ {34, token::BaseExpression}, 14},
	{ {34, token::Literal}, 15},
	{ {35, token::MultiplicativeExpression}, 85},
	{ {35, token::ConditionalExpression}, 13},
	{ {35, token::BaseExpression}, 14},
	{ {35, token::Literal}, 15},
	{ {36, token::MultiplicativeExpression}, 86},
	{ {36, token::ConditionalExpression}, 13},
	{ {36, token::BaseExpression}, 14},
	{ {36, token::Literal}, 15},
	{ {37, token::ConditionalExpression}, 87},
	{ {37, token::BaseExpression}, 14},
	{ {37, token::Literal}, 15},
	{ {38, token::ConditionalExpression}, 88},
	{ {38, token::BaseExpression}, 14},
	{ {38, token::Literal}, 15},
	{ {39, token::ConditionalExpression}, 89},
	{ {39, token::BaseExpression}, 14},
	{ {39, token::Literal}, 15},
	{ {40, token::ConditionalExpression}, 90},
	{ {40, token::BaseExpression}, 14},
	{ {40, token::Literal}, 15},
	{ {41, token::ConditionalExpression}, 91},
	{ {41, token::BaseExpression}, 14},
	{ {41, token::Literal}, 15},
	{ {43, token::ConditionalExpression}, 93},
	{ {43, token::BaseExpression}, 14},
	{ {43, token::Literal}, 15},
	{ {44, token::ConditionalExpression}, 94},
	{ {44, token::BaseExpression}, 14},
	{ {44, token::Literal}, 15},
	{ {48, token::SimpleStatement}, 95},
	{ {48, token::Expression}, 96},
	{ {48, token::MultiplicativeExpression}, 63},
	{ {48, token::ConditionalExpression}, 64},
	{ {48, token::BaseExpression}, 65},
	{ {48, token::Literal}, 66},
	{ {55, token::BaseExpression}, 114},
	{ {55, token::Literal}, 54},
	{ {56, token::BaseExpression}, 115},
	{ {56, token::Literal}, 54},
	{ {57, token::Expression}, 116},
	{ {57, token::MultiplicativeExpression}, 63},
	{ {57, token::ConditionalExpression}, 64},
	{ {57, token::BaseExpression}, 65},
	{ {57, token::Literal}, 66},
	{ {67, token::BaseExpression}, 133},
	{ {67, token::Literal}, 66},
	{ {68, token::BaseExpression}, 134},
	{ {68, token::Literal}, 66},
	{ {69, token::Expression}, 135},
	{ {69, token::MultiplicativeExpression}, 63},
	{ {69, token::ConditionalExpression}, 64},
	{ {69, token::BaseExpression}, 65},
	{ {69, token::Literal}, 66},
	{ {75, token::NewlineLoop}, 74},
	{ {76, token::SimpleStatement}, 136},
	{ {76, token::Expression}, 11},
	{ {76, token::MultiplicativeExpression}, 12},
	{ {76, token::ConditionalExpression}, 13},
	{ {76, token::BaseExpression}, 14},
	{ {76, token::Literal}, 15},
	{ {79, token::NewlineLoop}, 78},
	{ {92, token::ConditionalExpression}, 137},
	{ {92, token::BaseExpression}, 14},
	{ {92, token::Literal}, 15},
	{ {99, token::Expression}, 141},
	{ {99, token::MultiplicativeExpression}, 51},
	{ {99, token::ConditionalExpression}, 52},
	{ {99, token::BaseExpression}, 53},
	{ {99, token::Literal}, 54},
	{ {100, token::Expression}, 142},
	{ {100, token::MultiplicativeExpression}, 51},
	{ {100, token::ConditionalExpression}, 52},
	{ {100, token::BaseExpression}, 53},
	{ {100, token::Literal}, 54},
	{ {101, token::MultiplicativeExpression}, 143},
	{ {101, token::ConditionalExpression}, 52},
	{ {101, token::BaseExpression}, 53},
	{ {101, token::Literal}, 54},
	{ {102, token::MultiplicativeExpression}, 144},
	{ {102, token::ConditionalExpression}, 52},
	{ {102, token::BaseExpression}, 53},
	{ {102, token::Literal}, 54},
	{ {103, token::MultiplicativeExpression}, 145},
	{ {103, token::ConditionalExpression}, 52},
	{ {103, token::BaseExpression}, 53},
	{ {103, token::Literal}, 54},
	{ {104, token::MultiplicativeExpression}, 146},
	{ {104, token::ConditionalExpression}, 52},
	{ {104, token::BaseExpression}, 53},
	{ {104, token::Literal}, 54},
	{ {105, token::MultiplicativeExpression}, 147},
	{ {105, token::ConditionalExpression}, 52},
	{ {105, token::BaseExpression}, 53},
	{ {105, token::Literal}, 54},
	{ {106, token::ConditionalExpression}, 148},
	{ {106, token::BaseExpression}, 53},
	{ {106, token::Literal}, 54},
	{ {107, token::ConditionalExpression}, 149},
	{ {107, token::BaseExpression}, 53},
	{ {107, token::Literal}, 54},
	{ {108, token::ConditionalExpression}, 150},
	{ {108, token::BaseExpression}, 53},
	{ {108, token::Literal}, 54},
	{ {109, token::ConditionalExpression}, 151},
	{ {109, token::BaseExpression}, 53},
	{ {109, token::Literal}, 54},
	{ {110, token::ConditionalExpression}, 152},
	{ {110, token::BaseExpression}, 53},
	{ {110, token::Literal}, 54},
	{ {112, token::ConditionalExpression}, 154},
	{ {112, token::BaseExpression}, 53},
	{ {112, token::Literal}, 54},
	{ {113, token::ConditionalExpression}, 155},
	{ {113, token::BaseExpression}, 53},
	{ {113, token::Literal}, 54},
	{ {118, token::Expression}, 157},
	{ {118, token::MultiplicativeExpression}, 63},
	{ {118, token::ConditionalExpression}, 64},
	{ {118, token::BaseExpression}, 65},
	{ {118, token::Literal}, 66},
	{ {119, token::Expression}, 158},
	{ {119, token::MultiplicativeExpression}, 63},
	{ {119, token::ConditionalExpression}, 64},
	{ {119, token::BaseExpression}, 65},
	{ {119, token::Literal}, 66},
	{ {120, token::MultiplicativeExpression}, 159},
	{ {120, token::ConditionalExpression}, 64},
	{ {120, token::BaseExpression}, 65},
	{ {120, token::Literal}, 66},
	{ {121, token::MultiplicativeExpression}, 160},
	{ {121, token::ConditionalExpression}, 64},
	{ {121, token::BaseExpression}, 65},
	{ {121, token::Literal}, 66},
	{ {122, token::MultiplicativeExpression}, 161},
	{ {122, token::ConditionalExpression}, 64},
	{ {122, token::BaseExpression}, 65},
	{ {122, token::Literal}, 66},
	{ {123, token::MultiplicativeExpression}, 162},
	{ {123, token::ConditionalExpression}, 64},
	{ {123, token::BaseExpression}, 65},
	{ {123, token::Literal}, 66},
	{ {124, token::MultiplicativeExpression}, 163},
	{ {124, token::ConditionalExpression}, 64},
	{ {124, token::BaseExpression}, 65},
	{ {124, token::Literal}, 66},
	{ {125, token::ConditionalExpression}, 164},
	{ {125, token::BaseExpression}, 65},
	{ {125, token::Literal}, 66},
	{ {126, token::ConditionalExpression}, 165},
	{ {126, token::BaseExpression}, 65},
	{ {126, token::Literal}, 66},
	{ {127, token::ConditionalExpression}, 166},
	{ {127, token::BaseExpression}, 65},
	{ {127, token::Literal}, 66},
	{ {128, token::ConditionalExpression}, 167},
	{ {128, token::BaseExpression}, 65},
	{ {128, token::Literal}, 66},
	{ {129, token::ConditionalExpression}, 168},
	{ {129, token::BaseExpression}, 65},
	{ {129, token::Literal}, 66},
	{ {131, token::ConditionalExpression}, 170},
	{ {131, token::BaseExpression}, 65},
	{ {131, token::Literal}, 66},
	{ {132, token::ConditionalExpression}, 171},
	{ {132, token::BaseExpression}, 65},
	{ {132, token::Literal}, 66},
	{ {140, token::StatementList}, 175},
	{ {140, token::Statement}, 176},
	{ {140, token::SimpleStatement}, 177},
	{ {140, token::ComplexStatement}, 178},
	{ {140, token::Print}, 179},
	{ {140, token::Assignment}, 180},
	{ {140, token::ForLoop}, 181},
	{ {140, token::WhileLoop}, 182},
	{ {140, token::Expression}, 183},
	{ {140, token::MultiplicativeExpression}, 184},
	{ {140, token::ConditionalExpression}, 185},
	{ {140, token::BaseExpression}, 186},
	{ {140, token::Literal}, 187},
	{ {153, token::ConditionalExpression}, 198},
	{ {153, token::BaseExpression}, 53},
	{ {153, token::Literal}, 54},
	{ {169, token::ConditionalExpression}, 199},
	{ {169, token::BaseExpression}, 65},
	{ {169, token::Literal}, 66},
	{ {173, token::StatementSuite}, 200},
	{ {173, token::NewlineLoop}, 201},
	{ {173, token::StatementList}, 202},
	{ {173, token::Statement}, 176},
	{ {173, token::SimpleStatement}, 177},
	{ {173, token::ComplexStatement}, 178},
	{ {173, token::Print}, 179},
	{ {173, token::Assignment}, 180},
	{ {173, token::ForLoop}, 181},
	{ {173, token::WhileLoop}, 182},
	{ {173, token::Expression}, 183},
	{ {173, token::MultiplicativeExpression}, 184},
	{ {173, token::ConditionalExpression}, 185},
	{ {173, token::BaseExpression}, 186},
	{ {173, token::Literal}, 187},
	{ {176, token::NewlineLoop}, 205},
	{ {188, token::BaseExpression}, 222},
	{ {188, token::Literal}, 187},
	{ {189, token::BaseExpression}, 224},
	{ {189, token::Literal}, 187},
	{ {192, token::Expression}, 227},
	{ {192, token::MultiplicativeExpression}, 51},
	{ {192, token::ConditionalExpression}, 52},
	{ {192, token::BaseExpression}, 53},
	{ {192, token::Literal}, 54},
	{ {193, token::Expression}, 228},
	{ {193, token::MultiplicativeExpression}, 63},
	{ {193, token::ConditionalExpression}, 64},
	{ {193, token::BaseExpression}, 65},
	{ {193, token::Literal}, 66},
	{ {201, token::StatementList}, 231},
	{ {201, token::Statement}, 176},
	{ {201, token::SimpleStatement}, 177},
	{ {201, token::ComplexStatement}, 178},
	{ {201, token::Print}, 179},
	{ {201, token::Assignment}, 180},
	{ {201, token::ForLoop}, 181},
	{ {201, token::WhileLoop}, 182},
	{ {201, token::Expression}, 183},
	{ {201, token::MultiplicativeExpression}, 184},
	{ {201, token::ConditionalExpression}, 185},
	{ {201, token::BaseExpression}, 186},
	{ {201, token::Literal}, 187},
	{ {205, token::StatementList}, 233},
	{ {205, token::Statement}, 176},
	{ {205, token::SimpleStatement}, 177},
	{ {205, token::ComplexStatement}, 178},
	{ {205, token::Print}, 179},
	{ {205, token::Assignment}, 180},
	{ {205, token::ForLoop}, 181},
	{ {205, token::WhileLoop}, 182},
	{ {205, token::Expression}, 183},
	{ {205, token::MultiplicativeExpression}, 184},
	{ {205, token::ConditionalExpression}, 185},
	{ {205, token::BaseExpression}, 186},
	{ {205, token::Literal}, 187},
	{ {206, token::NewlineLoop}, 234},
	{ {207, token::Expression}, 236},
	{ {207, token::MultiplicativeExpression}, 184},
	{ {207, token::ConditionalExpression}, 185},
	{ {207, token::BaseExpression}, 186},
	{ {207, token::Literal}, 187},
	{ {208, token::Expression}, 237},
	{ {208, token::MultiplicativeExpression}, 184},
	{ {208, token::ConditionalExpression}, 185},
	{ {208, token::BaseExpression}, 186},
	{ {208, token::Literal}, 187},
	{ {209, token::MultiplicativeExpression}, 238},
	{ {209, token::ConditionalExpression}, 185},
	{ {209, token::BaseExpression}, 186},
	{ {209, token::Literal}, 187},
	{ {210, token::MultiplicativeExpression}, 239},
	{ {210, token::ConditionalExpression}, 185},
	{ {210, token::BaseExpression}, 186},
	{ {210, token::Literal}, 187},
	{ {211, token::MultiplicativeExpression}, 240},
	{ {211, token::ConditionalExpression}, 185},
	{ {211, token::BaseExpression}, 186},
	{ {211, token::Literal}, 187},
	{ {212, token::MultiplicativeExpression}, 241},
	{ {212, token::ConditionalExpression}, 185},
	{ {212, token::BaseExpression}, 186},
	{ {212, token::Literal}, 187},
	{ {213, token::MultiplicativeExpression}, 242},
	{ {213, token::ConditionalExpression}, 185},
	{ {213, token::BaseExpression}, 186},
	{ {213, token::Literal}, 187},
	{ {214, token::ConditionalExpression}, 243},
	{ {214, token::BaseExpression}, 186},
	{ {214, token::Literal}, 187},
	{ {215, token::ConditionalExpression}, 244},
	{ {215, token::BaseExpression}, 186},
	{ {215, token::Literal}, 187},
	{ {216, token::ConditionalExpression}, 245},
	{ {216, token::BaseExpression}, 186},
	{ {216, token::Literal}, 187},
	{ {217, token::ConditionalExpression}, 246},
	{ {217, token::BaseExpression}, 186},
	{ {217, token::Literal}, 187},
	{ {218, token::ConditionalExpression}, 247},
	{ {218, token::BaseExpression}, 186},
	{ {218, token::Literal}, 187},
	{ {220, token::ConditionalExpression}, 249},
	{ {220, token::BaseExpression}, 186},
	{ {220, token::Literal}, 187},
	{ {221, token::ConditionalExpression}, 250},
	{ {221, token::BaseExpression}, 186},
	{ {221, token::Literal}, 187},
	{ {225, token::SimpleStatement}, 251},
	{ {225, token::Expression}, 96},
	{ {225, token::MultiplicativeExpression}, 63},
	{ {225, token::ConditionalExpression}, 64},
	{ {225, token::BaseExpression}, 65},
	{ {225, token::Literal}, 66},
	{ {229, token::SimpleStatement}, 255},
	{ {229, token::Expression}, 183},
	{ {229, token::MultiplicativeExpression}, 184},
	{ {229, token::ConditionalExpression}, 185},
	{ {229, token::BaseExpression}, 186},
	{ {229, token::Literal}, 187},
	{ {232, token::StatementSuite}, 256},
	{ {232, token::NewlineLoop}, 201},
	{ {232, token::StatementList}, 202},
	{ {232, token::Statement}, 176},
	{ {232, token::SimpleStatement}, 177},
	{ {232, token::ComplexStatement}, 178},
	{ {232, token::Print}, 179},
	{ {232, token::Assignment}, 180},
	{ {232, token::ForLoop}, 181},
	{ {232, token::WhileLoop}, 182},
	{ {232, token::Expression}, 183},
	{ {232, token::MultiplicativeExpression}, 184},
	{ {232, token::ConditionalExpression}, 185},
	{ {232, token::BaseExpression}, 186},
	{ {232, token::Literal}, 187},
	{ {235, token::NewlineLoop}, 234},
	{ {248, token::ConditionalExpression}, 257},
	{ {248, token::BaseExpression}, 186},
	{ {248, token::Literal}, 187},
	{ {260, token::StatementList}, 264},
	{ {260, token::Statement}, 176},
	{ {260, token::SimpleStatement}, 177},
	{ {260, token::ComplexStatement}, 178},
	{ {260, token::Print}, 179},
	{ {260, token::Assignment}, 180},
	{ {260, token::ForLoop}, 181},
	{ {260, token::WhileLoop}, 182},
	{ {260, token::Expression}, 183},
	{ {260, token::MultiplicativeExpression}, 184},
	{ {260, token::ConditionalExpression}, 185},
	{ {260, token::BaseExpression}, 186},
	{ {260, token::Literal}, 187},
	{ {262, token::StatementSuite}, 265},
	{ {262, token::NewlineLoop}, 201},
	{ {262, token::StatementList}, 202},
	{ {262, token::Statement}, 176},
	{ {262, token::SimpleStatement}, 177},
	{ {262, token::ComplexStatement}, 178},
	{ {262, token::Print}, 179},
	{ {262, token::Assignment}, 180},
	{ {262, token::ForLoop}, 181},
	{ {262, token::WhileLoop}, 182},
	{ {262, token::Expression}, 183},
	{ {262, token::MultiplicativeExpression}, 184},
	{ {262, token::ConditionalExpression}, 185},
	{ {262, token::BaseExpression}, 186},
	{ {262, token::Literal}, 187},
	{ {269, token::StatementSuite}, 270},
	{ {269, token::NewlineLoop}, 201},
	{ {269, token::StatementList}, 202},
	{ {269, token::Statement}, 176},
	{ {269, token::SimpleStatement}, 177},
	{ {269, token::ComplexStatement}, 178},
	{ {269, token::Print}, 179},
	{ {269, token::Assignment}, 180},
	{ {269, token::ForLoop}, 181},
	{ {269, token::WhileLoop}, 182},
	{ {269, token::Expression}, 183},
	{ {269, token::MultiplicativeExpression}, 184},
	{ {269, token::ConditionalExpression}, 185},
	{ {269, token::BaseExpression}, 186},
	{ {269, token::Literal}, 187},
};

static void reduce(int decision, stack<Node*> *value_stack) {
	switch(decision) {
		case 1: {
			auto* StatementSuite_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Mango1 {StatementSuite_1};
			value_stack->push(node);
			break;
		}
		case 2: {
			auto* StatementList_1 = value_stack->top();
			value_stack->pop();
			auto* NewlineLoop_2 = value_stack->top();
			value_stack->pop();
			auto* node = new StatementSuite1 {NewlineLoop_2, StatementList_1};
			value_stack->push(node);
			break;
		}
		case 3: {
			auto* StatementList_1 = value_stack->top();
			value_stack->pop();
			auto* node = new StatementSuite2 {StatementList_1};
			value_stack->push(node);
			break;
		}
		case 4: {
			auto* NewlineLoop_1 = value_stack->top();
			value_stack->pop();
			auto* node = new NewlineLoop1 {NewlineLoop_1};
			value_stack->push(node);
			break;
		}
		case 5: {
			auto* node = new NewlineLoop2 {};
			value_stack->push(node);
			break;
		}
		case 6: {
			auto* StatementList_1 = value_stack->top();
			value_stack->pop();
			auto* NewlineLoop_2 = value_stack->top();
			value_stack->pop();
			auto* Statement_3 = value_stack->top();
			value_stack->pop();
			auto* node = new StatementList1 {Statement_3, NewlineLoop_2, StatementList_1};
			value_stack->push(node);
			break;
		}
		case 7: {
			auto* NewlineLoop_1 = value_stack->top();
			value_stack->pop();
			auto* Statement_2 = value_stack->top();
			value_stack->pop();
			auto* node = new StatementList2 {Statement_2, NewlineLoop_1};
			value_stack->push(node);
			break;
		}
		case 8: {
			auto* Statement_1 = value_stack->top();
			value_stack->pop();
			auto* node = new StatementList3 {Statement_1};
			value_stack->push(node);
			break;
		}
		case 9: {
			auto* SimpleStatement_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Statement1 {SimpleStatement_1};
			value_stack->push(node);
			break;
		}
		case 10: {
			auto* ComplexStatement_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Statement2 {ComplexStatement_1};
			value_stack->push(node);
			break;
		}
		case 11: {
			auto* Expression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new SimpleStatement1 {Expression_1};
			value_stack->push(node);
			break;
		}
		case 12: {
			auto* Print_1 = value_stack->top();
			value_stack->pop();
			auto* node = new ComplexStatement1 {Print_1};
			value_stack->push(node);
			break;
		}
		case 13: {
			auto* Assignment_1 = value_stack->top();
			value_stack->pop();
			auto* node = new ComplexStatement2 {Assignment_1};
			value_stack->push(node);
			break;
		}
		case 14: {
			auto* ForLoop_1 = value_stack->top();
			value_stack->pop();
			auto* node = new ComplexStatement3 {ForLoop_1};
			value_stack->push(node);
			break;
		}
		case 15: {
			auto* WhileLoop_1 = value_stack->top();
			value_stack->pop();
			auto* node = new ComplexStatement4 {WhileLoop_1};
			value_stack->push(node);
			break;
		}
		case 16: {
			auto* SimpleStatement_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Print1 {SimpleStatement_1};
			value_stack->push(node);
			break;
		}
		case 17: {
			auto* SimpleStatement_1 = value_stack->top();
			value_stack->pop();
			auto* identifier_2 = value_stack->top();
			value_stack->pop();
			auto* node = new Assignment1 {identifier_2, SimpleStatement_1};
			value_stack->push(node);
			break;
		}
		case 18: {
			auto* StatementSuite_1 = value_stack->top();
			value_stack->pop();
			auto* type_int_2 = value_stack->top();
			value_stack->pop();
			auto* identifier_3 = value_stack->top();
			value_stack->pop();
			auto* node = new ForLoop1 {identifier_3, type_int_2, StatementSuite_1};
			value_stack->push(node);
			break;
		}
		case 19: {
			auto* StatementSuite_1 = value_stack->top();
			value_stack->pop();
			auto* type_int_2 = value_stack->top();
			value_stack->pop();
			auto* type_int_3 = value_stack->top();
			value_stack->pop();
			auto* identifier_4 = value_stack->top();
			value_stack->pop();
			auto* node = new ForLoop2 {identifier_4, type_int_3, type_int_2, StatementSuite_1};
			value_stack->push(node);
			break;
		}
		case 20: {
			auto* StatementList_1 = value_stack->top();
			value_stack->pop();
			auto* Expression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new WhileLoop1 {Expression_2, StatementList_1};
			value_stack->push(node);
			break;
		}
		case 21: {
			auto* Expression_1 = value_stack->top();
			value_stack->pop();
			auto* MultiplicativeExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new Expression1 {MultiplicativeExpression_2, Expression_1};
			value_stack->push(node);
			break;
		}
		case 22: {
			auto* Expression_1 = value_stack->top();
			value_stack->pop();
			auto* MultiplicativeExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new Expression2 {MultiplicativeExpression_2, Expression_1};
			value_stack->push(node);
			break;
		}
		case 23: {
			auto* MultiplicativeExpression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Expression3 {MultiplicativeExpression_1};
			value_stack->push(node);
			break;
		}
		case 24: {
			auto* MultiplicativeExpression_1 = value_stack->top();
			value_stack->pop();
			auto* ConditionalExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new MultiplicativeExpression1 {ConditionalExpression_2, MultiplicativeExpression_1};
			value_stack->push(node);
			break;
		}
		case 25: {
			auto* MultiplicativeExpression_1 = value_stack->top();
			value_stack->pop();
			auto* ConditionalExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new MultiplicativeExpression2 {ConditionalExpression_2, MultiplicativeExpression_1};
			value_stack->push(node);
			break;
		}
		case 26: {
			auto* MultiplicativeExpression_1 = value_stack->top();
			value_stack->pop();
			auto* ConditionalExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new MultiplicativeExpression3 {ConditionalExpression_2, MultiplicativeExpression_1};
			value_stack->push(node);
			break;
		}
		case 27: {
			auto* MultiplicativeExpression_1 = value_stack->top();
			value_stack->pop();
			auto* ConditionalExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new MultiplicativeExpression4 {ConditionalExpression_2, MultiplicativeExpression_1};
			value_stack->push(node);
			break;
		}
		case 28: {
			auto* MultiplicativeExpression_1 = value_stack->top();
			value_stack->pop();
			auto* ConditionalExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new MultiplicativeExpression5 {ConditionalExpression_2, MultiplicativeExpression_1};
			value_stack->push(node);
			break;
		}
		case 29: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new MultiplicativeExpression6 {ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 30: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression1 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 31: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression2 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 32: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression3 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 33: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression4 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 34: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression5 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 35: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression6 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 36: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression7 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 37: {
			auto* ConditionalExpression_1 = value_stack->top();
			value_stack->pop();
			auto* BaseExpression_2 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression8 {BaseExpression_2, ConditionalExpression_1};
			value_stack->push(node);
			break;
		}
		case 38: {
			auto* BaseExpression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new ConditionalExpression9 {BaseExpression_1};
			value_stack->push(node);
			break;
		}
		case 39: {
			auto* Expression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new BaseExpression1 {Expression_1};
			value_stack->push(node);
			break;
		}
		case 40: {
			auto* identifier_1 = value_stack->top();
			value_stack->pop();
			auto* node = new BaseExpression2 {identifier_1};
			value_stack->push(node);
			break;
		}
		case 41: {
			auto* Literal_1 = value_stack->top();
			value_stack->pop();
			auto* node = new BaseExpression3 {Literal_1};
			value_stack->push(node);
			break;
		}
		case 42: {
			auto* BaseExpression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new BaseExpression4 {BaseExpression_1};
			value_stack->push(node);
			break;
		}
		case 43: {
			auto* BaseExpression_1 = value_stack->top();
			value_stack->pop();
			auto* node = new BaseExpression5 {BaseExpression_1};
			value_stack->push(node);
			break;
		}
		case 44: {
			auto* type_double_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Literal1 {type_double_1};
			value_stack->push(node);
			break;
		}
		case 45: {
			auto* type_int_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Literal2 {type_int_1};
			value_stack->push(node);
			break;
		}
		case 46: {
			auto* type_string_1 = value_stack->top();
			value_stack->pop();
			auto* node = new Literal3 {type_string_1};
			value_stack->push(node);
			break;
		}
		default:
			exit(1);
	}
}

#endif