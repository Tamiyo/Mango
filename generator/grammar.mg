## Extended Construction Statement
NTS_MANGO -> NTS_STATEMENT_SUITE

## Block Statement Definition
NTS_STATEMENT_SUITE -> NTS_STATEMENT_LIST TS_NEWLINE

## Recursive Statement Definition
# Standard Statement List
NTS_STATEMENT_LIST -> NTS_STATEMENT TS_NEWLINE NTS_STATEMENT_LIST
NTS_STATEMENT_LIST -> NTS_STATEMENT

# Defining Statements
NTS_STATEMENT -> NTS_STATEMENT_SIMPLE
NTS_STATEMENT -> NTS_STATEMENT_COMPLEX

NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_EXPRESSION
NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_ASSIGNMENT

NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_CONDITIONAL
NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_LOOP
NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_DEFINE_FUNCTION
NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_DEFINE_CLASS

# Expression Statement (designed to prevent left recursion)

# if Term.type == Expression.eval().type
#   return Term.value + Expression.eval()
# elif Term.type  {can be converted to} Expression.eval().type
#   return converted(Term.value) + Expression.eval()
# elif Expression.eval().type {can be converted to} Term.type
#   return Term.value + converted(Expression.eval())
# else
#   {type mismatch error}
NTS_STATEMENT_EXPRESSION -> NTS_STATEMENT_EXPRESSION_2 NTS_STATEMENT_EXPRESSION_P
NTS_STATEMENT_EXPRESSION -> NTS_STATEMENT_EXPRESSION_2
NTS_STATEMENT_EXPRESSION_P -> TS_ADD NTS_STATEMENT_EXPRESSION
NTS_STATEMENT_EXPRESSION_P -> TS_SUBTRACT NTS_STATEMENT_EXPRESSION

NTS_STATEMENT_EXPRESSION_2 -> NTS_STATEMENT_EXPRESSION_3 NTS_STATEMENT_EXPRESSION_2P
NTS_STATEMENT_EXPRESSION_2 -> NTS_STATEMENT_EXPRESSION_3
NTS_STATEMENT_EXPRESSION_2P -> TS_MULTIPLY NTS_STATEMENT_EXPRESSION_2
NTS_STATEMENT_EXPRESSION_2P -> TS_DIVIDE NTS_STATEMENT_EXPRESSION_2

NTS_STATEMENT_EXPRESSION_3 -> TS_TERM
NTS_STATEMENT_EXPRESSION_3 -> TS_LEFT_PARENTHESIS NTS_STATEMENT_EXPRESSION TS_RIGHT_PARENTHESIS
NTS_STATEMENT_EXPRESSION_3 -> TS_SUBTRACT NTS_STATEMENT_EXPRESSION_3

# Assignment Statement
# symbol_table<String, Term>;

# symbol_table[Identifier] = Expression.eval();
NTS_STATEMENT_ASSIGNMENT -> TS_IDENTIFIER TS_EQUALS NTS_STATEMENT_EXPRESSION

# Conditional Constructs
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_STATEMENT_CONDITIONAL_TEST TS_COLON NTS_STATEMENT_SUITE
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_STATEMENT_CONDITIONAL_TEST TS_COLON NTS_STATEMENT_SUITE NTS_STATEMENT_CONDITIONAL_ELIF

NTS_STATEMENT_CONDITIONAL_ELIF -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_COLON NTS_STATEMENT_SUITE
NTS_STATEMENT_CONDITIONAL_ELIF -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_COLON NTS_STATEMENT_SUITE NTS_STATEMENT_CONDITIONAL_ELIF
NTS_STATEMENT_CONDITIONAL_ELIF -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_COLON NTS_STATEMENT_SUITE NTS_STATEMENT_CONDITIONAL_ELSE

NTS_STATEMENT_CONDITIONAL_ELSE -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_COLON NTS_STATEMENT_SUITE

# Conditional Constructs
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_ELIF

NTS_STATEMENT_CONDITIONAL_ELIF -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE
NTS_STATEMENT_CONDITIONAL_ELIF -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_ELIF
NTS_STATEMENT_CONDITIONAL_ELIF -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_ELSE

NTS_STATEMENT_CONDITIONAL_ELSE -> TS_ELIF NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE

# Conditional Test Statements
NTS_STATEMENT_CONDITIONAL_TEST -> TS_TERM NTS_OPERATOR_BINARY TS_TERM
NTS_STATEMENT_CONDITIONAL_TEST -> NTS_OPERATOR_UNARY TS_TERM
# This is the non-null test
NTS_STATEMENT_CONDITIONAL_TEST -> TS_TERM

# Operator Definitions
# <, <=, >, >=, ==, ===
NTS_OPERATOR_BINARY -> TS_LESS_THAN
NTS_OPERATOR_BINARY -> TS_LESS_THAN_EQUALS
NTS_OPERATOR_BINARY -> TS_GREATER_THAN
NTS_OPERATOR_BINARY -> TS_GREATER_THAN_EQUALS
NTS_OPERATOR_BINARY -> TS_DOUBLE_EQUALS
NTS_OPERATOR_BINARY -> TS_TRIPLE_EQUALS

# !
NTS_OPERATOR_UNARY -> TS_NOT

# This can be its own operator type or something
# NTS_OPERATOR_UNARY -> TS_NOT

# Looping Constructs
NTS_STATEMENT_LOOP -> NTS_STATEMENT_LOOP_FOR
NTS_STATEMENT_LOOP -> NTS_STATEMENT_LOOP_WHILE

# For Loop
NTS_STATEMENT_LOOP_FOR -> TS_FOR TS_IDENTIFIER TS_COMMA NTS_STATEMENT_LOOP_FOR_OPTIONS TS_NEWLINE NTS_STATEMENT
# x, 5 : for x in range(0,5)
NTS_STATEMENT_LOOP_FOR_OPTIONS -> TS_TERM
# x, 1, 5 : for x in range(1,5)
NTS_STATEMENT_LOOP_FOR_OPTIONS -> TS_TERM TS_COMMA TS_TERM
# x, 1, 5, -2: Default to +1, iteration amount
NTS_STATEMENT_LOOP_FOR_OPTIONS -> TS_TERM TS_COMMA TS_TERM TS_COMMA TS_TERM

# While Loop
NTS_STATEMENT_LOOP_WHILE -> TS_WHILE NTS_STATEMENT_CONDITIONAL_TEST TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE

# Function Definitions
NTS_STATEMENT_DEFINE_FUNCTION -> TS_DEFINE TS_IDENTIFIER TS_LEFT_PARENTHESIS NTS_FUNCTION_PARAMS TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE
NTS_FUNCTION_PARAMS -> TS_IDENTIFIER TS_COMMA NTS_FUNCTION_PARAMS
NTS_FUNCTION_PARAMS -> TS_IDENTIFIER TS_RIGHT_PARENTHESIS
NTS_FUNCTION_PARAMS -> TS_RIGHT_PARENTHESIS

# Class Definitions
NTS_STATEMENT_DEFINE_CLASS -> TS_DEFINE TS_IDENTIFIER TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE TS_RIGHT_CURLY_BRACE