#########################################
##   Extended Construction Statement   ##
#########################################

## Required by the parser, the entry point.
NTS_MANGO -> NTS_STATEMENT_SUITE

####################################
##   Block Statement Definition   ##
####################################

## Block Statement for the "Main" script
NTS_STATEMENT_SUITE -> NTS_STATEMENT_LIST TS_NEWLINE

## Block Statement to be used inside Functions / Methods / Procedures
NTS_STATEMENT_SUITE_FUNCTION -> NTS_STATEMENT_LIST_FUNCTION TS_NEWLINE

## Block Statement to be used inside Classes
NTS_STATEMENT_SUITE_CLASS -> NTS_STATEMENT_LIST_CLASS TS_NEWLINE

########################################
##   Recursive Statement Definition   ##
########################################

## Recursive Statement for the "Main" script
NTS_STATEMENT_LIST -> NTS_STATEMENT NTS_STATEMENT_LIST
NTS_STATEMENT_LIST -> NTS_STATEMENT

## Recursive Statement for the "Method / Function / Procedure"
NTS_STATEMENT_LIST_FUNCTION -> NTS_STATEMENT_LIMITED NTS_STATEMENT_LIST_FUNCTION
NTS_STATEMENT_LIST_FUNCTION -> NTS_STATEMENT_LIMITED

## Recursive Statement for the "Class"
NTS_STATEMENT_LIST_CLASS -> NTS_STATEMENT_RESTRICTED NTS_STATEMENT_LIST_CLASS
NTS_STATEMENT_LIST_CLASS -> NTS_STATEMENT_RESTRICTED


######################################
##  Wrapper Statement Definitions   ##
######################################

## Statement Wrapper for "Any" statement
NTS_STATEMENT -> NTS_STATEMENT_SIMPLE
NTS_STATEMENT -> NTS_STATEMENT_COMPLEX
NTS_STATEMENT -> NTS_STATEMENT_FUNCTION
NTS_STATEMENT -> NTS_STATEMENT_CLASS

## Statement Wrapper for "Method / Function / Procedure"
NTS_STATEMENT_LIMITED -> NTS_STATEMENT_SIMPLE
NTS_STATEMENT_LIMITED -> NTS_STATEMENT_COMPLEX

## Statement Wrapper for "Class"
NTS_STATEMENT_RESTRICTED -> NTS_STATEMENT_FUNCTION

###############################
##   Statement Definitions   ##
###############################

## Simple statements that can be included anywhere without a problem
NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_EXPRESSION
NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_ASSIGNMENT
NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_CONDITIONAL

## Complex statements that are more involved with their logic
NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_LOOP
NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_MATCH

## Function Definition
NTS_STATEMENT_FUNCTION -> TS_AT TS_IDENTIFIER TS_COLON NTS_FUNCTION_PARAMS TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE

## Recursive Function Parameters
NTS_FUNCTION_PARAMS -> NTS_FUNCTION_PARAMS TS_COMMA TS_IDENTIFIER
NTS_FUNCTION_PARAMS -> TS_IDENTIFIER

## Class Definition
NTS_STATEMENT_CLASS -> TS_AT TS_IDENTIFIER TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_CLASS TS_RIGHT_CURLY_BRACE

###############################
##   Expression Statements   ##
###############################

## Expressions for Addition and Subtraction without right recursion
NTS_STATEMENT_EXPRESSION -> NTS_STATEMENT_EXPRESSION_2 NTS_STATEMENT_EXPRESSION_P
NTS_STATEMENT_EXPRESSION -> NTS_STATEMENT_EXPRESSION_2
NTS_STATEMENT_EXPRESSION_P -> TS_ADD NTS_STATEMENT_EXPRESSION
NTS_STATEMENT_EXPRESSION_P -> TS_SUBTRACT NTS_STATEMENT_EXPRESSION

## Expressions for Multiplication, Division, and Modulo without right recursion
NTS_STATEMENT_EXPRESSION_2 -> NTS_STATEMENT_EXPRESSION_3 NTS_STATEMENT_EXPRESSION_2P
NTS_STATEMENT_EXPRESSION_2 -> NTS_STATEMENT_EXPRESSION_3
NTS_STATEMENT_EXPRESSION_2P -> TS_MULTIPLY NTS_STATEMENT_EXPRESSION_2
NTS_STATEMENT_EXPRESSION_2P -> TS_DIVIDE NTS_STATEMENT_EXPRESSION_2
NTS_STATEMENT_EXPRESSION_2P -> TS_MODULO NTS_STATEMENT_EXPRESSION_2

## Expressions for negative terms, parenthesized terms, and an ending point without right recursion
NTS_STATEMENT_EXPRESSION_3 -> TS_TERM
NTS_STATEMENT_EXPRESSION_3 -> TS_LEFT_PARENTHESIS NTS_STATEMENT_EXPRESSION TS_RIGHT_PARENTHESIS
NTS_STATEMENT_EXPRESSION_3 -> TS_SUBTRACT NTS_STATEMENT_EXPRESSION_3

##############################
##   Assignment Statement   ##
##############################

## Assignment Statement for storing variables within the symbol table
NTS_STATEMENT_ASSIGNMENT -> TS_IDENTIFIER TS_EQUALS NTS_STATEMENT_EXPRESSION

################################
##   Conditional Statements   ##
################################

## If Conditional Statement
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_2
NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_3

## Elif Conditional Statement
NTS_STATEMENT_CONDITIONAL_2 -> NTS_STATEMENT_CONDITIONAL_2 TS_ELIF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
NTS_STATEMENT_CONDITIONAL_2 -> TS_ELIF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_3

## Else Conditional Statement
NTS_STATEMENT_CONDITIONAL_3 -> TS_ELSE TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE

################################
##   Conditional Expression   ##
################################

## Conditional Statement
NTS_CONDITIONAL_EXPRESSION -> TS_TERM NTS_COMPARISON_OPERATOR TS_TERM
NTS_CONDITIONAL_EXPRESSION -> NTS_COMPARISON_OPERATOR_UNARY TS_TERM

## Binary Operators
NTS_COMPARISON_OPERATOR -> TS_LESS_THAN
NTS_COMPARISON_OPERATOR -> TS_LESS_THAN_EQUALS
NTS_COMPARISON_OPERATOR -> TS_GREATER_THAN
NTS_COMPARISON_OPERATOR -> TS_GREATER_THAN_EQUALS
NTS_COMPARISON_OPERATOR -> TS_DOUBLE_EQUALS
NTS_COMPARISON_OPERATOR -> TS_TRIPLE_EQUALS


## Unary Operators
NTS_COMPARISON_OPERATOR_UNARY -> TS_NOT

############################
##   Looping Statements   ##
############################

## Loop wrapping construct
NTS_STATEMENT_LOOP -> NTS_STATEMENT_LOOP_FOR
NTS_STATEMENT_LOOP -> NTS_STATEMENT_LOOP_WHILE

## For Loop Constructs
# Range based or integer based from 0..X
NTS_STATEMENT_LOOP_FOR -> TS_FOR TS_IDENTIFIER TS_COLON TS_TERM TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE

# Iteration based from X..Y
NTS_STATEMENT_LOOP_FOR -> TS_FOR TS_IDENTIFIER TS_COLON TS_TERM TS_ELLIPSIS TS_TERM TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE

## While Loop Construct
NTS_STATEMENT_LOOP_WHILE -> TS_WHILE NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE

##########################
##   Match Statements   ##
##########################

## Match Body Wrapper
NTS_STATEMENT_MATCH -> TS_MATCH TS_IDENTIFIER TS_LEFT_CURLY_BRACE NTS_STATEMENT_MATCH_BODY TS_RIGHT_CURLY_BRACE

## Recursive Match Conditionals
NTS_STATEMENT_MATCH_BODY -> NTS_STATEMENT_MATCH_BODY TS_COMMA NTS_STATEMENT_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
NTS_STATEMENT_MATCH_BODY -> NTS_STATEMENT_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE