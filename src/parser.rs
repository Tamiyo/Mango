use core::borrow::Borrow;
use std::collections::HashMap;
use std::ptr::null;
use std::slice::Iter;
use std::vec::Vec;

use crate::core::{ActionNode, GotoNode, LexerResult, ParserAction, PrimitiveType, TokenType};
use crate::core::TokenType::{StatementList, StatementSuite, Term};
use crate::parse_tree::{Node, NodeConditionalExpression, NodeConditionalExpressionUnary, NodeFunctionParams, NodeFunctionParamsRecursive, NodeIdentifier, NodeMango, NodeStatement, NodeStatementAssignment, NodeStatementClass, NodeStatementComplex, NodeStatementConditional, NodeStatementConditional2, NodeStatementConditional2Recursive, NodeStatementConditional3, NodeStatementConditionalW2, NodeStatementConditionalW3, NodeStatementExpression, NodeStatementExpression2, NodeStatementExpression2p, NodeStatementExpression2Recursive, NodeStatementExpression3, NodeStatementExpression3Function, NodeStatementExpression3Negation, NodeStatementExpression3Paren, NodeStatementExpressionP, NodeStatementExpressionRecursive, NodeStatementFunction, NodeStatementLimited, NodeStatementList, NodeStatementListClass, NodeStatementListClassRecursive, NodeStatementListFunction, NodeStatementListFunctionRecursive, NodeStatementListRecursive, NodeStatementRestricted, NodeStatementSimple, NodeStatementSuite, NodeStatementSuiteClass, NodeTerm};

pub struct Parser { pub token_stack: Vec<LexerResult>, pub action: HashMap<(i32, TokenType), ActionNode>, pub goto: HashMap<i32, GotoNode> }

impl Default for Parser { fn default() -> Parser { Parser { token_stack: Vec::new(), action: HashMap::new(), goto: HashMap::new() } } }

impl Parser {
    fn initialize(&mut self) {
        self.goto.insert(1, GotoNode { token_type: TokenType::StatementSuite, value: 1 });
        self.goto.insert(2, GotoNode { token_type: TokenType::StatementSuiteFunction, value: 1 });
        self.goto.insert(3, GotoNode { token_type: TokenType::StatementSuiteClass, value: 1 });
        self.goto.insert(4, GotoNode { token_type: TokenType::StatementList, value: 3 });
        self.goto.insert(5, GotoNode { token_type: TokenType::StatementList, value: 1 });
        self.goto.insert(6, GotoNode { token_type: TokenType::StatementListFunction, value: 2 });
        self.goto.insert(7, GotoNode { token_type: TokenType::StatementListFunction, value: 1 });
        self.goto.insert(8, GotoNode { token_type: TokenType::StatementListClass, value: 2 });
        self.goto.insert(9, GotoNode { token_type: TokenType::StatementListClass, value: 1 });
        self.goto.insert(10, GotoNode { token_type: TokenType::Statement, value: 1 });
        self.goto.insert(11, GotoNode { token_type: TokenType::Statement, value: 1 });
        self.goto.insert(12, GotoNode { token_type: TokenType::Statement, value: 1 });
        self.goto.insert(13, GotoNode { token_type: TokenType::Statement, value: 1 });
        self.goto.insert(14, GotoNode { token_type: TokenType::StatementLimited, value: 1 });
        self.goto.insert(15, GotoNode { token_type: TokenType::StatementLimited, value: 1 });
        self.goto.insert(16, GotoNode { token_type: TokenType::StatementRestricted, value: 1 });
        self.goto.insert(17, GotoNode { token_type: TokenType::StatementSimple, value: 1 });
        self.goto.insert(18, GotoNode { token_type: TokenType::StatementSimple, value: 1 });
        self.goto.insert(19, GotoNode { token_type: TokenType::StatementSimple, value: 1 });
        self.goto.insert(20, GotoNode { token_type: TokenType::StatementComplex, value: 1 });
        self.goto.insert(21, GotoNode { token_type: TokenType::StatementFunction, value: 7 });
        self.goto.insert(22, GotoNode { token_type: TokenType::FunctionParams, value: 3 });
        self.goto.insert(23, GotoNode { token_type: TokenType::FunctionParams, value: 1 });
        self.goto.insert(24, GotoNode { token_type: TokenType::StatementClass, value: 5 });
        self.goto.insert(25, GotoNode { token_type: TokenType::StatementExpression, value: 2 });
        self.goto.insert(26, GotoNode { token_type: TokenType::StatementExpression, value: 1 });
        self.goto.insert(27, GotoNode { token_type: TokenType::StatementExpressionP, value: 2 });
        self.goto.insert(28, GotoNode { token_type: TokenType::StatementExpressionP, value: 2 });
        self.goto.insert(29, GotoNode { token_type: TokenType::StatementExpression2, value: 2 });
        self.goto.insert(30, GotoNode { token_type: TokenType::StatementExpression2, value: 1 });
        self.goto.insert(31, GotoNode { token_type: TokenType::StatementExpression2p, value: 2 });
        self.goto.insert(32, GotoNode { token_type: TokenType::StatementExpression2p, value: 2 });
        self.goto.insert(33, GotoNode { token_type: TokenType::StatementExpression2p, value: 2 });
        self.goto.insert(34, GotoNode { token_type: TokenType::StatementExpression3, value: 1 });
        self.goto.insert(35, GotoNode { token_type: TokenType::StatementExpression3, value: 1 });
        self.goto.insert(36, GotoNode { token_type: TokenType::StatementExpression3, value: 3 });
        self.goto.insert(37, GotoNode { token_type: TokenType::StatementExpression3, value: 3 });
        self.goto.insert(38, GotoNode { token_type: TokenType::StatementExpression3, value: 2 });
        self.goto.insert(39, GotoNode { token_type: TokenType::StatementAssignment, value: 3 });
        self.goto.insert(40, GotoNode { token_type: TokenType::StatementConditional, value: 5 });
        self.goto.insert(41, GotoNode { token_type: TokenType::StatementConditional, value: 6 });
        self.goto.insert(42, GotoNode { token_type: TokenType::StatementConditional, value: 6 });
        self.goto.insert(43, GotoNode { token_type: TokenType::StatementConditional2, value: 6 });
        self.goto.insert(44, GotoNode { token_type: TokenType::StatementConditional2, value: 6 });
        self.goto.insert(45, GotoNode { token_type: TokenType::StatementConditional3, value: 4 });
        self.goto.insert(46, GotoNode { token_type: TokenType::ConditionalExpression, value: 3 });
        self.goto.insert(47, GotoNode { token_type: TokenType::ConditionalExpression, value: 2 });
        self.goto.insert(48, GotoNode { token_type: TokenType::ComparisonOperator, value: 1 });
        self.goto.insert(49, GotoNode { token_type: TokenType::ComparisonOperator, value: 1 });
        self.goto.insert(50, GotoNode { token_type: TokenType::ComparisonOperator, value: 1 });
        self.goto.insert(51, GotoNode { token_type: TokenType::ComparisonOperator, value: 1 });
        self.goto.insert(52, GotoNode { token_type: TokenType::ComparisonOperator, value: 1 });
        self.goto.insert(53, GotoNode { token_type: TokenType::ComparisonOperator, value: 1 });
        self.goto.insert(54, GotoNode { token_type: TokenType::ComparisonOperatorUnary, value: 1 });
        self.goto.insert(55, GotoNode { token_type: TokenType::StatementLoop, value: 1 });
        self.goto.insert(56, GotoNode { token_type: TokenType::StatementLoop, value: 1 });
        self.goto.insert(57, GotoNode { token_type: TokenType::StatementLoopFor, value: 7 });
        self.goto.insert(58, GotoNode { token_type: TokenType::StatementLoopFor, value: 9 });
        self.goto.insert(59, GotoNode { token_type: TokenType::StatementLoopWhile, value: 5 });
        self.action.insert((0, TokenType::StatementSuite), ActionNode { action: ParserAction::Goto, value: 1 });
        self.action.insert((0, TokenType::StatementList), ActionNode { action: ParserAction::Goto, value: 2 });
        self.action.insert((0, TokenType::Statement), ActionNode { action: ParserAction::Goto, value: 3 });
        self.action.insert((0, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 4 });
        self.action.insert((0, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 5 });
        self.action.insert((0, TokenType::StatementFunction), ActionNode { action: ParserAction::Goto, value: 6 });
        self.action.insert((0, TokenType::StatementClass), ActionNode { action: ParserAction::Goto, value: 7 });
        self.action.insert((0, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 8 });
        self.action.insert((0, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 9 });
        self.action.insert((0, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 10 });
        self.action.insert((0, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 11 });
        self.action.insert((0, TokenType::At), ActionNode { action: ParserAction::Shift, value: 12 });
        self.action.insert((0, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 14 });
        self.action.insert((0, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 13 });
        self.action.insert((0, TokenType::If), ActionNode { action: ParserAction::Shift, value: 19 });
        self.action.insert((0, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 20 });
        self.action.insert((0, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 21 });
        self.action.insert((0, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 16 });
        self.action.insert((0, TokenType::For), ActionNode { action: ParserAction::Shift, value: 22 });
        self.action.insert((0, TokenType::While), ActionNode { action: ParserAction::Shift, value: 23 });
        self.action.insert((0, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((0, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((0, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((1, TokenType::EndOfFile), ActionNode { action: ParserAction::Accept, value: -1 });
        self.action.insert((2, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 1 });
        self.action.insert((3, TokenType::Newline), ActionNode { action: ParserAction::Shift, value: 24 });
        self.action.insert((3, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 5 });
        self.action.insert((4, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 10 });
        self.action.insert((4, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 10 });
        self.action.insert((5, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 11 });
        self.action.insert((5, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 11 });
        self.action.insert((6, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 12 });
        self.action.insert((6, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 12 });
        self.action.insert((7, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 13 });
        self.action.insert((7, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 13 });
        self.action.insert((8, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((8, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((9, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((9, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((10, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((10, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((11, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((11, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((12, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 25 });
        self.action.insert((13, TokenType::Equals), ActionNode { action: ParserAction::Shift, value: 27 });
        self.action.insert((13, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((13, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((13, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((13, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 26 });
        self.action.insert((13, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((13, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((13, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((13, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((14, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 28 });
        self.action.insert((14, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((14, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((14, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 29 });
        self.action.insert((14, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 30 });
        self.action.insert((15, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 32 });
        self.action.insert((15, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((15, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 31 });
        self.action.insert((15, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((15, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((16, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 33 });
        self.action.insert((16, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((16, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((16, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((16, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((16, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 34 });
        self.action.insert((16, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 35 });
        self.action.insert((16, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 36 });
        self.action.insert((17, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((17, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((17, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((17, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((17, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((17, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((17, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((18, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 37 });
        self.action.insert((18, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((18, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((18, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((18, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((18, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((18, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((19, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 51 });
        self.action.insert((19, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((19, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((19, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((19, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((19, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((19, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((19, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((19, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((19, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((20, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((20, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((21, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((21, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((22, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 54 });
        self.action.insert((23, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 55 });
        self.action.insert((23, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((23, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((23, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((23, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((23, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((23, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((23, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((23, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((23, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((24, TokenType::StatementList), ActionNode { action: ParserAction::Goto, value: 56 });
        self.action.insert((24, TokenType::Statement), ActionNode { action: ParserAction::Goto, value: 3 });
        self.action.insert((24, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 4 });
        self.action.insert((24, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 5 });
        self.action.insert((24, TokenType::StatementFunction), ActionNode { action: ParserAction::Goto, value: 6 });
        self.action.insert((24, TokenType::StatementClass), ActionNode { action: ParserAction::Goto, value: 7 });
        self.action.insert((24, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 8 });
        self.action.insert((24, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 9 });
        self.action.insert((24, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 10 });
        self.action.insert((24, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 11 });
        self.action.insert((24, TokenType::At), ActionNode { action: ParserAction::Shift, value: 12 });
        self.action.insert((24, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 14 });
        self.action.insert((24, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 13 });
        self.action.insert((24, TokenType::If), ActionNode { action: ParserAction::Shift, value: 19 });
        self.action.insert((24, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 20 });
        self.action.insert((24, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 21 });
        self.action.insert((24, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 16 });
        self.action.insert((24, TokenType::For), ActionNode { action: ParserAction::Shift, value: 22 });
        self.action.insert((24, TokenType::While), ActionNode { action: ParserAction::Shift, value: 23 });
        self.action.insert((24, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((24, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((24, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((25, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 57 });
        self.action.insert((25, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 58 });
        self.action.insert((26, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 61 });
        self.action.insert((26, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 59 });
        self.action.insert((26, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 62 });
        self.action.insert((26, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 64 });
        self.action.insert((26, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((26, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((26, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((26, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((27, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 67 });
        self.action.insert((27, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 14 });
        self.action.insert((27, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 16 });
        self.action.insert((27, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((27, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 68 });
        self.action.insert((27, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((27, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((28, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((28, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((29, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 69 });
        self.action.insert((29, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 14 });
        self.action.insert((29, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 16 });
        self.action.insert((29, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((29, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 68 });
        self.action.insert((29, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((29, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((30, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 70 });
        self.action.insert((30, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 14 });
        self.action.insert((30, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 16 });
        self.action.insert((30, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((30, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 68 });
        self.action.insert((30, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((30, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((31, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((31, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 26 });
        self.action.insert((31, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((31, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((31, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((31, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((31, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((31, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((32, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((32, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((32, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((32, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((32, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((32, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((32, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((33, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((33, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((33, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((33, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((34, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 71 });
        self.action.insert((34, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 72 });
        self.action.insert((34, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((34, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 68 });
        self.action.insert((34, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((34, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((35, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 73 });
        self.action.insert((35, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 72 });
        self.action.insert((35, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((35, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 68 });
        self.action.insert((35, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((35, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((36, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 74 });
        self.action.insert((36, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 72 });
        self.action.insert((36, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 17 });
        self.action.insert((36, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 68 });
        self.action.insert((36, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 18 });
        self.action.insert((36, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 15 });
        self.action.insert((37, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 75 });
        self.action.insert((38, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((38, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((38, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((38, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 76 });
        self.action.insert((38, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((38, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((38, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((39, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 77 });
        self.action.insert((39, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((39, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 78 });
        self.action.insert((39, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 79 });
        self.action.insert((40, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 81 });
        self.action.insert((40, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((40, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 80 });
        self.action.insert((40, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((40, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((41, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 82 });
        self.action.insert((41, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((41, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((41, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((41, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 83 });
        self.action.insert((41, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 84 });
        self.action.insert((41, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 85 });
        self.action.insert((42, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((42, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((42, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((42, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((42, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((42, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((43, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 86 });
        self.action.insert((43, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((43, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((43, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((43, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((43, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((43, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((44, TokenType::ComparisonOperator), ActionNode { action: ParserAction::Goto, value: 87 });
        self.action.insert((44, TokenType::LessThan), ActionNode { action: ParserAction::Shift, value: 88 });
        self.action.insert((44, TokenType::LessThanEquals), ActionNode { action: ParserAction::Shift, value: 89 });
        self.action.insert((44, TokenType::GreaterThan), ActionNode { action: ParserAction::Shift, value: 90 });
        self.action.insert((44, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Shift, value: 91 });
        self.action.insert((44, TokenType::DoubleEquals), ActionNode { action: ParserAction::Shift, value: 92 });
        self.action.insert((44, TokenType::TripleEquals), ActionNode { action: ParserAction::Shift, value: 93 });
        self.action.insert((45, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 94 });
        self.action.insert((45, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((45, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((46, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 95 });
        self.action.insert((46, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((46, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((46, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((46, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((46, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((46, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((46, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 96 });
        self.action.insert((46, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 97 });
        self.action.insert((47, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 99 });
        self.action.insert((47, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((47, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 98 });
        self.action.insert((47, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((47, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((48, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 100 });
        self.action.insert((48, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((48, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 101 });
        self.action.insert((48, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 102 });
        self.action.insert((48, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 103 });
        self.action.insert((49, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((49, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((50, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 104 });
        self.action.insert((50, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((50, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((50, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((50, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((50, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((50, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((51, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 105 });
        self.action.insert((52, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 106 });
        self.action.insert((52, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 108 });
        self.action.insert((52, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 110 });
        self.action.insert((52, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((52, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((52, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((52, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((53, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 54 });
        self.action.insert((53, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 54 });
        self.action.insert((53, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 54 });
        self.action.insert((53, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 54 });
        self.action.insert((54, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 113 });
        self.action.insert((55, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 114 });
        self.action.insert((56, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 4 });
        self.action.insert((57, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 117 });
        self.action.insert((57, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 115 });
        self.action.insert((57, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 118 });
        self.action.insert((57, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 120 });
        self.action.insert((57, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((57, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((57, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((57, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((58, TokenType::StatementSuiteClass), ActionNode { action: ParserAction::Goto, value: 123 });
        self.action.insert((58, TokenType::StatementListClass), ActionNode { action: ParserAction::Goto, value: 124 });
        self.action.insert((58, TokenType::StatementRestricted), ActionNode { action: ParserAction::Goto, value: 125 });
        self.action.insert((58, TokenType::StatementFunction), ActionNode { action: ParserAction::Goto, value: 126 });
        self.action.insert((58, TokenType::At), ActionNode { action: ParserAction::Shift, value: 127 });
        self.action.insert((59, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((59, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((60, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 128 });
        self.action.insert((60, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((60, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((61, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((61, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 129 });
        self.action.insert((62, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 130 });
        self.action.insert((62, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((62, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((62, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((62, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 132 });
        self.action.insert((62, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 131 });
        self.action.insert((62, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((62, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((62, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((63, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 134 });
        self.action.insert((63, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((63, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 133 });
        self.action.insert((63, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((63, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((64, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 135 });
        self.action.insert((64, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((64, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((64, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 138 });
        self.action.insert((64, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 137 });
        self.action.insert((64, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 136 });
        self.action.insert((64, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((64, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((64, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((65, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((65, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((66, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 139 });
        self.action.insert((66, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((66, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((66, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((66, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((66, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((66, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((67, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((67, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((68, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((68, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((68, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((68, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 26 });
        self.action.insert((68, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((68, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((68, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((68, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((69, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((69, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((70, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((70, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((71, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((71, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((71, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((71, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((72, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 33 });
        self.action.insert((72, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((72, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((72, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((72, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((72, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 34 });
        self.action.insert((72, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 35 });
        self.action.insert((72, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 36 });
        self.action.insert((73, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((73, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((73, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((73, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((74, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((74, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((74, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((74, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((75, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((75, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((75, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((75, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((75, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((75, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((75, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((76, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 142 });
        self.action.insert((76, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 140 });
        self.action.insert((76, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 143 });
        self.action.insert((76, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 145 });
        self.action.insert((76, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((76, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((76, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((76, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((77, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((78, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 148 });
        self.action.insert((78, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((78, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((78, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((78, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((78, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((78, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((79, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 149 });
        self.action.insert((79, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((79, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((79, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((79, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((79, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((79, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((80, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((80, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 76 });
        self.action.insert((80, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((80, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((80, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((80, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((80, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((81, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((81, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((81, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((81, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((81, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((81, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((82, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((82, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((82, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((83, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 150 });
        self.action.insert((83, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 151 });
        self.action.insert((83, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((83, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((83, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((83, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((84, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 152 });
        self.action.insert((84, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 151 });
        self.action.insert((84, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((84, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((84, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((84, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((85, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 153 });
        self.action.insert((85, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 151 });
        self.action.insert((85, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((85, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((85, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((85, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((86, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 154 });
        self.action.insert((87, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 155 });
        self.action.insert((87, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 108 });
        self.action.insert((87, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 110 });
        self.action.insert((87, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((87, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((87, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((87, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((88, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 48 });
        self.action.insert((88, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 48 });
        self.action.insert((88, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 48 });
        self.action.insert((88, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 48 });
        self.action.insert((89, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 49 });
        self.action.insert((89, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 49 });
        self.action.insert((89, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 49 });
        self.action.insert((89, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 49 });
        self.action.insert((90, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 50 });
        self.action.insert((90, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 50 });
        self.action.insert((90, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 50 });
        self.action.insert((90, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 50 });
        self.action.insert((91, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 51 });
        self.action.insert((91, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 51 });
        self.action.insert((91, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 51 });
        self.action.insert((91, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 51 });
        self.action.insert((92, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 52 });
        self.action.insert((92, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 52 });
        self.action.insert((92, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 52 });
        self.action.insert((92, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 52 });
        self.action.insert((93, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 53 });
        self.action.insert((93, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 53 });
        self.action.insert((93, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 53 });
        self.action.insert((93, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 53 });
        self.action.insert((94, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 158 });
        self.action.insert((94, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 156 });
        self.action.insert((94, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 159 });
        self.action.insert((94, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 161 });
        self.action.insert((94, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((94, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((94, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((94, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((95, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((95, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((95, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((95, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((95, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((95, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((96, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 164 });
        self.action.insert((96, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 165 });
        self.action.insert((96, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((96, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((96, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((96, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((96, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((97, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 166 });
        self.action.insert((97, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 165 });
        self.action.insert((97, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((97, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((97, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((97, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((97, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((98, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 94 });
        self.action.insert((98, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((98, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((99, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((99, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((100, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((100, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((101, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 167 });
        self.action.insert((101, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 168 });
        self.action.insert((101, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((101, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((101, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((101, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((102, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 169 });
        self.action.insert((102, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 168 });
        self.action.insert((102, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((102, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((102, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((102, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((103, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 170 });
        self.action.insert((103, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 168 });
        self.action.insert((103, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((103, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((103, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((103, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((104, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 171 });
        self.action.insert((105, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 172 });
        self.action.insert((105, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((105, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((105, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((105, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((105, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((105, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((105, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((105, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((105, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((105, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((105, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((105, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((105, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((105, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((105, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((105, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((105, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((105, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((105, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((106, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 47 });
        self.action.insert((107, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((107, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((107, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((107, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 192 });
        self.action.insert((107, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((107, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((107, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((108, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 193 });
        self.action.insert((108, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((108, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 194 });
        self.action.insert((108, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 195 });
        self.action.insert((109, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 197 });
        self.action.insert((109, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((109, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 196 });
        self.action.insert((109, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((109, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((110, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 198 });
        self.action.insert((110, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((110, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((110, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((110, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 199 });
        self.action.insert((110, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 200 });
        self.action.insert((110, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 201 });
        self.action.insert((111, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((111, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((111, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((111, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((111, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((111, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((112, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 202 });
        self.action.insert((112, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((112, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((112, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((112, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((112, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((112, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((113, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 203 });
        self.action.insert((113, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 205 });
        self.action.insert((113, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 207 });
        self.action.insert((113, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((113, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((113, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((113, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((114, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 210 });
        self.action.insert((114, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((114, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((114, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((114, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((114, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((114, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((114, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((114, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((114, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((114, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((114, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((114, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((114, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((114, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((114, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((114, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((114, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((114, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((114, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((115, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((115, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((116, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((116, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((116, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((116, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 211 });
        self.action.insert((116, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((116, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((116, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((116, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((117, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 212 });
        self.action.insert((117, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 213 });
        self.action.insert((118, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 214 });
        self.action.insert((118, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((118, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((118, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 215 });
        self.action.insert((118, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 216 });
        self.action.insert((119, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 218 });
        self.action.insert((119, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((119, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 217 });
        self.action.insert((119, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((119, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((120, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 219 });
        self.action.insert((120, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((120, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((120, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((120, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((120, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 220 });
        self.action.insert((120, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 221 });
        self.action.insert((120, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 222 });
        self.action.insert((121, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((121, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((121, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((121, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((121, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((121, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((121, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((122, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 223 });
        self.action.insert((122, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((122, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((122, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((122, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((122, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((122, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((123, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 224 });
        self.action.insert((124, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 3 });
        self.action.insert((125, TokenType::StatementListClass), ActionNode { action: ParserAction::Goto, value: 225 });
        self.action.insert((125, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 9 });
        self.action.insert((125, TokenType::StatementRestricted), ActionNode { action: ParserAction::Goto, value: 125 });
        self.action.insert((125, TokenType::StatementFunction), ActionNode { action: ParserAction::Goto, value: 126 });
        self.action.insert((125, TokenType::At), ActionNode { action: ParserAction::Shift, value: 127 });
        self.action.insert((126, TokenType::At), ActionNode { action: ParserAction::Reduce, value: 16 });
        self.action.insert((126, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 16 });
        self.action.insert((127, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 226 });
        self.action.insert((128, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 227 });
        self.action.insert((128, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 59 });
        self.action.insert((128, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 62 });
        self.action.insert((128, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 64 });
        self.action.insert((128, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((128, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((128, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((128, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((129, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 228 });
        self.action.insert((129, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 62 });
        self.action.insert((129, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 64 });
        self.action.insert((129, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((129, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((129, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((129, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((130, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((130, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((131, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 229 });
        self.action.insert((131, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 62 });
        self.action.insert((131, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 64 });
        self.action.insert((131, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((131, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((131, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((131, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((132, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 230 });
        self.action.insert((132, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 62 });
        self.action.insert((132, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 64 });
        self.action.insert((132, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((132, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((132, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((132, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((133, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 128 });
        self.action.insert((133, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((133, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((134, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((134, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((135, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((135, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((136, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 231 });
        self.action.insert((136, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 232 });
        self.action.insert((136, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((136, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((136, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((136, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((137, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 233 });
        self.action.insert((137, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 232 });
        self.action.insert((137, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((137, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((137, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((137, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((138, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 234 });
        self.action.insert((138, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 232 });
        self.action.insert((138, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 65 });
        self.action.insert((138, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 60 });
        self.action.insert((138, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 66 });
        self.action.insert((138, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 63 });
        self.action.insert((139, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 235 });
        self.action.insert((140, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((140, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((140, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((140, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((140, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((140, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((140, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((141, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((141, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((141, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((141, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 236 });
        self.action.insert((141, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((141, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((141, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((141, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((142, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((142, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((142, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((142, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((142, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((142, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((142, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 237 });
        self.action.insert((143, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 238 });
        self.action.insert((143, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((143, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((143, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((143, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 240 });
        self.action.insert((143, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 239 });
        self.action.insert((143, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((143, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((144, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 242 });
        self.action.insert((144, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((144, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 241 });
        self.action.insert((144, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((144, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((145, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 243 });
        self.action.insert((145, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((145, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((145, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 246 });
        self.action.insert((145, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 245 });
        self.action.insert((145, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 244 });
        self.action.insert((145, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((145, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((146, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((146, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((146, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((146, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((146, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((146, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((146, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((147, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 247 });
        self.action.insert((147, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((147, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((147, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((147, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((147, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((147, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((148, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((149, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((150, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((150, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((150, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((151, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 82 });
        self.action.insert((151, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((151, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((151, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((151, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 83 });
        self.action.insert((151, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 84 });
        self.action.insert((151, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 85 });
        self.action.insert((152, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((152, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((152, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((153, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((153, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((153, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((154, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((154, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((154, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((154, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((154, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((154, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((155, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 46 });
        self.action.insert((156, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((156, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((157, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 248 });
        self.action.insert((157, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((157, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((158, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((158, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 249 });
        self.action.insert((159, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 250 });
        self.action.insert((159, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 252 });
        self.action.insert((159, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 251 });
        self.action.insert((159, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((159, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((160, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 254 });
        self.action.insert((160, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((160, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 253 });
        self.action.insert((160, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((160, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((161, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 255 });
        self.action.insert((161, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 258 });
        self.action.insert((161, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 257 });
        self.action.insert((161, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 256 });
        self.action.insert((161, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((161, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((162, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((162, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((163, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 259 });
        self.action.insert((163, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((163, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((163, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((163, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((163, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((163, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((164, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((164, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((164, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((164, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((164, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((164, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((165, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 95 });
        self.action.insert((165, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((165, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((165, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((165, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((165, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((165, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((165, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 96 });
        self.action.insert((165, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 97 });
        self.action.insert((166, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((166, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((166, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((166, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((166, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((166, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((167, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((167, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((168, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 100 });
        self.action.insert((168, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((168, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 101 });
        self.action.insert((168, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 102 });
        self.action.insert((168, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 103 });
        self.action.insert((169, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((169, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((170, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((170, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((171, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((171, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((172, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 260 });
        self.action.insert((173, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 2 });
        self.action.insert((174, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 261 });
        self.action.insert((174, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 7 });
        self.action.insert((174, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((174, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((174, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((174, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((174, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((174, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((174, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((174, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((174, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((174, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((174, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((174, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((174, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((174, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((174, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((174, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((174, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((174, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((175, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((175, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 14 });
        self.action.insert((176, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((176, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 15 });
        self.action.insert((177, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((177, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 17 });
        self.action.insert((178, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((178, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 18 });
        self.action.insert((179, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((179, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 19 });
        self.action.insert((180, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((180, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 20 });
        self.action.insert((181, TokenType::Equals), ActionNode { action: ParserAction::Shift, value: 263 });
        self.action.insert((181, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 262 });
        self.action.insert((181, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((181, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((182, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 264 });
        self.action.insert((182, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 266 });
        self.action.insert((182, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((182, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 265 });
        self.action.insert((183, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 268 });
        self.action.insert((183, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((183, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 267 });
        self.action.insert((183, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((183, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((184, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 269 });
        self.action.insert((184, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((184, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 270 });
        self.action.insert((184, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 271 });
        self.action.insert((184, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 272 });
        self.action.insert((185, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((185, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((186, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 273 });
        self.action.insert((186, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((186, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((186, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((186, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((186, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((186, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((187, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 274 });
        self.action.insert((187, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((187, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((187, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((187, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((187, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((187, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((187, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((187, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((187, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((188, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((188, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 55 });
        self.action.insert((189, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((189, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 56 });
        self.action.insert((190, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 275 });
        self.action.insert((191, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 276 });
        self.action.insert((191, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((191, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((191, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((191, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((191, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((191, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((191, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((191, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((191, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((192, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 278 });
        self.action.insert((192, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 277 });
        self.action.insert((192, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 279 });
        self.action.insert((192, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 280 });
        self.action.insert((192, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((192, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((192, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((192, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((193, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((194, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 281 });
        self.action.insert((194, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 108 });
        self.action.insert((194, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 110 });
        self.action.insert((194, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((194, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((194, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((194, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((195, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 282 });
        self.action.insert((195, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 108 });
        self.action.insert((195, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 110 });
        self.action.insert((195, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((195, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((195, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((195, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((196, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((196, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 192 });
        self.action.insert((196, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((196, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((196, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((196, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((196, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((197, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((197, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((197, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((197, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((197, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((197, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((198, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((198, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((198, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((199, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 283 });
        self.action.insert((199, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 284 });
        self.action.insert((199, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((199, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((199, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((199, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((200, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 285 });
        self.action.insert((200, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 284 });
        self.action.insert((200, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((200, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((200, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((200, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((201, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 286 });
        self.action.insert((201, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 284 });
        self.action.insert((201, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((201, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((201, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((201, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((202, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 287 });
        self.action.insert((203, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 288 });
        self.action.insert((203, TokenType::Ellipsis), ActionNode { action: ParserAction::Shift, value: 289 });
        self.action.insert((204, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((204, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((204, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((204, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 290 });
        self.action.insert((204, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((204, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((204, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((204, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((205, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 291 });
        self.action.insert((205, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((205, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((205, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 292 });
        self.action.insert((205, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 293 });
        self.action.insert((206, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 295 });
        self.action.insert((206, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((206, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 294 });
        self.action.insert((206, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((206, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((207, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 296 });
        self.action.insert((207, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((207, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((207, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((207, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((207, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 297 });
        self.action.insert((207, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 298 });
        self.action.insert((207, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 299 });
        self.action.insert((208, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((208, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((208, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((208, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((208, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((208, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((208, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((209, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 300 });
        self.action.insert((209, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((209, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((209, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((209, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((209, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((209, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((210, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 301 });
        self.action.insert((211, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 302 });
        self.action.insert((211, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 277 });
        self.action.insert((211, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 279 });
        self.action.insert((211, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 280 });
        self.action.insert((211, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((211, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((211, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((211, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((212, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 303 });
        self.action.insert((212, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((212, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((212, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((212, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((212, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((212, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((212, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((212, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((212, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((212, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((212, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((212, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((212, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((212, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((212, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((212, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((212, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((212, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((212, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((213, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 304 });
        self.action.insert((213, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 118 });
        self.action.insert((213, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 120 });
        self.action.insert((213, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((213, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((213, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((213, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((214, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((214, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((215, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 305 });
        self.action.insert((215, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 118 });
        self.action.insert((215, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 120 });
        self.action.insert((215, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((215, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((215, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((215, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((216, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 306 });
        self.action.insert((216, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 118 });
        self.action.insert((216, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 120 });
        self.action.insert((216, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((216, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((216, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((216, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((217, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((217, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 211 });
        self.action.insert((217, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((217, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((217, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((217, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((217, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((217, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((218, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((218, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((218, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((218, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((218, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((218, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((218, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((219, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((219, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((219, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((219, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((220, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 307 });
        self.action.insert((220, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 308 });
        self.action.insert((220, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((220, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((220, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((220, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((221, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 309 });
        self.action.insert((221, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 308 });
        self.action.insert((221, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((221, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((221, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((221, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((222, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 310 });
        self.action.insert((222, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 308 });
        self.action.insert((222, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((222, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((222, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((222, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((223, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 311 });
        self.action.insert((224, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 24 });
        self.action.insert((224, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 24 });
        self.action.insert((225, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 8 });
        self.action.insert((226, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 312 });
        self.action.insert((227, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((227, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 129 });
        self.action.insert((228, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((228, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((229, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((229, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((230, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((230, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((231, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((231, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((232, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 135 });
        self.action.insert((232, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((232, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((232, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 138 });
        self.action.insert((232, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 137 });
        self.action.insert((232, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 136 });
        self.action.insert((232, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((232, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((232, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((233, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((233, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((234, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((234, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((235, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((235, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((236, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 313 });
        self.action.insert((236, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 140 });
        self.action.insert((236, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 143 });
        self.action.insert((236, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 145 });
        self.action.insert((236, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((236, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((236, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((236, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((237, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 314 });
        self.action.insert((237, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 143 });
        self.action.insert((237, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 145 });
        self.action.insert((237, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((237, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((237, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((237, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((238, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((238, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((238, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((238, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((238, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((238, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((238, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((239, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 315 });
        self.action.insert((239, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 143 });
        self.action.insert((239, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 145 });
        self.action.insert((239, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((239, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((239, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((239, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((240, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 316 });
        self.action.insert((240, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 143 });
        self.action.insert((240, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 145 });
        self.action.insert((240, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((240, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((240, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((240, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((241, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((241, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 236 });
        self.action.insert((241, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((241, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((241, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((241, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((241, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((241, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((242, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((242, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((242, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((242, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((242, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((242, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((242, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((243, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((243, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((243, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((243, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((243, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((243, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((243, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((244, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 317 });
        self.action.insert((244, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 318 });
        self.action.insert((244, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((244, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((244, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((244, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((245, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 319 });
        self.action.insert((245, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 318 });
        self.action.insert((245, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((245, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((245, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((245, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((246, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 320 });
        self.action.insert((246, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 318 });
        self.action.insert((246, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 146 });
        self.action.insert((246, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 141 });
        self.action.insert((246, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 147 });
        self.action.insert((246, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 144 });
        self.action.insert((247, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 321 });
        self.action.insert((248, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 322 });
        self.action.insert((248, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 156 });
        self.action.insert((248, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 159 });
        self.action.insert((248, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 161 });
        self.action.insert((248, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((248, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((248, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((248, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((249, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 323 });
        self.action.insert((249, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 159 });
        self.action.insert((249, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 161 });
        self.action.insert((249, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((249, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((249, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((249, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((250, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((250, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((251, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 324 });
        self.action.insert((251, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 159 });
        self.action.insert((251, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 161 });
        self.action.insert((251, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((251, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((251, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((251, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((252, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 325 });
        self.action.insert((252, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 159 });
        self.action.insert((252, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 161 });
        self.action.insert((252, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((252, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((252, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((252, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((253, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 248 });
        self.action.insert((253, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((253, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((254, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((254, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((255, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((255, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((256, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 326 });
        self.action.insert((256, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 327 });
        self.action.insert((256, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((256, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((256, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((256, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((257, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 328 });
        self.action.insert((257, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 327 });
        self.action.insert((257, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((257, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((257, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((257, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((258, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 329 });
        self.action.insert((258, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 327 });
        self.action.insert((258, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 162 });
        self.action.insert((258, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 157 });
        self.action.insert((258, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 163 });
        self.action.insert((258, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 160 });
        self.action.insert((259, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 330 });
        self.action.insert((260, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((260, TokenType::StatementConditional2), ActionNode { action: ParserAction::Goto, value: 331 });
        self.action.insert((260, TokenType::StatementConditional3), ActionNode { action: ParserAction::Goto, value: 332 });
        self.action.insert((260, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((260, TokenType::Elif), ActionNode { action: ParserAction::Shift, value: 333 });
        self.action.insert((260, TokenType::Else), ActionNode { action: ParserAction::Shift, value: 334 });
        self.action.insert((261, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 6 });
        self.action.insert((262, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 337 });
        self.action.insert((262, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 335 });
        self.action.insert((262, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 338 });
        self.action.insert((262, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 340 });
        self.action.insert((262, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((262, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((262, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((262, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((263, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 343 });
        self.action.insert((263, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((263, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((263, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((263, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 344 });
        self.action.insert((263, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((263, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((264, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((264, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((265, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 345 });
        self.action.insert((265, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((265, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((265, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((265, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 344 });
        self.action.insert((265, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((265, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((266, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 346 });
        self.action.insert((266, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((266, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((266, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((266, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 344 });
        self.action.insert((266, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((266, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((267, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 262 });
        self.action.insert((267, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((267, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((268, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((268, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((269, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((269, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((270, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 347 });
        self.action.insert((270, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 348 });
        self.action.insert((270, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((270, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 344 });
        self.action.insert((270, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((270, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((271, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 349 });
        self.action.insert((271, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 348 });
        self.action.insert((271, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((271, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 344 });
        self.action.insert((271, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((271, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((272, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 350 });
        self.action.insert((272, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 348 });
        self.action.insert((272, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((272, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 344 });
        self.action.insert((272, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((272, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((273, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 351 });
        self.action.insert((274, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 352 });
        self.action.insert((275, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 353 });
        self.action.insert((276, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 354 });
        self.action.insert((277, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((277, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((277, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((277, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((277, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((277, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((277, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((278, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((278, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((278, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((278, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((278, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((278, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((278, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 355 });
        self.action.insert((279, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 356 });
        self.action.insert((279, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((279, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((279, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((279, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 358 });
        self.action.insert((279, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 357 });
        self.action.insert((279, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((279, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((280, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 359 });
        self.action.insert((280, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((280, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((280, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 362 });
        self.action.insert((280, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 361 });
        self.action.insert((280, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 360 });
        self.action.insert((280, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((280, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((281, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((282, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((283, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((283, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((283, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((284, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 198 });
        self.action.insert((284, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((284, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((284, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((284, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 199 });
        self.action.insert((284, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 200 });
        self.action.insert((284, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 201 });
        self.action.insert((285, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((285, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((285, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((286, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((286, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((286, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((287, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((287, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((287, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((287, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((287, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((287, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((288, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 363 });
        self.action.insert((288, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((288, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((288, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((288, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((288, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((288, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((288, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((288, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((288, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((288, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((288, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((288, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((288, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((288, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((288, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((288, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((288, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((288, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((288, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((289, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 364 });
        self.action.insert((289, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 108 });
        self.action.insert((289, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 110 });
        self.action.insert((289, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((289, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((289, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((289, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((290, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 367 });
        self.action.insert((290, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 365 });
        self.action.insert((290, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 368 });
        self.action.insert((290, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 370 });
        self.action.insert((290, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((290, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((290, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((290, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((291, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((291, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((292, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 373 });
        self.action.insert((292, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 205 });
        self.action.insert((292, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 207 });
        self.action.insert((292, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((292, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((292, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((292, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((293, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 374 });
        self.action.insert((293, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 205 });
        self.action.insert((293, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 207 });
        self.action.insert((293, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((293, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((293, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((293, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((294, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((294, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 290 });
        self.action.insert((294, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((294, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((294, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((294, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((294, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((294, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((295, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((295, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((295, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((295, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((295, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((295, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((295, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((296, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((296, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((296, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((296, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((297, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 375 });
        self.action.insert((297, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 376 });
        self.action.insert((297, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((297, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((297, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((297, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((298, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 377 });
        self.action.insert((298, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 376 });
        self.action.insert((298, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((298, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((298, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((298, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((299, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 378 });
        self.action.insert((299, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 376 });
        self.action.insert((299, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((299, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((299, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((299, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((300, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 379 });
        self.action.insert((301, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((301, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((302, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((302, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((302, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((302, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((302, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((302, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((302, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 355 });
        self.action.insert((303, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 380 });
        self.action.insert((304, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((304, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((305, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((305, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((306, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((306, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((307, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((307, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((307, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((307, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((308, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 219 });
        self.action.insert((308, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((308, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((308, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((308, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((308, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 220 });
        self.action.insert((308, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 221 });
        self.action.insert((308, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 222 });
        self.action.insert((309, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((309, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((309, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((309, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((310, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((310, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((310, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((310, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((311, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((311, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((311, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((311, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((311, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((311, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((311, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((312, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 381 });
        self.action.insert((312, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 115 });
        self.action.insert((312, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 118 });
        self.action.insert((312, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 120 });
        self.action.insert((312, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((312, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((312, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((312, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((313, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((313, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((313, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((313, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((313, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((313, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((313, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 237 });
        self.action.insert((314, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((314, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((314, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((314, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((314, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((314, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((314, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((315, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((315, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((315, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((315, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((315, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((315, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((315, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((316, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((316, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((316, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((316, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((316, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((316, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((316, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((317, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((317, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((317, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((317, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((317, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((317, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((317, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((318, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 243 });
        self.action.insert((318, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((318, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((318, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 246 });
        self.action.insert((318, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 245 });
        self.action.insert((318, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 244 });
        self.action.insert((318, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((318, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((319, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((319, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((319, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((319, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((319, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((319, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((319, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((320, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((320, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((320, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((320, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((320, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((320, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((320, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((321, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((321, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((321, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((321, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((321, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((321, TokenType::RightParenthesis), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((321, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((322, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((322, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 249 });
        self.action.insert((323, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((323, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((324, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((324, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((325, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((325, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((326, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((326, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((327, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 255 });
        self.action.insert((327, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 258 });
        self.action.insert((327, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 257 });
        self.action.insert((327, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 256 });
        self.action.insert((327, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((327, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((328, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((328, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((329, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((329, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((330, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::TripleEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::DoubleEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::GreaterThanEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::GreaterThan), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::LessThanEquals), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::LessThan), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((330, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((331, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((331, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((331, TokenType::Elif), ActionNode { action: ParserAction::Shift, value: 382 });
        self.action.insert((332, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((332, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((333, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 383 });
        self.action.insert((333, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((333, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((333, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((333, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((333, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((333, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((333, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((333, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((333, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((334, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 384 });
        self.action.insert((335, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((335, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((336, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 385 });
        self.action.insert((336, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((336, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((337, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((337, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 386 });
        self.action.insert((338, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 387 });
        self.action.insert((338, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 389 });
        self.action.insert((338, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 388 });
        self.action.insert((338, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((338, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((339, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 391 });
        self.action.insert((339, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((339, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 390 });
        self.action.insert((339, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((339, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((340, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 392 });
        self.action.insert((340, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 395 });
        self.action.insert((340, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 394 });
        self.action.insert((340, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 393 });
        self.action.insert((340, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((340, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((341, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((341, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((342, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 396 });
        self.action.insert((342, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((342, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((342, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((342, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((342, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((342, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((343, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((343, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 39 });
        self.action.insert((344, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 262 });
        self.action.insert((344, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((344, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((345, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((345, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((346, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((346, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((347, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((347, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((348, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 269 });
        self.action.insert((348, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((348, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 270 });
        self.action.insert((348, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 271 });
        self.action.insert((348, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 272 });
        self.action.insert((349, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((349, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((350, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((350, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((351, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((351, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((352, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 397 });
        self.action.insert((352, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((352, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((352, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((352, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((352, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((352, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((352, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((352, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((352, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((352, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((352, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((352, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((352, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((352, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((352, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((352, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((352, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((352, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((352, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((353, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 398 });
        self.action.insert((353, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 205 });
        self.action.insert((353, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 207 });
        self.action.insert((353, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 208 });
        self.action.insert((353, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 204 });
        self.action.insert((353, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 209 });
        self.action.insert((353, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 206 });
        self.action.insert((354, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 399 });
        self.action.insert((354, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((354, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((354, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((354, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((354, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((354, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((354, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((354, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((354, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((354, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((354, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((354, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((354, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((354, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((354, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((354, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((354, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((354, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((354, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((355, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 400 });
        self.action.insert((355, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 279 });
        self.action.insert((355, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 280 });
        self.action.insert((355, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((355, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((355, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((355, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((356, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((356, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((356, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((356, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((356, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((356, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((356, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((357, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 401 });
        self.action.insert((357, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 279 });
        self.action.insert((357, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 280 });
        self.action.insert((357, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((357, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((357, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((357, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((358, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 402 });
        self.action.insert((358, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 279 });
        self.action.insert((358, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 280 });
        self.action.insert((358, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((358, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((358, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((358, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((359, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((359, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((359, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((359, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((359, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((359, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((359, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((360, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 403 });
        self.action.insert((360, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 404 });
        self.action.insert((360, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((360, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((360, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((360, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((361, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 405 });
        self.action.insert((361, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 404 });
        self.action.insert((361, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((361, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((361, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((361, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((362, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 406 });
        self.action.insert((362, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 404 });
        self.action.insert((362, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 121 });
        self.action.insert((362, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 116 });
        self.action.insert((362, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 122 });
        self.action.insert((362, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 119 });
        self.action.insert((363, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 407 });
        self.action.insert((364, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 408 });
        self.action.insert((365, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((365, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 23 });
        self.action.insert((366, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 409 });
        self.action.insert((366, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((366, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((367, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((367, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 410 });
        self.action.insert((368, TokenType::StatementExpressionP), ActionNode { action: ParserAction::Goto, value: 411 });
        self.action.insert((368, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((368, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((368, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((368, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 413 });
        self.action.insert((368, TokenType::Add), ActionNode { action: ParserAction::Shift, value: 412 });
        self.action.insert((368, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((368, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((368, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 26 });
        self.action.insert((369, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 415 });
        self.action.insert((369, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((369, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 414 });
        self.action.insert((369, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((369, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((370, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 416 });
        self.action.insert((370, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((370, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((370, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 419 });
        self.action.insert((370, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 418 });
        self.action.insert((370, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 417 });
        self.action.insert((370, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((370, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((370, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((371, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((371, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 34 });
        self.action.insert((372, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 420 });
        self.action.insert((372, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 39 });
        self.action.insert((372, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 41 });
        self.action.insert((372, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 42 });
        self.action.insert((372, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 38 });
        self.action.insert((372, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 43 });
        self.action.insert((372, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 40 });
        self.action.insert((373, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((373, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((374, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((374, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((375, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((375, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((375, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((375, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((376, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 296 });
        self.action.insert((376, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((376, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((376, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((376, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((376, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 297 });
        self.action.insert((376, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 298 });
        self.action.insert((376, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 299 });
        self.action.insert((377, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((377, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((377, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((377, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((378, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((378, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((378, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((378, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((379, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((379, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((379, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((379, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((379, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((379, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((379, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((380, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 21 });
        self.action.insert((380, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 21 });
        self.action.insert((381, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 421 });
        self.action.insert((381, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 213 });
        self.action.insert((382, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 422 });
        self.action.insert((382, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((382, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((382, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((382, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((382, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((382, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((382, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((382, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((382, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((383, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 423 });
        self.action.insert((384, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 424 });
        self.action.insert((384, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((384, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((384, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((384, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((384, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((384, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((384, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((384, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((384, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((384, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((384, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((384, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((384, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((384, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((384, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((384, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((384, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((384, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((384, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((385, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 425 });
        self.action.insert((385, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 335 });
        self.action.insert((385, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 338 });
        self.action.insert((385, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 340 });
        self.action.insert((385, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((385, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((385, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((385, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((386, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 426 });
        self.action.insert((386, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 338 });
        self.action.insert((386, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 340 });
        self.action.insert((386, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((386, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((386, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((386, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((387, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((387, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((388, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 427 });
        self.action.insert((388, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 338 });
        self.action.insert((388, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 340 });
        self.action.insert((388, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((388, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((388, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((388, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((389, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 428 });
        self.action.insert((389, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 338 });
        self.action.insert((389, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 340 });
        self.action.insert((389, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((389, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((389, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((389, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((390, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 385 });
        self.action.insert((390, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((390, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((391, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((391, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((392, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((392, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((393, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 429 });
        self.action.insert((393, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 430 });
        self.action.insert((393, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((393, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((393, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((393, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((394, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 431 });
        self.action.insert((394, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 430 });
        self.action.insert((394, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((394, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((394, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((394, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((395, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 432 });
        self.action.insert((395, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 430 });
        self.action.insert((395, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 341 });
        self.action.insert((395, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 336 });
        self.action.insert((395, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 342 });
        self.action.insert((395, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 339 });
        self.action.insert((396, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 433 });
        self.action.insert((397, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 434 });
        self.action.insert((398, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 435 });
        self.action.insert((398, TokenType::Ellipsis), ActionNode { action: ParserAction::Shift, value: 436 });
        self.action.insert((399, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 437 });
        self.action.insert((400, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((400, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((400, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((400, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((400, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((400, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((400, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((401, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((401, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((401, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((401, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((401, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((401, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((401, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((402, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((402, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((402, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((402, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((402, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((402, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((402, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((403, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((403, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((403, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((403, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((403, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((403, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((403, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((404, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 359 });
        self.action.insert((404, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((404, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((404, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 362 });
        self.action.insert((404, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 361 });
        self.action.insert((404, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 360 });
        self.action.insert((404, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((404, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((405, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((405, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((405, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((405, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((405, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((405, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((405, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((406, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((406, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((406, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((406, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((406, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((406, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((406, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((407, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((407, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((408, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 438 });
        self.action.insert((408, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((408, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((408, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((408, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((408, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((408, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((408, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((408, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((408, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((408, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((408, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((408, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((408, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((408, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((408, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((408, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((408, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((408, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((408, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((409, TokenType::FunctionParams), ActionNode { action: ParserAction::Goto, value: 439 });
        self.action.insert((409, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 365 });
        self.action.insert((409, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 368 });
        self.action.insert((409, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 370 });
        self.action.insert((409, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((409, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((409, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((409, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((410, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 440 });
        self.action.insert((410, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 368 });
        self.action.insert((410, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 370 });
        self.action.insert((410, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((410, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((410, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((410, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((411, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((411, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 25 });
        self.action.insert((412, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 441 });
        self.action.insert((412, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 368 });
        self.action.insert((412, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 370 });
        self.action.insert((412, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((412, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((412, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((412, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((413, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 442 });
        self.action.insert((413, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 368 });
        self.action.insert((413, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 370 });
        self.action.insert((413, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((413, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((413, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((413, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((414, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::Colon), ActionNode { action: ParserAction::Shift, value: 409 });
        self.action.insert((414, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((414, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 35 });
        self.action.insert((415, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((415, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 38 });
        self.action.insert((416, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((416, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 29 });
        self.action.insert((417, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 443 });
        self.action.insert((417, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 444 });
        self.action.insert((417, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((417, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((417, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((417, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((418, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 445 });
        self.action.insert((418, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 444 });
        self.action.insert((418, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((418, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((418, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((418, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((419, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 446 });
        self.action.insert((419, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 444 });
        self.action.insert((419, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 371 });
        self.action.insert((419, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 366 });
        self.action.insert((419, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 372 });
        self.action.insert((419, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 369 });
        self.action.insert((420, TokenType::RightParenthesis), ActionNode { action: ParserAction::Shift, value: 447 });
        self.action.insert((421, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 448 });
        self.action.insert((421, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((421, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((421, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((421, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((421, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((421, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((421, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((421, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((421, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((421, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((421, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((421, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((421, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((421, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((421, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((421, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((421, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((421, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((421, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((422, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 449 });
        self.action.insert((423, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 450 });
        self.action.insert((423, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((423, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((423, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((423, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((423, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((423, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((423, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((423, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((423, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((423, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((423, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((423, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((423, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((423, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((423, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((423, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((423, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((423, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((423, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((424, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 451 });
        self.action.insert((425, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((425, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 386 });
        self.action.insert((426, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((426, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((427, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((427, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((428, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((428, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((429, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((429, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((430, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 392 });
        self.action.insert((430, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 395 });
        self.action.insert((430, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 394 });
        self.action.insert((430, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 393 });
        self.action.insert((430, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((430, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((431, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((431, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((432, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((432, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((433, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((433, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((434, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::StatementConditional2), ActionNode { action: ParserAction::Goto, value: 452 });
        self.action.insert((434, TokenType::StatementConditional3), ActionNode { action: ParserAction::Goto, value: 453 });
        self.action.insert((434, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 40 });
        self.action.insert((434, TokenType::Elif), ActionNode { action: ParserAction::Shift, value: 454 });
        self.action.insert((434, TokenType::Else), ActionNode { action: ParserAction::Shift, value: 455 });
        self.action.insert((435, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 456 });
        self.action.insert((435, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((435, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((435, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((435, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((435, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((435, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((435, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((435, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((435, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((435, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((435, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((435, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((435, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((435, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((435, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((435, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((435, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((435, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((435, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((436, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 457 });
        self.action.insert((436, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 108 });
        self.action.insert((436, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 110 });
        self.action.insert((436, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 111 });
        self.action.insert((436, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 107 });
        self.action.insert((436, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 112 });
        self.action.insert((436, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 109 });
        self.action.insert((437, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((437, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 59 });
        self.action.insert((438, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 458 });
        self.action.insert((439, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 36 });
        self.action.insert((439, TokenType::Comma), ActionNode { action: ParserAction::Shift, value: 410 });
        self.action.insert((440, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((440, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 22 });
        self.action.insert((441, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((441, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 27 });
        self.action.insert((442, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((442, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 28 });
        self.action.insert((443, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((443, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 31 });
        self.action.insert((444, TokenType::StatementExpression2p), ActionNode { action: ParserAction::Goto, value: 416 });
        self.action.insert((444, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((444, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((444, TokenType::Modulo), ActionNode { action: ParserAction::Shift, value: 419 });
        self.action.insert((444, TokenType::Divide), ActionNode { action: ParserAction::Shift, value: 418 });
        self.action.insert((444, TokenType::Multiply), ActionNode { action: ParserAction::Shift, value: 417 });
        self.action.insert((444, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((444, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((444, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 30 });
        self.action.insert((445, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((445, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 32 });
        self.action.insert((446, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((446, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 33 });
        self.action.insert((447, TokenType::Modulo), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::Divide), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::Multiply), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::Add), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::Ellipsis), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((447, TokenType::Comma), ActionNode { action: ParserAction::Reduce, value: 37 });
        self.action.insert((448, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 459 });
        self.action.insert((449, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 460 });
        self.action.insert((449, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((449, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((449, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((449, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((449, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((449, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((449, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((449, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((449, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((449, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((449, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((449, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((449, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((449, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((449, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((449, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((449, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((449, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((449, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((450, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 461 });
        self.action.insert((451, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((451, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((452, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 41 });
        self.action.insert((452, TokenType::Elif), ActionNode { action: ParserAction::Shift, value: 462 });
        self.action.insert((453, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((453, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 42 });
        self.action.insert((454, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 463 });
        self.action.insert((454, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((454, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((454, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((454, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((454, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((454, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((454, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((454, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((454, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((455, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 464 });
        self.action.insert((456, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 465 });
        self.action.insert((457, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 466 });
        self.action.insert((458, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((458, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((459, TokenType::At), ActionNode { action: ParserAction::Reduce, value: 21 });
        self.action.insert((459, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 21 });
        self.action.insert((460, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 467 });
        self.action.insert((461, TokenType::StatementConditional3), ActionNode { action: ParserAction::Goto, value: 468 });
        self.action.insert((461, TokenType::Else), ActionNode { action: ParserAction::Shift, value: 469 });
        self.action.insert((462, TokenType::ConditionalExpression), ActionNode { action: ParserAction::Goto, value: 470 });
        self.action.insert((462, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 44 });
        self.action.insert((462, TokenType::ComparisonOperatorUnary), ActionNode { action: ParserAction::Goto, value: 52 });
        self.action.insert((462, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 46 });
        self.action.insert((462, TokenType::Not), ActionNode { action: ParserAction::Shift, value: 53 });
        self.action.insert((462, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 48 });
        self.action.insert((462, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 49 });
        self.action.insert((462, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 45 });
        self.action.insert((462, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 50 });
        self.action.insert((462, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 47 });
        self.action.insert((463, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 471 });
        self.action.insert((464, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 472 });
        self.action.insert((464, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((464, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((464, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((464, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((464, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((464, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((464, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((464, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((464, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((464, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((464, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((464, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((464, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((464, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((464, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((464, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((464, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((464, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((464, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((465, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((465, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 57 });
        self.action.insert((466, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 473 });
        self.action.insert((466, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((466, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((466, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((466, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((466, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((466, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((466, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((466, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((466, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((466, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((466, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((466, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((466, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((466, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((466, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((466, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((466, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((466, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((466, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((467, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((467, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((467, TokenType::Elif), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((468, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((468, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((468, TokenType::Elif), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((469, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 474 });
        self.action.insert((470, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 475 });
        self.action.insert((471, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 476 });
        self.action.insert((471, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((471, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((471, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((471, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((471, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((471, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((471, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((471, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((471, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((471, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((471, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((471, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((471, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((471, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((471, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((471, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((471, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((471, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((471, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((472, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 477 });
        self.action.insert((473, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 478 });
        self.action.insert((474, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 479 });
        self.action.insert((474, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((474, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((474, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((474, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((474, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((474, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((474, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((474, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((474, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((474, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((474, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((474, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((474, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((474, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((474, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((474, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((474, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((474, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((474, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((475, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 480 });
        self.action.insert((475, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((475, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((475, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((475, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((475, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((475, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((475, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((475, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((475, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((475, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((475, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((475, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((475, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((475, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((475, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((475, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((475, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((475, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((475, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((476, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 481 });
        self.action.insert((477, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((477, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((478, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((478, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 58 });
        self.action.insert((479, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 482 });
        self.action.insert((480, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 483 });
        self.action.insert((481, TokenType::StatementConditional3), ActionNode { action: ParserAction::Goto, value: 484 });
        self.action.insert((481, TokenType::Else), ActionNode { action: ParserAction::Shift, value: 485 });
        self.action.insert((482, TokenType::Newline), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((482, TokenType::EndOfFile), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((482, TokenType::Elif), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((483, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((483, TokenType::Elif), ActionNode { action: ParserAction::Reduce, value: 43 });
        self.action.insert((484, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((484, TokenType::Elif), ActionNode { action: ParserAction::Reduce, value: 44 });
        self.action.insert((485, TokenType::LeftCurlyBrace), ActionNode { action: ParserAction::Shift, value: 486 });
        self.action.insert((486, TokenType::StatementSuiteFunction), ActionNode { action: ParserAction::Goto, value: 487 });
        self.action.insert((486, TokenType::StatementListFunction), ActionNode { action: ParserAction::Goto, value: 173 });
        self.action.insert((486, TokenType::StatementLimited), ActionNode { action: ParserAction::Goto, value: 174 });
        self.action.insert((486, TokenType::StatementSimple), ActionNode { action: ParserAction::Goto, value: 175 });
        self.action.insert((486, TokenType::StatementComplex), ActionNode { action: ParserAction::Goto, value: 176 });
        self.action.insert((486, TokenType::StatementExpression), ActionNode { action: ParserAction::Goto, value: 177 });
        self.action.insert((486, TokenType::StatementAssignment), ActionNode { action: ParserAction::Goto, value: 178 });
        self.action.insert((486, TokenType::StatementConditional), ActionNode { action: ParserAction::Goto, value: 179 });
        self.action.insert((486, TokenType::StatementLoop), ActionNode { action: ParserAction::Goto, value: 180 });
        self.action.insert((486, TokenType::StatementExpression2), ActionNode { action: ParserAction::Goto, value: 182 });
        self.action.insert((486, TokenType::Identifier), ActionNode { action: ParserAction::Shift, value: 181 });
        self.action.insert((486, TokenType::If), ActionNode { action: ParserAction::Shift, value: 187 });
        self.action.insert((486, TokenType::StatementLoopFor), ActionNode { action: ParserAction::Goto, value: 188 });
        self.action.insert((486, TokenType::StatementLoopWhile), ActionNode { action: ParserAction::Goto, value: 189 });
        self.action.insert((486, TokenType::StatementExpression3), ActionNode { action: ParserAction::Goto, value: 184 });
        self.action.insert((486, TokenType::For), ActionNode { action: ParserAction::Shift, value: 190 });
        self.action.insert((486, TokenType::While), ActionNode { action: ParserAction::Shift, value: 191 });
        self.action.insert((486, TokenType::Term), ActionNode { action: ParserAction::Shift, value: 185 });
        self.action.insert((486, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Shift, value: 186 });
        self.action.insert((486, TokenType::Subtract), ActionNode { action: ParserAction::Shift, value: 183 });
        self.action.insert((487, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Shift, value: 488 });
        self.action.insert((488, TokenType::While), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::For), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::If), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::Identifier), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::Subtract), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::LeftParenthesis), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::Term), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::RightCurlyBrace), ActionNode { action: ParserAction::Reduce, value: 45 });
        self.action.insert((488, TokenType::Elif), ActionNode { action: ParserAction::Reduce, value: 45 });
    }
    pub fn parse(&mut self) -> Box<Node> {
        self.initialize();
        let mut stack: Vec<i32> = Vec::new();
        stack.push(0);
        let mut node_stack: Vec<Box<Node>> = Vec::new();
        let token_stack = self.token_stack.clone();
        let mut iterator = token_stack.iter();
        let mut token = iterator.next().unwrap();
        loop {
            let mut state = *stack.last().unwrap();
            let action_node = self.action.get(&(state, token.token_type)).unwrap();
            println!("State: {}, TokenType: {:?} -> {:?} {}", state, token.token_type, action_node.action, action_node.value);
            match action_node.action {
                ParserAction::Shift => {
                    if token.token_type == TokenType::Term { self.token_stack.push(token.clone()) }
                    stack.push(action_node.value);

                    match token.token_type {
                        TokenType::Term => {
                            node_stack.push(Box::new(NodeTerm { payload: token.clone() }));
                        }
                        TokenType::Identifier => {
                            node_stack.push(Box::new(NodeIdentifier { payload: token.clone() }));
                        }
                        _ => {}
                    }

                    token = iterator.next().unwrap();
                }
                ParserAction::Reduce => {
                    let goto_node = self.goto.get(&action_node.value).unwrap();
                    for _ in 0..goto_node.value { stack.pop(); }
                    state = *stack.last().unwrap();
                    let goto_action = self.action.get(&(state, goto_node.token_type)).unwrap();
                    stack.push(goto_action.value);
                    {
                        match action_node.value {
                            1 => {
                                // NTS_STATEMENT_SUITE -> NTS_STATEMENT_LIST
                                let statement_list = node_stack.pop().unwrap();
                                let node = NodeStatementSuite { statement_list: statement_list };
                                node_stack.push(Box::new(node));
                            }
                            2 => {
                                // NTS_STATEMENT_SUITE_FUNCTION -> NTS_STATEMENT_LIST_FUNCTION
                                let statement_limited = node_stack.pop().unwrap();
                                let node = NodeStatementListFunction { statement_limited: statement_limited };
                                node_stack.push(Box::new(node));
                            }
                            3 => {
                                // NTS_STATEMENT_SUITE_CLASS -> NTS_STATEMENT_LIST_CLASS
                                let statement_list_class = node_stack.pop().unwrap();
                                let node = NodeStatementSuiteClass { statement_list_class: statement_list_class };
                                node_stack.push(Box::new(node));
                            }
                            4 => {
                                // NTS_STATEMENT_LIST -> NTS_STATEMENT TS_NEWLINE NTS_STATEMENT_LIST
                                let statement_list = node_stack.pop().unwrap();
                                let statement = node_stack.pop().unwrap();
                                let node = NodeStatementListRecursive { statement: statement, statement_list: statement_list };
                                node_stack.push(Box::new(node));
                            }
                            5 => {
                                // NTS_STATEMENT_LIST -> NTS_STATEMENT
                                let statement = node_stack.pop().unwrap();
                                let node = NodeStatementList { statement: statement };
                                node_stack.push(Box::new(node));
                            }
                            6 => {
                                // NTS_STATEMENT_LIST_FUNCTION -> NTS_STATEMENT_LIMITED NTS_STATEMENT_LIST_FUNCTION
                                let statement_list_function = node_stack.pop().unwrap();
                                let statement_limited = node_stack.pop().unwrap();
                                let node = NodeStatementListFunctionRecursive { statement_limited: statement_limited, statement_list_function: statement_list_function };
                                node_stack.push(Box::new(node));
                            }
                            7 => {
                                // NTS_STATEMENT_LIST_FUNCTION -> NTS_STATEMENT_LIMITED
                                let statement_limited = node_stack.pop().unwrap();
                                let node = NodeStatementListFunction { statement_limited: statement_limited };
                                node_stack.push(Box::new(node));
                            }
                            8 => {
                                // NTS_STATEMENT_LIST_CLASS -> NTS_STATEMENT_RESTRICTED NTS_STATEMENT_LIST_CLASS
                                let statement_list_class = node_stack.pop().unwrap();
                                let statement_restricted = node_stack.pop().unwrap();
                                let node = NodeStatementListClassRecursive { statement_restricted: statement_restricted, statement_list_class: statement_list_class };
                                node_stack.push(Box::new(node));
                            }
                            9 => {
                                // NTS_STATEMENT_LIST_CLASS -> NTS_STATEMENT_RESTRICTED
                                let statement_restricted = node_stack.pop().unwrap();
                                let node = NodeStatementListClass { statement_restricted: statement_restricted };
                                node_stack.push(Box::new(node));
                            }
                            10 => {
                                // NTS_STATEMENT -> NTS_STATEMENT_SIMPLE
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatement { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            11 => {
                                // NTS_STATEMENT -> NTS_STATEMENT_COMPLEX
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatement { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            12 => {
                                // NTS_STATEMENT -> NTS_STATEMENT_FUNCTION
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatement { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            13 => {
                                // NTS_STATEMENT -> NTS_STATEMENT_CLASS
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatement { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            14 => {
                                // NTS_STATEMENT_LIMITED -> NTS_STATEMENT_SIMPLE
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementLimited { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            15 => {
                                // NTS_STATEMENT_LIMITED -> NTS_STATEMENT_COMPLEX
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementLimited { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            16 => {
                                // NTS_STATEMENT_RESTRICTED -> NTS_STATEMENT_FUNCTION
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementRestricted { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            17 => {
                                // NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_EXPRESSION
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementSimple { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            18 => {
                                // NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_ASSIGNMENT
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementSimple { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            19 => {
                                // NTS_STATEMENT_SIMPLE -> NTS_STATEMENT_CONDITIONAL
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementSimple { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            20 => {
                                // NTS_STATEMENT_COMPLEX -> NTS_STATEMENT_LOOP
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementComplex { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            21 => {
                                // NTS_STATEMENT_FUNCTION -> TS_AT TS_IDENTIFIER TS_COLON NTS_FUNCTION_PARAMS TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
                                let statement_suite_function = node_stack.pop().unwrap();
                                let function_params = node_stack.pop().unwrap();
                                let identifier = node_stack.pop().unwrap();
                                let node = NodeStatementFunction { identifier: identifier, function_params: function_params, statement_suite_function: statement_suite_function };
                                node_stack.push(Box::new(node));
                            }
                            22 => {
                                // NTS_FUNCTION_PARAMS -> NTS_FUNCTION_PARAMS TS_COMMA NTS_STATEMENT_EXPRESSION
                                let identifier = node_stack.pop().unwrap();
                                let function_params = node_stack.pop().unwrap();
                                let node = NodeFunctionParamsRecursive { function_params: function_params, identifier: identifier };
                                node_stack.push(Box::new(node));
                            }
                            23 => {
                                // NTS_FUNCTION_PARAMS -> NTS_STATEMENT_EXPRESSION
                                let identifier = node_stack.pop().unwrap();
                                let node = NodeFunctionParams { identifier: identifier };
                                node_stack.push(Box::new(node));
                            }
                            24 => {
                                // NTS_STATEMENT_CLASS -> TS_AT TS_IDENTIFIER TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_CLASS TS_RIGHT_CURLY_BRACE
                                let statement_suite_class = node_stack.pop().unwrap();
                                let identifier = node_stack.pop().unwrap();
                                let node = NodeStatementClass { identifier: identifier, statement_suite_class: statement_suite_class };
                                node_stack.push(Box::new(node));
                            }
                            25 => {
                                // NTS_STATEMENT_EXPRESSION -> NTS_STATEMENT_EXPRESSION_2 NTS_STATEMENT_EXPRESSION_P
                                let statement_expression_p = node_stack.pop().unwrap();
                                let statement_expression_2 = node_stack.pop().unwrap();
                                let node = NodeStatementExpressionRecursive { statement_expression_2: statement_expression_2, statement_expression_p: statement_expression_p };
                                node_stack.push(Box::new(node));
                            }
                            26 => {
                                // NTS_STATEMENT_EXPRESSION -> NTS_STATEMENT_EXPRESSION_2
                                let statement_expression_2 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression { statement_expression_2: statement_expression_2 };
                                node_stack.push(Box::new(node));
                            }
                            27 => {
                                // NTS_STATEMENT_EXPRESSION_P -> TS_ADD NTS_STATEMENT_EXPRESSION
                                let statement_expression = node_stack.pop().unwrap();
                                let node = NodeStatementExpressionP { statement_expression: statement_expression, operator: TokenType::Add };
                                node_stack.push(Box::new(node));
                            }
                            28 => {
                                // NTS_STATEMENT_EXPRESSION_P -> TS_SUBTRACT NTS_STATEMENT_EXPRESSION
                                let statement_expression = node_stack.pop().unwrap();
                                let node = NodeStatementExpressionP { statement_expression: statement_expression, operator: TokenType::Subtract };
                                node_stack.push(Box::new(node));
                            }
                            29 => {
                                // NTS_STATEMENT_EXPRESSION_2 -> NTS_STATEMENT_EXPRESSION_3 NTS_STATEMENT_EXPRESSION_2P
                                let statement_expression_2p = node_stack.pop().unwrap();
                                let statement_expression_3 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression2Recursive { statement_expression_3: statement_expression_3, statement_expression_2p: statement_expression_2p };
                                node_stack.push(Box::new(node));
                            }
                            30 => {
                                // NTS_STATEMENT_EXPRESSION_2 -> NTS_STATEMENT_EXPRESSION_3
                                let statement_expression_3 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression2 { statement_expression_3: statement_expression_3 };
                                node_stack.push(Box::new(node));
                            }
                            31 => {
                                // NTS_STATEMENT_EXPRESSION_2P -> TS_MULTIPLY NTS_STATEMENT_EXPRESSION_2
                                let statement_expression_2 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression2p { statement_expression_2: statement_expression_2, operator: TokenType::Multiply };
                                node_stack.push(Box::new(node));
                            }
                            32 => {
                                // NTS_STATEMENT_EXPRESSION_2P -> TS_DIVIDE NTS_STATEMENT_EXPRESSION_2
                                let statement_expression_2 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression2p { statement_expression_2: statement_expression_2, operator: TokenType::Divide };
                                node_stack.push(Box::new(node));
                            }
                            33 => {
                                // NTS_STATEMENT_EXPRESSION_2P -> TS_MODULO NTS_STATEMENT_EXPRESSION_2
                                let statement_expression_2 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression2p { statement_expression_2: statement_expression_2, operator: TokenType::Modulo };
                                node_stack.push(Box::new(node));
                            }
                            34 => {
                                // NTS_STATEMENT_EXPRESSION_3 -> TS_TERM
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementExpression3 { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            35 => {
                                // NTS_STATEMENT_EXPRESSION_3 -> TS_IDENTIFIER
                                let statement_x = node_stack.pop().unwrap();
                                let node = NodeStatementExpression3 { statement_x: statement_x };
                                node_stack.push(Box::new(node));
                            }
                            36 => {
                                // NTS_STATEMENT_EXPRESSION_3 -> TS_IDENTIFIER TS_COLON NTS_FUNCTION_PARAMS
                                let function_params = node_stack.pop().unwrap();
                                let identifier = node_stack.pop().unwrap();
                                let node = NodeStatementExpression3Function { identifier: identifier, function_params: function_params };
                                node_stack.push(Box::new(node));
                            }
                            37 => {
                                // NTS_STATEMENT_EXPRESSION_3 -> TS_LEFT_PARENTHESIS NTS_STATEMENT_EXPRESSION TS_RIGHT_PARENTHESIS
                                let statement_expression = node_stack.pop().unwrap();
                                let node = NodeStatementExpression3Paren { statement_expression: statement_expression };
                                node_stack.push(Box::new(node));
                            }
                            38 => {
                                // NTS_STATEMENT_EXPRESSION_3 -> TS_SUBTRACT NTS_STATEMENT_EXPRESSION_3
                                let statement_expression_3 = node_stack.pop().unwrap();
                                let node = NodeStatementExpression3Negation { statement_expression_3: statement_expression_3 };
                                node_stack.push(Box::new(node));
                            }
                            39 => {
                                // NTS_STATEMENT_ASSIGNMENT -> TS_IDENTIFIER TS_EQUALS NTS_STATEMENT_EXPRESSION
                                let statement_expression = node_stack.pop().unwrap();
                                let identifier = node_stack.pop().unwrap();
                                let node = NodeStatementAssignment { identifier: identifier, statement_expression: statement_expression };
                                node_stack.push(Box::new(node));
                            }
                            40 => {
                                // NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
                                let statement_suite_function = node_stack.pop().unwrap();
                                let conditional_expression = node_stack.pop().unwrap();
                                let node = NodeStatementConditional { conditional_expression: conditional_expression, statement_suite_function: statement_suite_function };
                                node_stack.push(Box::new(node));
                            }
                            41 => {
                                // NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_2
                                let statement_conditional_2 = node_stack.pop().unwrap();
                                let statement_suite_function = node_stack.pop().unwrap();
                                let conditional_expression = node_stack.pop().unwrap();
                                let node = NodeStatementConditionalW2 { conditional_expression: conditional_expression, statement_suite_function: statement_suite_function, statement_conditional_2: statement_conditional_2 };
                                node_stack.push(Box::new(node));
                            }
                            42 => {
                                // NTS_STATEMENT_CONDITIONAL -> TS_IF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_3
                                let statement_conditional_3 = node_stack.pop().unwrap();
                                let statement_suite_function = node_stack.pop().unwrap();
                                let conditional_expression = node_stack.pop().unwrap();
                                let node = NodeStatementConditionalW3 { conditional_expression: conditional_expression, statement_suite_function: statement_suite_function, statement_conditional_3: statement_conditional_3 };
                                node_stack.push(Box::new(node));
                            }
                            43 => {
                                // NTS_STATEMENT_CONDITIONAL_2 -> NTS_STATEMENT_CONDITIONAL_2 TS_ELIF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
                                let statement_suite_function = node_stack.pop().unwrap();
                                let conditional_expression = node_stack.pop().unwrap();
                                let statement_conditional_2 = node_stack.pop().unwrap();
                                let node = NodeStatementConditional2Recursive { statement_conditional_2: statement_conditional_2, conditional_expression: conditional_expression, statement_suite_function: statement_suite_function };
                                node_stack.push(Box::new(node));
                            }
                            44 => {
                                // NTS_STATEMENT_CONDITIONAL_2 -> TS_ELIF NTS_CONDITIONAL_EXPRESSION TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE NTS_STATEMENT_CONDITIONAL_3
                                let statement_conditional_3 = node_stack.pop().unwrap();
                                let statement_suite_function = node_stack.pop().unwrap();
                                let conditional_expression = node_stack.pop().unwrap();
                                let node = NodeStatementConditional2 { conditional_expression: conditional_expression, statement_suite_function: statement_suite_function, statement_conditional_3: statement_conditional_3 };
                                node_stack.push(Box::new(node));
                            }
                            45 => {
                                // NTS_STATEMENT_CONDITIONAL_3 -> TS_ELSE TS_LEFT_CURLY_BRACE NTS_STATEMENT_SUITE_FUNCTION TS_RIGHT_CURLY_BRACE
                                let statement_suite_function = node_stack.pop().unwrap();
                                let node = NodeStatementConditional3 { statement_suite_function: statement_suite_function };
                                node_stack.push(Box::new(node));
                            }
                            46 => {
                                // NTS_CONDITIONAL_EXPRESSION -> NTS_STATEMENT_EXPRESSION NTS_COMPARISON_OPERATOR NTS_STATEMENT_EXPRESSION
                                let term2 = node_stack.pop().unwrap();
                                let comparison_operator = node_stack.pop().unwrap();
                                let term1 = node_stack.pop().unwrap();
                                let node = NodeConditionalExpression { term1: term1, comparison_operator: comparison_operator, term2: term2 };
                                node_stack.push(Box::new(node));
                            }
                            47 => {
                                // NTS_CONDITIONAL_EXPRESSION -> NTS_COMPARISON_OPERATOR_UNARY NTS_STATEMENT_EXPRESSION
                                let term = node_stack.pop().unwrap();
                                let comparison_operator_unary = node_stack.pop().unwrap();
                                let node = NodeConditionalExpressionUnary { comparison_operator_unary: comparison_operator_unary, term: term };
                                node_stack.push(Box::new(node));
                            }
                            _ => {
                                //exhaustive
                            }
                        }
                    }
                }
                ParserAction::Accept => {
                    println!("Parse Accepted!");
                    return Box::from(NodeMango { statement_suite: node_stack.pop().unwrap() });
                }
                _ => {
                    println!("Parse Error!");
                    return Box::from(NodeMango { statement_suite: node_stack.pop().unwrap() });
                }
            }
        }
    }
}
