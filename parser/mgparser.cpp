/// This file is generated by crammar_cpp_gen.cpp based on grammar.mg specficiations

#include "mgparser.h"

mgparser::mgparser(const char* body) {
	lexer = new mglex(body);
	table[keywords::NTS_ASSIGN][keywords::TS_IDENT] = 5;
	table[keywords::NTS_EXPR][keywords::TS_VARIABLE] = 6;
	table[keywords::NTS_MANGO][keywords::TS_VARIABLE] = 1;
	table[keywords::NTS_MANGO][keywords::TS_IDENT] = 1;
	table[keywords::NTS_OPERATOR][keywords::TS_PLUS] = 7;
	table[keywords::NTS_OPERATOR][keywords::TS_MINUS] = 8;
	table[keywords::NTS_OPERATOR][keywords::TS_MUL] = 9;
	table[keywords::NTS_OPERATOR][keywords::TS_DIV] = 10;
	table[keywords::NTS_OPERATOR][keywords::TS_EXP] = 11;
	table[keywords::NTS_STMT][keywords::TS_IDENT] = 3;
	table[keywords::NTS_STMT][keywords::TS_VARIABLE] = 4;
	table[keywords::NTS_STMTS][keywords::TS_VARIABLE] = 2;
	table[keywords::NTS_STMTS][keywords::TS_IDENT] = 2;
	ss.push(keywords::TS_EOF);
	ss.push(keywords::NTS_MANGO);
}


void mgparser::ppeval() {
std::pair<const char*, keywords::Symbols> token = lexer->lltoken();
	while(ss.size() > 0) {
		while (!token.first) { token = lexer->lltoken(); }
		cout << "Found a: " << token.first << endl;
		if(token.second == ss.top()) {
			cout << "Matched symbols : " << token.first << endl;
			ss.pop();
			token = lexer->lltoken();
		}
		else {
			cout << "Rule " << table[ss.top()][token.second] << endl;
			switch(table[ss.top()][token.second]) {
				case 5:
					ss.pop();
					ss.push(keywords::NTS_EXPR);
					ss.push(keywords::TS_EQUALS);
					ss.push(keywords::TS_IDENT);
					break;
				case 6:
					ss.pop();
					ss.push(keywords::TS_VARIABLE);
					ss.push(keywords::NTS_OPERATOR);
					ss.push(keywords::TS_VARIABLE);
					break;
				case 1:
					ss.pop();
					ss.push(keywords::NTS_STMTS);
					break;
				case 7:
					ss.pop();
					ss.push(keywords::TS_PLUS);
					break;
				case 8:
					ss.pop();
					ss.push(keywords::TS_MINUS);
					break;
				case 9:
					ss.pop();
					ss.push(keywords::TS_MUL);
					break;
				case 10:
					ss.pop();
					ss.push(keywords::TS_DIV);
					break;
				case 11:
					ss.pop();
					ss.push(keywords::TS_EXP);
					break;
				case 3:
					ss.pop();
					ss.push(keywords::NTS_ASSIGN);
					break;
				case 4:
					ss.pop();
					ss.push(keywords::NTS_EXPR);
					break;
				case 2:
					ss.pop();
					ss.push(keywords::TS_NEWLINE);
					ss.push(keywords::NTS_STMT);
					break;
				default:
					cout << "parsing table defaulted" << endl;
					return;
			}
		}
	}
cout << "finished parsing" << endl;
return;
}