#include "mgparser.h"
#include <string>
#include <iostream>

mgparser::mgparser(const char* file) {
	lexer = new mglexer(file);
	ss.push(stack_symbol{0});
	GOTO[1] = {tokens::NTS_MANGO, 2};
	GOTO[1] = {tokens::NTS_STATEMENTS, 4};
	GOTO[2] = {tokens::NTS_STATEMENT, 2};
	GOTO[3] = {tokens::NTS_STATEMENT, 2};
	GOTO[4] = {tokens::NTS_STATEMENT, 2};
	GOTO[5] = {tokens::NTS_STATEMENT, 2};
	GOTO[6] = {tokens::NTS_STATEMENT, 2};
	GOTO[7] = {tokens::NTS_STATEMENT_EXPRESSION, 6};
	GOTO[8] = {tokens::NTS_STATEMENT_EXPRESSION, 6};
	GOTO[9] = {tokens::NTS_STATEMENT_EXPRESSION, 2};
	GOTO[10] = {tokens::NTS_STATEMENT_EXPRESSION, 2};
	GOTO[11] = {tokens::NTS_STATEMENT_EXPRESSION_2, 6};
	GOTO[12] = {tokens::NTS_STATEMENT_EXPRESSION_2, 6};
	GOTO[13] = {tokens::NTS_STATEMENT_EXPRESSION_2, 2};
	GOTO[14] = {tokens::NTS_STATEMENT_ASSIGNMENT, 6};
	GOTO[15] = {tokens::NTS_STATEMENT_CONDITIONAL, 8};
	GOTO[16] = {tokens::NTS_STATEMENT_CONDITIONAL, 10};
	GOTO[17] = {tokens::NTS_STATEMENT_CONDITIONAL_ELIF, 8};
	GOTO[18] = {tokens::NTS_STATEMENT_CONDITIONAL_ELIF, 10};
	GOTO[19] = {tokens::NTS_STATEMENT_CONDITIONAL_ELIF, 10};
	GOTO[20] = {tokens::NTS_STATEMENT_CONDITIONAL_ELSE, 8};
	GOTO[21] = {tokens::NTS_STATEMENT_CONDITIONAL_TEST, 6};
	GOTO[22] = {tokens::NTS_STATEMENT_CONDITIONAL_TEST, 4};
	GOTO[23] = {tokens::NTS_STATEMENT_CONDITIONAL_TEST, 2};
	GOTO[24] = {tokens::NTS_OPERATOR_BINARY, 2};
	GOTO[25] = {tokens::NTS_OPERATOR_BINARY, 2};
	GOTO[26] = {tokens::NTS_OPERATOR_BINARY, 2};
	GOTO[27] = {tokens::NTS_OPERATOR_BINARY, 2};
	GOTO[28] = {tokens::NTS_OPERATOR_BINARY, 2};
	GOTO[29] = {tokens::NTS_OPERATOR_BINARY, 2};
	GOTO[30] = {tokens::NTS_OPERATOR_UNARY, 2};
	GOTO[31] = {tokens::NTS_OPERATOR_UNARY, 2};
	GOTO[32] = {tokens::NTS_STATEMENT_LOOP, 2};
	GOTO[33] = {tokens::NTS_STATEMENT_LOOP, 2};
	GOTO[36] = {tokens::NTS_STATEMENT_LOOP_FOR, 12};
	GOTO[35] = {tokens::NTS_STATEMENT_LOOP_FOR, 16};
	GOTO[37] = {tokens::NTS_STATEMENT_LOOP_WHILE, 8};
	GOTO[38] = {tokens::NTS_STATEMENT_DEFINE_FUNCTION, 10};
	GOTO[39] = {tokens::NTS_FUNCTION_PARAMS, 6};
	GOTO[40] = {tokens::NTS_FUNCTION_PARAMS, 4};
	GOTO[41] = {tokens::NTS_FUNCTION_PARAMS, 2};
	GOTO[42] = {tokens::NTS_STATEMENT_DEFINE_CLASS, 8};
	ACTION[0][tokens::NTS_STATEMENTS] = "1";
	ACTION[0][tokens::NTS_STATEMENT] = "2";
	ACTION[0][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[0][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[0][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[0][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[0][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[0][tokens::TS_TERM] = "S8";
	ACTION[0][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[0][tokens::TS_IDENTIFIER] = "S10";
	ACTION[0][tokens::TS_IF] = "S11";
	ACTION[0][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[0][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[0][tokens::TS_DEFINE] = "S16";
	ACTION[0][tokens::TS_FOR] = "S14";
	ACTION[0][tokens::TS_WHILE] = "S15";
	ACTION[1][tokens::TS_EOF] = "ACCEPT";
	ACTION[2][tokens::TS_NEWLINE] = "S17";
	ACTION[3][tokens::TS_NEWLINE] = "R2";
	ACTION[4][tokens::TS_NEWLINE] = "R3";
	ACTION[5][tokens::TS_NEWLINE] = "R4";
	ACTION[6][tokens::TS_NEWLINE] = "R5";
	ACTION[7][tokens::TS_NEWLINE] = "R6";
	ACTION[8][tokens::TS_OPERATOR_ADD] = "S18";
	ACTION[8][tokens::TS_OPERATOR_SUB] = "S19";
	ACTION[8][tokens::TS_NEWLINE] = "R13";
	ACTION[8][tokens::TS_OPERATOR_MUL] = "S20";
	ACTION[8][tokens::TS_OPERATOR_DIV] = "S21";
	ACTION[9][tokens::TS_NEWLINE] = "R10";
	ACTION[10][tokens::TS_OPERATOR_EQUALS] = "S22";
	ACTION[11][tokens::NTS_STATEMENT_CONDITIONAL_TEST] = "24";
	ACTION[11][tokens::TS_TERM] = "S23";
	ACTION[11][tokens::NTS_OPERATOR_UNARY] = "25";
	ACTION[11][tokens::TS_OPERATOR_NEG] = "S26";
	ACTION[11][tokens::TS_OPERATOR_NONNULL] = "S27";
	ACTION[12][tokens::TS_NEWLINE] = "R32";
	ACTION[13][tokens::TS_NEWLINE] = "R33";
	ACTION[14][tokens::TS_IDENTIFIER] = "S28";
	ACTION[15][tokens::NTS_STATEMENT_CONDITIONAL_TEST] = "29";
	ACTION[15][tokens::TS_TERM] = "S23";
	ACTION[15][tokens::NTS_OPERATOR_UNARY] = "25";
	ACTION[15][tokens::TS_OPERATOR_NEG] = "S26";
	ACTION[15][tokens::TS_OPERATOR_NONNULL] = "S27";
	ACTION[16][tokens::TS_IDENTIFIER] = "S30";
	ACTION[17][tokens::TS_EOF] = "R1";
	ACTION[18][tokens::NTS_STATEMENT_EXPRESSION] = "31";
	ACTION[18][tokens::TS_TERM] = "S8";
	ACTION[18][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[19][tokens::NTS_STATEMENT_EXPRESSION] = "32";
	ACTION[19][tokens::TS_TERM] = "S8";
	ACTION[19][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[20][tokens::NTS_STATEMENT_EXPRESSION_3] = "33";
	ACTION[21][tokens::NTS_STATEMENT_EXPRESSION_3] = "34";
	ACTION[22][tokens::NTS_EXPRESSION] = "35";
	ACTION[23][tokens::NTS_OPERATOR_BINARY] = "36";
	ACTION[23][tokens::TS_COLON] = "R23";
	ACTION[23][tokens::TS_OPERATOR_LT] = "S37";
	ACTION[23][tokens::TS_OPERATOR_LTE] = "S38";
	ACTION[23][tokens::TS_OPERATOR_GT] = "S39";
	ACTION[23][tokens::TS_OPERATOR_GTE] = "S40";
	ACTION[23][tokens::TS_OPERATOR_DOUBLE_EQUALS] = "S41";
	ACTION[23][tokens::TS_OPERATOR_TRIPLE_EQUALS] = "S42";
	ACTION[24][tokens::TS_COLON] = "S43";
	ACTION[25][tokens::TS_TERM] = "S44";
	ACTION[26][tokens::TS_TERM] = "R30";
	ACTION[27][tokens::TS_TERM] = "R31";
	ACTION[28][tokens::TS_COMMA] = "S45";
	ACTION[29][tokens::TS_COLON] = "S46";
	ACTION[30][tokens::TS_LPAREN] = "S47";
	ACTION[31][tokens::TS_NEWLINE] = "R7";
	ACTION[32][tokens::TS_NEWLINE] = "R8";
	ACTION[33][tokens::TS_NEWLINE] = "R11";
	ACTION[34][tokens::TS_NEWLINE] = "R12";
	ACTION[35][tokens::TS_NEWLINE] = "R14";
	ACTION[36][tokens::TS_TERM] = "S48";
	ACTION[37][tokens::TS_TERM] = "R24";
	ACTION[38][tokens::TS_TERM] = "R25";
	ACTION[39][tokens::TS_TERM] = "R26";
	ACTION[40][tokens::TS_TERM] = "R27";
	ACTION[41][tokens::TS_TERM] = "R28";
	ACTION[42][tokens::TS_TERM] = "R29";
	ACTION[43][tokens::NTS_STATEMENTS] = "49";
	ACTION[43][tokens::NTS_STATEMENT] = "50";
	ACTION[43][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[43][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[43][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[43][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[43][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[43][tokens::TS_TERM] = "S8";
	ACTION[43][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[43][tokens::TS_IDENTIFIER] = "S10";
	ACTION[43][tokens::TS_IF] = "S11";
	ACTION[43][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[43][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[43][tokens::TS_DEFINE] = "S16";
	ACTION[43][tokens::TS_FOR] = "S14";
	ACTION[43][tokens::TS_WHILE] = "S15";
	ACTION[44][tokens::TS_COLON] = "R22";
	ACTION[45][tokens::TS_TERM] = "S51";
	ACTION[46][tokens::NTS_STATEMENTS] = "52";
	ACTION[46][tokens::NTS_STATEMENT] = "53";
	ACTION[46][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[46][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[46][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[46][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[46][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[46][tokens::TS_TERM] = "S8";
	ACTION[46][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[46][tokens::TS_IDENTIFIER] = "S10";
	ACTION[46][tokens::TS_IF] = "S11";
	ACTION[46][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[46][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[46][tokens::TS_DEFINE] = "S16";
	ACTION[46][tokens::TS_FOR] = "S14";
	ACTION[46][tokens::TS_WHILE] = "S15";
	ACTION[47][tokens::NTS_FUNCTION_PARAMS] = "55";
	ACTION[47][tokens::TS_IDENTIFIER] = "S54";
	ACTION[47][tokens::TS_RPAREN] = "S56";
	ACTION[48][tokens::TS_COLON] = "R21";
	ACTION[49][tokens::TS_NEWLINE] = "R15";
	ACTION[49][tokens::NTS_STATEMENT_CONDITIONAL_ELIF] = "57";
	ACTION[49][tokens::TS_ELIF] = "S58";
	ACTION[50][tokens::TS_NEWLINE] = "S59";
	ACTION[51][tokens::TS_COLON] = "S60";
	ACTION[51][tokens::TS_COMMA] = "S61";
	ACTION[52][tokens::TS_NEWLINE] = "R37";
	ACTION[53][tokens::TS_NEWLINE] = "S62";
	ACTION[54][tokens::TS_COMMA] = "S63";
	ACTION[54][tokens::TS_RPAREN] = "S64";
	ACTION[55][tokens::TS_COLON] = "S65";
	ACTION[56][tokens::TS_COLON] = "R41";
	ACTION[57][tokens::TS_NEWLINE] = "R16";
	ACTION[58][tokens::NTS_STATEMENT_CONDITIONAL_TEST] = "66";
	ACTION[58][tokens::TS_TERM] = "S23";
	ACTION[58][tokens::NTS_OPERATOR_UNARY] = "25";
	ACTION[58][tokens::TS_OPERATOR_NEG] = "S26";
	ACTION[58][tokens::TS_OPERATOR_NONNULL] = "S27";
	ACTION[59][tokens::TS_NEWLINE] = "R1";
	ACTION[59][tokens::TS_ELIF] = "R1";
	ACTION[60][tokens::NTS_STATEMENTS] = "67";
	ACTION[60][tokens::NTS_STATEMENT] = "53";
	ACTION[60][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[60][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[60][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[60][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[60][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[60][tokens::TS_TERM] = "S8";
	ACTION[60][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[60][tokens::TS_IDENTIFIER] = "S10";
	ACTION[60][tokens::TS_IF] = "S11";
	ACTION[60][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[60][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[60][tokens::TS_DEFINE] = "S16";
	ACTION[60][tokens::TS_FOR] = "S14";
	ACTION[60][tokens::TS_WHILE] = "S15";
	ACTION[61][tokens::TS_TERM] = "S68";
	ACTION[62][tokens::TS_NEWLINE] = "R1";
	ACTION[63][tokens::NTS_FUNCTION_PARAMS] = "69";
	ACTION[63][tokens::TS_IDENTIFIER] = "S54";
	ACTION[63][tokens::TS_RPAREN] = "S56";
	ACTION[64][tokens::TS_COLON] = "R40";
	ACTION[65][tokens::TS_NEWLINE] = "R38";
	ACTION[66][tokens::TS_COLON] = "S70";
	ACTION[67][tokens::TS_NEWLINE] = "R36";
	ACTION[68][tokens::TS_COLON] = "S71";
	ACTION[69][tokens::TS_COLON] = "R39";
	ACTION[70][tokens::NTS_STATEMENTS] = "72";
	ACTION[70][tokens::NTS_STATEMENT] = "50";
	ACTION[70][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[70][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[70][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[70][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[70][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[70][tokens::TS_TERM] = "S8";
	ACTION[70][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[70][tokens::TS_IDENTIFIER] = "S10";
	ACTION[70][tokens::TS_IF] = "S11";
	ACTION[70][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[70][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[70][tokens::TS_DEFINE] = "S16";
	ACTION[70][tokens::TS_FOR] = "S14";
	ACTION[70][tokens::TS_WHILE] = "S15";
	ACTION[71][tokens::NTS_STATEMENTS] = "73";
	ACTION[71][tokens::NTS_STATEMENT] = "53";
	ACTION[71][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[71][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[71][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[71][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[71][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[71][tokens::TS_TERM] = "S8";
	ACTION[71][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[71][tokens::TS_IDENTIFIER] = "S10";
	ACTION[71][tokens::TS_IF] = "S11";
	ACTION[71][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[71][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[71][tokens::TS_DEFINE] = "S16";
	ACTION[71][tokens::TS_FOR] = "S14";
	ACTION[71][tokens::TS_WHILE] = "S15";
	ACTION[72][tokens::TS_NEWLINE] = "R17";
	ACTION[72][tokens::NTS_STATEMENT_CONDITIONAL_ELIF] = "74";
	ACTION[72][tokens::NTS_STATEMENT_CONDITIONAL_ELSE] = "76";
	ACTION[72][tokens::TS_ELIF] = "S75";
	ACTION[73][tokens::TS_NEWLINE] = "R35";
	ACTION[74][tokens::TS_NEWLINE] = "R18";
	ACTION[75][tokens::NTS_STATEMENT_CONDITIONAL_TEST] = "77";
	ACTION[75][tokens::TS_TERM] = "S23";
	ACTION[75][tokens::NTS_OPERATOR_UNARY] = "25";
	ACTION[75][tokens::TS_OPERATOR_NEG] = "S26";
	ACTION[75][tokens::TS_OPERATOR_NONNULL] = "S27";
	ACTION[76][tokens::TS_NEWLINE] = "R19";
	ACTION[77][tokens::TS_COLON] = "S78";
	ACTION[78][tokens::NTS_STATEMENTS] = "79";
	ACTION[78][tokens::NTS_STATEMENT] = "50";
	ACTION[78][tokens::NTS_STATEMENT_EXPRESSION] = "3";
	ACTION[78][tokens::NTS_STATEMENT_ASSIGNMENT] = "4";
	ACTION[78][tokens::NTS_STATEMENT_CONDITIONAL] = "5";
	ACTION[78][tokens::NTS_STATEMENT_LOOP] = "6";
	ACTION[78][tokens::NTS_STATEMENT_DEFINE_FUNCTION] = "7";
	ACTION[78][tokens::TS_TERM] = "S8";
	ACTION[78][tokens::NTS_STATEMENT_EXPRESSION_2] = "9";
	ACTION[78][tokens::TS_IDENTIFIER] = "S10";
	ACTION[78][tokens::TS_IF] = "S11";
	ACTION[78][tokens::NTS_STATEMENT_LOOP_FOR] = "12";
	ACTION[78][tokens::NTS_STATEMENT_LOOP_WHILE] = "13";
	ACTION[78][tokens::TS_DEFINE] = "S16";
	ACTION[78][tokens::TS_FOR] = "S14";
	ACTION[78][tokens::TS_WHILE] = "S15";
	ACTION[79][tokens::TS_NEWLINE] = "R20";
	ACTION[79][tokens::NTS_STATEMENT_CONDITIONAL_ELIF] = "74";
	ACTION[79][tokens::NTS_STATEMENT_CONDITIONAL_ELSE] = "76";
	ACTION[79][tokens::TS_ELIF] = "S75";
}

void mgparser::ppeval() {
	auto token = lexer->lltoken();
	while (true) {
		auto s = ss.top();
		if (token.second >= tokens::TS_STRING && token.second <= tokens::MYSBL_END) {
			if (ACTION[s.state][token.second].substr(0, 1) == "S") {
				ss.push({token.second});
				ss.push({atoi(ACTION[s.state][token.second].substr(1).c_str())});
				token = lexer->lltoken();
			} else if (ACTION[s.state][token.second] == "ACCEPT") {
				cout << "Parse Accepted" << endl;
				break;
			} else if (ACTION[s.state][token.second].substr(0, 1) == "R") {
				auto g = GOTO[atoi(ACTION[s.state][token.second].substr(1).c_str())];
				for (int i = 0; i < g.second; i++) { ss.pop(); }
				s = ss.top();
				ss.push(stack_symbol{g.first});
				ss.push(stack_symbol{atoi(ACTION[s.state][g.first].c_str())});
			} else {
				cout << "Parse Error" << endl;
				break;
			}
		} else {
			token = lexer->lltoken();
		}
	}
}
